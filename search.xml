<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2022 端午節立蛋</title>
    <url>/2022/06/2022-dragon-boat-festival/</url>
    <content><![CDATA[<p>端午節不立蛋嗎？</p>
<span id="more"></span>

<h3 id="今年戰績"><a href="#今年戰績" class="headerlink" title="今年戰績"></a>今年戰績</h3><p>11:37～12:46 共 69 分鐘，立了 15 顆蛋。</p>
<p><img src="1.jpg"></p>
<br>
今天的廢文就到這邊，我們下篇文見吧 😃]]></content>
  </entry>
  <entry>
    <title>【聽講筆記】Jamie’s AMA</title>
    <url>/2022/08/2022-05-jamie-ama/</url>
    <content><![CDATA[<p>五月中的時候，在 AppWorks School 聽了 Jamie’s AMA (Ask Me Anything)，邊聽邊記了一點筆記，想說整理在這邊，可能還夾雜一點個人的補充，分享給大家～（這篇應該會蠻隨筆性質的）</p>
<span id="more"></span>

<h3 id="中午吃什麼？"><a href="#中午吃什麼？" class="headerlink" title="中午吃什麼？"></a>中午吃什麼？</h3><p>不知道中午要吃什麼？求方便的話，可以讓別人來決定，或是可以從外送平台上做挑選。<br>也可以根據一些特殊情況來做選擇：因為疫情的關係，變得比較少運動，這時可以挑比較健康的沙拉來吃，讓自己感覺起來比較健康！</p>
<h3 id="No-Code-成趨勢，軟體工程師何去何從？"><a href="#No-Code-成趨勢，軟體工程師何去何從？" class="headerlink" title="No-Code 成趨勢，軟體工程師何去何從？"></a>No-Code 成趨勢，軟體工程師何去何從？</h3><p>未來不會真的達到所謂的「no-code」，只是不同層級 (比較 low-level) 的 abstraction 或自動化，讓軟體工程師能夠專注在更 high-level 的事情上，如此一來，可以提升單位生產力。</p>
<p>像是對比較早期的開發而言，library 的出現就是一種 abstraction。</p>
<p>若舉農夫為例，因為機械工具的發明，讓農夫只要專注在 high-level 的工作即可，其他 low-level 的事情大部分都可以交給機械工具去處理。</p>
<p>所以，軟體工程師何去何從？即便是如此，業界對於軟體工程師的需求還是會不斷上升，因為什麼都講求數位化，需求只會越來越高，像目前金融業大概只有 2-3% 的數位轉型呢！</p>
<h3 id="遠端工作"><a href="#遠端工作" class="headerlink" title="遠端工作"></a>遠端工作</h3><p>因為疫情的關係，遠端工作更為普遍，也就因此，我們更容易得到國外的工作機會。<br>所以說，累積實力和提升語言能力挺重要的，地域因素並不是個限制！</p>
<h3 id="校園-vs-業界"><a href="#校園-vs-業界" class="headerlink" title="校園 vs 業界"></a>校園 vs 業界</h3><p>業界並不像學校，什麼問題都 well-defined，我們要學會自己去定義問題！<br>這一行不是只有純寫程式而已，所以如果程式能力沒到很頂，沒關係，天生我材必有用，這一行還有其他方面啊！<br>就像車子不是只有引擎而已，還有操作手感、座椅舒適度等等的元素需要去顧及。</p>
<h3 id="如何成長更快？"><a href="#如何成長更快？" class="headerlink" title="如何成長更快？"></a>如何成長更快？</h3><p>從失敗、犯錯中學習。失敗為成功之母！</p>
<h3 id="不是本科的怎麼辦？"><a href="#不是本科的怎麼辦？" class="headerlink" title="不是本科的怎麼辦？"></a>不是本科的怎麼辦？</h3><p>每個人都有他的強項，大家各自發揮所長以 improve 整體的表現。<br>但其實那也只是名義上的本科／非本科，那只會決定我們的課表長怎樣，至於實際我們想學什麼、想成為什麼樣的人，都得看我們自己怎麼去行動。</p>
<h3 id="國外工作一定讚？"><a href="#國外工作一定讚？" class="headerlink" title="國外工作一定讚？"></a>國外工作一定讚？</h3><p>比較一下：在台灣工作，可能月薪 6-10 萬，而在美國矽谷工作，年薪會有個 30 萬美金；但是，在台灣，物價低很多，而在美國矽谷那邊，以那樣的薪水生活，可能會挺辛苦的。<br>所以說，看事情不要只看其中一面，卻忽略掉其他也同等重要的考量點！</p>
<h3 id="關於區塊鏈"><a href="#關於區塊鏈" class="headerlink" title="關於區塊鏈"></a>關於區塊鏈</h3><p>區塊鏈「去中心化」的特性，大大改變「價值交換」的方式。<br>過去的 https protocol 是從 server copy 一份給 client，然後 display 出來；而區塊鏈不一樣，它是「這邊消滅，那邊 create」。<br>可能在未來 30 年、50 年，區塊鏈將會顛覆地政、證券交易所等行業！</p>
<h3 id="自己人生，自己做主！"><a href="#自己人生，自己做主！" class="headerlink" title="自己人生，自己做主！"></a>自己人生，自己做主！</h3><p>有人曾對 Jamie 說過：「Jamie 你傻傻，創投在台灣那麼沙漠，你還要搞？」<br>然而現在看起來是挺不錯的。<br>所以，別因為別人撥冷水就不去嘗試了（但也要自己去判斷，而不是隨意行動）</p>
<h3 id="學習是能遷移的"><a href="#學習是能遷移的" class="headerlink" title="學習是能遷移的"></a>學習是能遷移的</h3><p>「學ＸＸＸ技術或是領域會不會找不到工作？」永遠會有，像是 mainframe😂<br>當中最關鍵是「能力能帶著走」，所以，別太糾結這一點，專注在提升自我吧！</p>
<h3 id="壓力調適"><a href="#壓力調適" class="headerlink" title="壓力調適"></a>壓力調適</h3><p>如何排解壓力？或者問說，為何會覺得有壓力？<br>那是因為，我們對於失敗或是最慘情況太過於模糊，就像是半夜上廁所太暗令人害怕。<br>所以說，試著想像「失敗」以後的最慘情況吧！<br>在過程中你或許會發現，其實還好，就僅僅只是「沒那麼成功」而已，想得夠清楚一點，你就會發現實際上沒那麼恐怖。<br>簡單來說，會壓力大的主要原因：對未來感到不明確。</p>
<p>除此之外，多運動吧，可以先從簡單的散步和慢跑開始。<br>最重要的是，讓自己開心，常保愉快心情！</p>
<h3 id="思維的價值所在"><a href="#思維的價值所在" class="headerlink" title="思維的價值所在"></a>思維的價值所在</h3><p>有人曾問 Jamie：「為何你不當工程師？」<br>然而，Jamie 說他其實是把自己視為 engineer 的。<br>只不過是把「engineering 的技術」套用在 social engineering，因此，「engineering 的技術」其實是可以帶著走、套用於其他領域的「思維」!!!<br>所以很多事情，對於從小學 engineering 的 Jamie 來說，都是一種 engineer！</p>
<h3 id="面試心態"><a href="#面試心態" class="headerlink" title="面試心態"></a>面試心態</h3><p>關於面試，不要覺得自己是在面試，而是在進行一場「媒合會」。<br>找工作可能會花上幾個月，但確定工作實際上班是好幾年的！<br>因此，別急，多面幾間公司，挑個對自己來說最好的，像是覺得自己在過程當中會不會有成就感、公司整體帶給你的感覺。</p>
<p>切記，這是一個雙方互相了解的過程，也當成是你在面試他們！<br>不要將就，而且，真的別急啊！</p>
<h3 id="怎麼做時間管理？"><a href="#怎麼做時間管理？" class="headerlink" title="怎麼做時間管理？"></a>怎麼做時間管理？</h3><ol>
<li>sleep hacking。Jamie 的睡眠時間為 11pm ~ 5am 六個小時，找個適合自己的睡眠時間吧！</li>
<li>用 engineering 的思維去 approach。可以 implement 新的 feature 去 improve 人生作業系統，以 email 為例，可以弄個 Gmail filter (因為每一封郵件看似一點點，但累積起來可是很可觀的)。反正就是多 try，找出最 fit 自己的方式！</li>
</ol>
<h3 id="寫作價值連城"><a href="#寫作價值連城" class="headerlink" title="寫作價值連城"></a>寫作價值連城</h3><p>對 Jamie 而言，在大量寫網誌的過程當中更加了解自己。<br>因為如果你今天要發布，你會希望文章結構是嚴謹且有架構的，這時你會不斷跟自己 talk，也就會越來越清楚自己是誰。（這呼應我的：認識自我 • 感受世界 • 創造價值）</p>
<p>而且，對於 Jamie 來說，寫作和運動是 engineer 最基本的工夫！</p>
<h3 id="關於設定目標：成功與失敗"><a href="#關於設定目標：成功與失敗" class="headerlink" title="關於設定目標：成功與失敗"></a>關於設定目標：成功與失敗</h3><p>把最失敗的情況想清楚，像是：School 一年賠 100 萬而且沒有幫助到任何人。<br>把最基本的成功定義清楚，像是：School 每年幫助到一個人。</p>
<p>所以說，成功、失敗不是絕對的 0 與 1，它是一段光譜！</p>
<h3 id="思考的深與淺"><a href="#思考的深與淺" class="headerlink" title="思考的深與淺"></a>思考的深與淺</h3><p>不要「我不喜歡那個」就沒了，而是要知道「我喜歡什麼」。</p>
<p>舉個例：想去國外工作 → 國外＝非國內 → 你要矽谷？北歐？東南亞？</p>
<h3 id="最該投資的是自己"><a href="#最該投資的是自己" class="headerlink" title="最該投資的是自己"></a>最該投資的是自己</h3><p>多花點時間了解自己，如同 Steve Jobs 所說的，點終究會連起來的！</p>
<br>
希望讀完這篇文章的您能夠有所收穫，我們下篇文見啦 😃]]></content>
  </entry>
  <entry>
    <title>2024 端午節立蛋</title>
    <url>/2024/06/2024-dragon-boat-festival/</url>
    <content><![CDATA[<p>又到了一年一度的端午節立蛋啦！</p>
<span id="more"></span>

<h3 id="今年戰績"><a href="#今年戰績" class="headerlink" title="今年戰績"></a>今年戰績</h3><p>11:42～13:53 共 131 分鐘，立了 20 顆蛋。</p>
<p><img src="1.jpg"></p>
<p>好久沒在這裡寫文章，都積滿了灰塵⋯⋯<br>而且久違的一篇，居然是「端午節立蛋」系列？青菜啦XD</p>
<p>在剛剛的立蛋過程中，腦中跑出很多聲音，比方「剛剛明明就在短短幾分鐘內連續立起來好幾顆，我這顆已經立了那麼久都還沒立起來，我真的還有辦法再立一顆嗎？」，或者「這顆蛋怎麼看越久，越覺得上頭有張可愛動物臉(?)在對我微笑？也太俏皮了吧！」，各種類型的都有，挺有趣的。</p>
<p>還有策略想法 (不知道可以用什麼合適的詞來形容) 的部分。</p>
<p>立完一輪 (也就是每顆蛋都嘗試過，但有些因為立很久都還是立不起來，會先選擇擱著) 以後，想說嘗試看看：既然<a href="/2023/06/2023-dragon-boat-festival" target="_blank">去年立蛋</a>「改用表面積比較小、也就是比較尖的那一面來立」能夠成功，那為何今年不嘗試套用看看去年的「成功模式」呢？於是乎，那些嘗試被我立過一輪但沒成功立起來的蛋，就改用那種方式來立。<br>嘗試的過程中一樣各種聲音：我想要證明這個想法是可行的，那些蛋之所以會立不起來，會不會是跟去年的那顆蛋一樣，因為比較鈍的那一面表面上有顆粒狀突起，所以換個面，可能更有機會成功？<br>不過事情沒那麼順利⋯⋯一開始確實是有成功一兩顆啦，但⋯⋯（我現在想打「但」，但筆電選字一直給我「蛋」，啊想打「蛋」，就又會是「但」😅）<br>反正就⋯⋯（現在時間 14:27，還沒吃午餐，早餐我也沒吃，想快點結束掉現在在做的事，開始語無倫次了⋯⋯為何不吃完午餐再打？因為吃完午餐就會懶惰了⋯⋯）<br>反正那個策略的成效沒想像中好。</p>
<p>漁市⋯⋯於是（什麼選自⋯⋯什麼選字嘛，真是⋯⋯），我想到另外一個策略：我有注意到，那些被我立起來的蛋，還蠻多是只花一點點時間就被我立起來，而且還蠻多是在一開始，就明確感受到這顆蛋就是會被我立起來，原因是可能一開始蛋放地板的角度、位置之類的選擇就是會比較好立，所以就讓那次的「嘗試」（注意，不是「蛋」）更容易成功。<br>所以我猜測，之所以立不起來，或許不是因為「那顆蛋就是不好立」，而是「方式可能需要再調整」，說了這麼複雜，反正我得到的結論是「選擇比努力重要」。</p>
<p>那感受現在有點難用文字去描述，畢竟我目前還蠻常辭不達意之外，也想趕快吃東西不然可能想吃的已經賣完之類的⋯⋯</p>
<p>所以我在接下來不是選擇在一顆蛋上踟躕不前，而是如果感覺在立這顆蛋的一開始就覺得不對勁，我就會很快地換下一顆。很多方面好像也可以這樣去 approach，如果發現卡關了，就先擱著，愛因斯坦說得很有道理：「什麼叫瘋子，就是重複做同樣的事情還期待會出現不同的結果。」先做其他的來轉換一下，再回來的時候，或許會因為「切入點」的不同，讓事情更容易能獲得解決也說不定呢～</p>
<p>除此之外，毅力也很重要。已經超過一點了，我還是告訴自己，我這次想要立 20 顆起來，還有大概兩三顆 (中間有弄倒，哭)，加油！<br>立第 20 顆蛋起來的那個瞬間真的很感動，那感受，跟考完指考等放榜然後收到成績簡訊然後結果令自己還算滿意的感覺很像啊！（話說，還真懷念那感受啊，已經很久沒那樣的內心體驗了⋯⋯）</p>
<p>好了，國文老師已經給我 0 級分了，我再寫下去，稿紙背面也不夠我瞎扯淡了。</p>
<p>就先這樣吧，想吃東西了。</p>
<p>但說實話，今天立蛋的體驗真的很寶貴，記得這份心路歷程，帶往其他方面吧！</p>
<p>（吃完東西，回來補充：其實仔細想想，第二個策略效果好像也沒有比較突出，整個過程，我覺得重點是「要有個信念讓自己可以持續下去」，畢竟「意義」是我們去賦予的，沒有一個標準答案說它就是要這樣或那樣，でしょう？）</p>
]]></content>
  </entry>
  <entry>
    <title>【心得】2022 Yourator 數位職涯博覽會</title>
    <url>/2022/03/2022-yourator-career-fair/</url>
    <content><![CDATA[<p>簡單分享昨天參加職涯博覽會的收穫～</p>
<span id="more"></span>

<h2 id="做一對一職涯諮詢"><a href="#做一對一職涯諮詢" class="headerlink" title="做一對一職涯諮詢"></a>做一對一職涯諮詢</h2><p>雖然只有短短 15 分鐘，但還挺不錯的！</p>
<h3 id="面試官看重什麼"><a href="#面試官看重什麼" class="headerlink" title="面試官看重什麼"></a>面試官看重什麼</h3><p>和面試官對談時，他們看的是你的邏輯、想法，也藉機了解你對程式語言、框架的熟悉程度。</p>
<p>會某個技術，但覺得自己還不夠好嗎？以新鮮人求職來說，他們不是非得要即戰力，所以職務上面列出來的條件不需要真的到非常熟，進到公司以後內部可以再做培訓。他們最看重的，就是你多有 potential！</p>
<p>所以如果要做 side project，做深入一點，重質不重量，可以敘述你做了什麼、為什麼做、遇到什麼挑戰、如何解決等等的，讓面試官清楚知道你的技術能力之外，也能更了解你的軟實力。</p>
<h3 id="呈現自我的小建議"><a href="#呈現自我的小建議" class="headerlink" title="呈現自我的小建議"></a>呈現自我的小建議</h3><ul>
<li>履歷上的經歷可以用 STAR 原則來撰寫：Situation (情境)、Task (任務)、Action (行動)、Result (結果)</li>
<li>在面試前，可以先做一份簡報，面試時，可以拿出來輔助自我介紹，或許還可以列出之前做過的 project，讓自己在描述的時候能更加順利（上一次聽到這個建議是在交大就業博覽會）</li>
</ul>
<h3 id="擔心口語表達方面？"><a href="#擔心口語表達方面？" class="headerlink" title="擔心口語表達方面？"></a>擔心口語表達方面？</h3><p>面試前先準備好面試官可能會問到的問題，尤其是自己履歷上頭有提到的，一定要練到非常熟！</p>
<p>可以對鏡子說，也可以找朋友練習，訓練臨場反應之外，也練習不讓緊張影響到太多表現。</p>
<p>有趣的建議：每天起床對鏡子說十次我很好！（覺得蠢？換個角度想，你不用正面思考去說服自己，平常不是都洗腦自己說自己不夠好不是嗎？只是換個台詞、換個想法而已）</p>
<hr>
<h2 id="逛攤心得大集合"><a href="#逛攤心得大集合" class="headerlink" title="逛攤心得大集合"></a>逛攤心得大集合</h2><p>按照類別彙整在一起～</p>
<h3 id="平時的精進"><a href="#平時的精進" class="headerlink" title="平時的精進"></a>平時的精進</h3><p>做相關 side project 真的很吃香，不用到很複雜，而是那個 project 的完整性！</p>
<p>以 PHP 相關開發為例，我問了某間企業的技術 leader。怎麼學 PHP 呢？直接去 GitHub 上面找相關的 project 模仿、學習，對於有其他程式語言開發經驗的人來說，直接做一個 project，而不是很制式地從頭學語法一步一步慢慢來，畢竟開發這一塊就是重實作！<br>（他後來還推薦了我他之前寫的「<a href="https://medium.com/parenting-tw/web%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E5%B8%AB%E6%87%89%E6%9C%89%E7%9A%84%E4%B8%83%E5%80%8B%E7%89%B9%E8%B3%AA-f4ea03270a04">Web程式設計師應有的七個特質</a>」這篇文章，感覺不錯，可以找時間來拜讀個，啊，但這樣你就知道他是哪個企業的了xD）</p>
<p>做 project 的同時，可以試著完善 readme 之類的說明，或許也可以寫成文章，以便於在未來面試時，分享你做這個 project 是為了解決什麼樣的問題、你用什麼方法去實作、中間遇到困難是如何解決的。</p>
<p>面試官真的很愛從你做過的 project 上去問你問題，還有履歷上有提到的東西，真的大概就是這樣！</p>
<h3 id="關於投遞履歷"><a href="#關於投遞履歷" class="headerlink" title="關於投遞履歷"></a>關於投遞履歷</h3><p>（這是某間企業的 HR 分享給我的，一樣是比較適合給新鮮人的建議）</p>
<p>職務敘述上面寫到的需要幾年工作經驗、要會某個程式語言、開發框架需要有幾年的經驗，真的參考就好，即便沒完全達到上面的條件要求，也去投履歷看看，HR 看到覺得不錯的，也是有可能會給內部負責的人看，因此也有可能會有面試機會！</p>
<p>所以，投就對了！管它上面寫需要幾年，大不了沒收到任何回應，多投多試，就是多一份機會！</p>
<p>還有，不要看到有些技術不太熟甚至不會就不敢投，如果每個技術都會，雖然拿到 offer 的機會可能會比較高，但我們更應該在乎的，是這個工作對自己的職涯發展有無幫助。</p>
<p>而且別忘了，人是可以學習的，不要覺得現在不會就永遠不會，你只是暫時不會而已，進去再補足對職涯也是個不錯的成長方式！</p>
<p>（當然企業不見得會錄取你就是了，那也沒關係，還有下一間啊）</p>
<h3 id="面試前怎麼準備？"><a href="#面試前怎麼準備？" class="headerlink" title="面試前怎麼準備？"></a>面試前怎麼準備？</h3><p>一定要對企業有足夠的了解、知道他們有什麼產品、在做什麼，不然會顯得亂槍打鳥！</p>
<p>而且別忘了，務必要準備好要問面試官的問題，不然會讓面試官覺得你沒準備充分（我禮拜五的那場 AppWorks School 面試還真忘記準備要提問的問題，覺得很嘔😢）</p>
<h3 id="面試官看重什麼-1"><a href="#面試官看重什麼-1" class="headerlink" title="面試官看重什麼"></a>面試官看重什麼</h3><p>以新鮮人來說，面試官很注重的是你的 <strong>potential</strong>，展現出來的感覺面試官真的很看重！（詢問了很多間，真的很多攤位都有提到 potential 這個英文單字啊！）</p>
<p>所以，真的可以嘗試做 side project，然後深入一點讓它具有一定的完整性，不要這個只做一點、那個也只做一點，很難更深入了解所選用程式語言、框架的知識技術之外，也很難有著對一個較為完整 project 的思考。</p>
<p>此外，<strong>求職期間也要持續學習，不要只是參加就業博覽會、寫履歷這種形式上的努力而已，不然空窗期在那邊，面試官也會好奇難道這段期間都沒寫 code？</strong></p>
<p>（AppWorks School 面試也被問到最近在寫什麼程式，答不太出來覺得有點糗⋯⋯）</p>
<h3 id="覺得面試講得不好？"><a href="#覺得面試講得不好？" class="headerlink" title="覺得面試講得不好？"></a>覺得面試講得不好？</h3><p>博覽會快結束的時候，很榮幸能和<a href="https://www.facebook.com/W.Herder">則文老師</a>請教有關於口語表達方面的事情，因為我真的很欣賞他的表達方式，覺得很有內容和條理，最後還跟他合了照，回去之後還私訊詢問一些事情～<br>（我真的很想要突破這一點啊！）</p>
<p>肌肉怎麼練？就是一直練。口語表達也是一樣，可以多做上台分享的那一個！</p>
<p>可以在面試前，去預想面試官可能會問到什麼問題，列出來，然後大量練習，腦海中要先有個脈絡，<strong>要先有個劇本</strong>，正式講的時候就循著那個脈絡表達出來，總而言之，就是大量練習！</p>
<p>如果擔心事先準備的話會不會很像在背稿，那就不要逐字稿，而是列出大綱、脈絡，說不定就能改善這個部分。</p>
<br>
加油，在精進自我的路上，你，並不孤單！]]></content>
  </entry>
  <entry>
    <title>2023 端午節立蛋</title>
    <url>/2023/06/2023-dragon-boat-festival/</url>
    <content><![CDATA[<p>端午節就是要立蛋！</p>
<span id="more"></span>

<h3 id="今年戰績"><a href="#今年戰績" class="headerlink" title="今年戰績"></a>今年戰績</h3><p>11:35～13:03 共 88 分鐘，立了 15 + 3 顆蛋。</p>
<p><img src="1.png"></p>
<p>最後一顆被我立起來的蛋，也就是照片裡面用黃線圈起來的那顆，花了我超過半小時吧？</p>
<p><img src="2.png"></p>
<p>原因在於它表面積比較大的那一側，上頭有不規則而且左右不平均的顆粒狀突起，讓它特別難被立起來。</p>
<p>既然這樣，換一顆立不就好了嗎？為什麼還要花那麼多的時間執著在這一顆蛋上面呢？<br>考試的時候卡住了，為什麼不先跳下一題，還想繼續在這一題上面掙扎呢？</p>
<p>那是因為，我跟我爸都覺得：「哎呀上頭有那些顆粒狀突起，這顆蛋怎麼可能立得起來呢？」</p>
<p>但當下立馬又想到，欸不對欸，我們常常視為的「不可能」，它真的就是不可能嗎？為何不趁現在立蛋的機會來打破它呢？</p>
<p>本來想說看今年戰績能不能勝過去年的，但比起從小到大已經習慣膩了且感到厭煩的「成績與比較」，我更想要嘗試去「打破它」。</p>
<p>我就不信，他人一派輕鬆、不用負起任何責任的否定言語，我們就只能順著那樣的劇本走。</p>
<p>於是乎，我就帶著這樣的心境，將想要推翻那一切的蠢蠢欲動，全然投射於我現在正在立蛋的這件事情上面。心無旁騖。</p>
<p><img src="3.png"></p>
<p>嘗試了超過半小時仍未如願，難道只能屈服於過去習以為常的框架當中了嗎？<br>覺得無能為力，但，好像也就只能無能為力了⋯⋯</p>
<p>誰知道，哪來的靈機一動，突然想到說可以嘗試看看自己「從來都沒有嘗試過」的，改用表面積比較小、也就是比較尖的那一面來立。</p>
<p>完完全全沒有預料到，才嘗試了應該不到一分鐘吧？那顆蛋居然就這樣被我立起來了！</p>
<br />
有些時候，或許可以嘗試換個角度，也或許，就可能只是還沒放對地方而已。]]></content>
  </entry>
  <entry>
    <title>關於「抽象化」的一點隨想</title>
    <url>/2023/06/abstract-thinking/</url>
    <content><![CDATA[<p>好文分享：<a href="https://blog.heron.me/%E6%8A%BD%E8%B1%A1%E5%B1%A4-%E9%87%8D%E8%A6%81%E7%9A%84%E5%B9%BE%E4%BB%B6%E4%BA%8B-dd354a38c52b">抽象層 — 重要的幾件事</a></p>
<span id="more"></span>

<h3 id="工具的進步"><a href="#工具的進步" class="headerlink" title="工具的進步"></a>工具的進步</h3><p>講到「抽象層」，讓我立刻聯想到的就是最近很夯的「ChatGPT」。</p>
<p>ChatGPT 可以幫忙摘要文章、可以列點提供建議、甚至可以邊產生程式碼邊解釋為什麼它要這樣寫，有太多太多事情，只要問的人夠會問問題（下足夠精確的 prompt 給它），ChatGPT 幾乎都能做到，而且產出的內容往往令人嘆為觀止！</p>
<h3 id="擔心被取代？"><a href="#擔心被取代？" class="headerlink" title="擔心被取代？"></a>擔心被取代？</h3><p>我們會擔心，突然出現一個這麼強大的工具，要是因為這樣被取代了該怎麼辦？</p>
<p>讀完這篇文章以後，我試著從另外一個角度去切入這個議題：過去不也經歷過類似的事情嗎？從機械工業革命、電器工業革命、到資訊革命，我們有因為每一次的新突破被取代而什麼事都沒得讓我們去做嗎？沒有，是吧！</p>
<p>或者更精確來說，被取代的並不是「我們」本身，而是我們的「工作內容」。因為每一次的新突破，讓我們的工作內容變得越來越「高層次」，可以用更 high-level 的方式來完成一件事！</p>
<p>什麼意思？舉個例子：過去農夫需要親自下田一個一個慢慢來，有了機械，就能透過開著機械車來更快完成，後來又有資訊科技的輔助，或許根本不用親自下田，一切交給電腦去處理，未來人工智慧越來越普及，或許就能達到更精確的境界，也就是需要買多少種子、什麼時間播種、該灌溉多少水等等的，靠著人工智慧的輔助，達到以更低的成本產生出更高效益的成果。如此以來，農夫就能有更多時間和精力善用他們對農業方面的智慧，去創造出更高層次的各種可能（這我描述得挺模糊，可以把它想成就是能帶來更高的價值，比方研發新品種或是開發出新觀光型態）！</p>
<h3 id="終身學習的重要性"><a href="#終身學習的重要性" class="headerlink" title="終身學習的重要性"></a>終身學習的重要性</h3><p>所以這也是為什麼，「終身學習」那麼重要了。以剛剛的例子來說，願意學習怎麼開機械車、操作電腦、接觸人工智慧工具，可以大大優化農夫工作的方式，甚至有更多工作以外的時間能夠好好運用。</p>
<p>因此，或許我們該擔心的不是會不會被人工智慧取代，而是自己是否已逐漸失去學習新事物的熱忱。未來的工作內容或許會有很大的不同，我們能做的，就是透過新科技來 power up 自己的思考方式，與時俱進，跟著科技的進步一起成長。即使未來工作內容很不同，也可以用「更高層次」的思維，創造出前所未見的新價值！</p>
<h3 id="親身體悟"><a href="#親身體悟" class="headerlink" title="親身體悟"></a>親身體悟</h3><p>除了 ChatGPT，「抽象層」也讓我聯想到「處理一件事情的方式」，簡單分享一下：</p>
<p><img src="1.png" alt="1.png"></p>
<p>這是近期工作當中的深刻體會。</p>
<p>我有個任務是要在既有的系統上新增功能，但要新增那個功能，必須要改動系統當中的很多「部分」。</p>
<p>一開始我是想到什麼就把它記在一個筆記裡，像是可以怎麼改動程式碼、需要跟 PM 和 tech lead 討論什麼、會遇到什麼阻礙。這麼做有個好處，就是不會忘記我那些突然湧現的靈感，但壞處在於，各種類型的資訊集結在同一個地方，而且還沒被有邏輯地分類，當要實際執行的時候，發現筆記內容過於發散，裡頭都是屬於「低層次」的小行動，沒有一個比較「big picture」的內容，當下會不知道要怎麼開始，因而遲遲難以展開。</p>
<h3 id="處理事情-Power-Up"><a href="#處理事情-Power-Up" class="headerlink" title="處理事情 Power-Up"></a>處理事情 Power-Up</h3><p>後來請教了同事，他建議我先依照各個「部分」來整理那些小行動（以「部分」來當作小標題，小行動則在下面列點），然後試著收斂那些小行動。於是乎，我花大概一個上午整理那篇雜亂無章的筆記，讓它看起來井然有序、更容易被執行，到了下午，嘗試回過頭來繼續做的時候，發現那個任務其實沒到想像中那麼 mission impossible，之前覺得困難的地方，在於 coding 前沒有妥善的 planning！</p>
<p>後來就是因為用更高層次的方式來看這件事，才讓我得以更好地去進行它！以「高層次」來看事情，以「低層次」來執行，對於能順利完成較為複雜的任務，兩者真的缺一不可啊！</p>
<h3 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h3><p>所以說，這就是為什麼我會很想推薦這篇文章，「抽象層」這個思維模型真的很值得了解和拿來運用，它能夠幫助我們生活當中的各個層面😎</p>
]]></content>
  </entry>
  <entry>
    <title>用 Algorithmia 部署 ML Models</title>
    <url>/2021/07/algorithmia-ml-models/</url>
    <content><![CDATA[<p><a href="/2021/07/algorithmia-ml-models"><img src="https://images.unsplash.com/photo-1508610023868-3ba76d5122ba?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1338&q=80" style="width:50vw;" /></a></p>
<!-- <img src="0.jpeg" style="width:50vw;" /> -->

<p>這樣就不必在自己的 server 上裝很肥的套件了！只需要 call API 😎</p>
<span id="more"></span>

<p>本篇用簡單的方式來記錄一下好了，這樣之後需要的話，可以快速想起來當初是怎麼用的！</p>
<hr>
<h1 id="碎碎念一下"><a href="#碎碎念一下" class="headerlink" title="碎碎念一下"></a>碎碎念一下</h1><h2 id="我為何研究這個？"><a href="#我為何研究這個？" class="headerlink" title="我為何研究這個？"></a>我為何研究這個？</h2><p>2021 年的 7/1~7/3 參加了一場黑客松，我們這組其中有項 feature 要做：使用者傳皮膚照片給 LINE Bot，我們要把 model 預測出來的結果回傳給使用者。（預測是否僅是黑色素，或是有癌性的症狀）</p>
<p>我們當中的一個組員 Justin 把 model 的部分搞定了，但問題來了，該怎麼把 model 的部分結合進我們的 Flask 後端呢？</p>
<p>原本是想說，就直接在 pipenv 的環境下裝 tensorflow-cpu，但因為我們用來部署後端的 Heroku 免費帳戶有空間限制，這麼做是不可行的，除非花錢升級，但我覺得 CP 值不高⋯⋯</p>
<p>現在回過頭想，真的是非常感謝 Justin 對於這項 feature 的堅持，我們原本想說乾脆這個部分直接用模擬的算了，反正黑客松比較重要的是創新的 idea。倘若我們放棄掉了那項 feature，我看，這篇文應該也不會誕生，我也依然不知道該用什麼其他方法部署 ML models！</p>
<p>所以說，提個外話，人生就是這樣，你不去試，你永遠不會知道⋯⋯（詞窮了，反正你懂我意思xD）</p>
<h2 id="我怎麼找到的？"><a href="#我怎麼找到的？" class="headerlink" title="我怎麼找到的？"></a>我怎麼找到的？</h2><p>我忘記我下什麼關鍵詞了，好像是「deploy ml model free」吧(?)<br>找到了這一篇：<br><a href="https://www.freecodecamp.org/news/deploy-your-machine-learning-models-for-free/">How to Deploy a Machine Learning Model for Free – 7 ML Model Deployment Cloud Platforms</a></p>
<p>第一個就是 <a href="https://algorithmia.com/">Algorithmia</a> 了，也沒想太多，就立馬註冊來試試。</p>
<hr>
<h1 id="Server-端"><a href="#Server-端" class="headerlink" title="Server 端"></a>Server 端</h1><p>我是參考上面提到的那一篇推薦的「<a href="https://www.freecodecamp.org/news/deploy-ml-model-to-production-as-api/">How to Deploy your NLP Model to Production as an API with Algorithmia</a>」，寫得很好，不過我還是簡單記錄一下，讓之後能更快上手：</p>
<h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><h3 id="寫好-model（或-function）"><a href="#寫好-model（或-function）" class="headerlink" title="寫好 model（或 function）"></a>寫好 model（或 function）</h3><p>就是寫好一個 input 餵給它，它能 output 出東西的 model。<br>這個部分，先在自己的環境上完成吧！（或 <a href="https://colab.research.google.com/notebooks/intro.ipynb">Google Colab</a> 之類的雲端環境）</p>
<p>為何我還說「或 function」呢？因為如果拿 <a href="https://algorithmia.com/">Algorithmia</a> 做非 ML 的 API 好像也行，只是就有點殺雞用牛刀的感覺了。</p>
<h3 id="註冊-Algorithmia-帳戶"><a href="#註冊-Algorithmia-帳戶" class="headerlink" title="註冊 Algorithmia 帳戶"></a>註冊 Algorithmia 帳戶</h3><p><a href="https://teams.algorithmia.com/signup">https://teams.algorithmia.com/signup</a></p>
<h3 id="Create-一個新的-Algorithm"><a href="#Create-一個新的-Algorithm" class="headerlink" title="Create 一個新的 Algorithm"></a>Create 一個新的 Algorithm</h3><p>Home → Create New → Algorithm → 填一填 → Create New Algorithm<br>這樣就創建好囉！</p>
<h3 id="上傳靜態檔案"><a href="#上傳靜態檔案" class="headerlink" title="上傳靜態檔案"></a>上傳靜態檔案</h3><p>像是 pre-trained 好的 model 或者是 csv 檔之類的靜態檔案。<br>Data Sources → My Hosted Data → New Collection → 填一填 → Create Collection → 你會的<br>上傳完以後，檔案右側會出現「垂直的三個點點」，點開後有個「Copy Path」，複製起來，待會會需要用到，其格式為：<code>data://:username/:collection/:filename</code></p>
<h2 id="把-code-加進去"><a href="#把-code-加進去" class="headerlink" title="把 code 加進去"></a>把 code 加進去</h2><p>Algorithms → Source Code → 把之前寫好的 code 加進去<br>咦？直接複製貼上就行了嗎？不！有些要點，我把它列下來：</p>
<h3 id="import-套件"><a href="#import-套件" class="headerlink" title="import 套件"></a>import 套件</h3><p>套件直接 import 進來沒問題，要記得在上方的 <code>DEPENDENCIES</code> 加進套件，這樣在 build 的時候，環境就會幫我們裝好那些套件囉！<br>（套件名稱請參考 <a href="https://pypi.org/">PyPI</a>）</p>
<h3 id="存取靜態檔案"><a href="#存取靜態檔案" class="headerlink" title="存取靜態檔案"></a>存取靜態檔案</h3><p>剛上傳的靜態檔案該怎麼加進來呢？這個部分花了我不少時間 debug，後來才發現，必須要用到 Algorithmia 這個套件才能存取！</p>
<p>像我原本以為是這樣寫：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model_file = <span class="string">&#x27;data://:username/:collection/:filename&#x27;</span></span><br><span class="line">model.load_weights(model_file)</span><br></pre></td></tr></table></figure>

<p>後來才知道應該要這樣寫：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">client = Algorithmia.client()</span><br><span class="line">file_path = <span class="string">&#x27;data://:username/:collection/:filename&#x27;</span></span><br><span class="line">model_file = client.file(file_path).getFile().name</span><br><span class="line">model.load_weights(model_file)</span><br></pre></td></tr></table></figure>

<h3 id="function"><a href="#function" class="headerlink" title="function"></a>function</h3><p>function 的部分，也可以直接把它當成一般的 function 來寫，但有一個 function 比較特別，它叫做 <code>apply(input)</code>。</p>
<p>它是什麼？可以把它想成，它就是 C++ 裡面的 main function，而實際上，它就是能讓外部 call 它的 interface！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># API calls will begin at the apply() method, with the request body passed as &#x27;input&#x27;</span></span><br><span class="line"><span class="comment"># For more details, see algorithmia.com/developers/algorithm-development/languages</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply</span>(<span class="params"><span class="built_in">input</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">input</span>)</span><br></pre></td></tr></table></figure>

<p>所以說，其他的 function 都只是輔助，最後要把那些 function 放進 <code>apply(input)</code> 裡面才有作用哦！</p>
<h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><p><code>input</code> 這個 parameter 的格式呢？該怎麼去處理呢？注意哦，<code>apply()</code> 好像只能有一個 parameter，所以如果想傳很多 parameter 給它，可以把 <code>input</code> 當成一個 dictionary 來看：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 外部傳進來的 input 格式</span></span><br><span class="line">&#123; <span class="string">&quot;food&quot;</span>: <span class="string">&quot;草莓果醬&quot;</span>, <span class="string">&quot;option&quot;</span>: <span class="number">2</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 內部處理方式</span></span><br><span class="line">food = <span class="built_in">input</span>[<span class="string">&#x27;food&#x27;</span>]</span><br><span class="line">option = <span class="built_in">input</span>[<span class="string">&#x27;option&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>這是我目前想到最好的解決辦法，或許還有更好的方式處理這部分(?)</p>
<h2 id="發布"><a href="#發布" class="headerlink" title="發布"></a>發布</h2><p>BUILD → 等它處理一段時間 → 可以在下方的 Console 直接輸入 input 測試一下，像是 <code>&#123; &quot;food&quot;: &quot;草莓果醬&quot;, &quot;option&quot;: 2 &#125;</code> → PUBLISH → 後面就照著步驟走</p>
<h1 id="Client-端"><a href="#Client-端" class="headerlink" title="Client 端"></a>Client 端</h1><p>Algorithms → Overview → 往下滑有個 Install and Use → 照著上面做就行囉！<br>大概會長這樣：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Algorithmia</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = &#123;</span><br><span class="line">  <span class="string">&quot;food&quot;</span>: <span class="string">&quot;草莓果醬&quot;</span>,</span><br><span class="line">  <span class="string">&quot;option&quot;</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">client = Algorithmia.client(<span class="string">&#x27;&lt;default-key&gt;&#x27;</span>)</span><br><span class="line">algo = client.algo(<span class="string">&#x27;&lt;username&gt;/&lt;algorithm&gt;/&lt;version&gt;&#x27;</span>)</span><br><span class="line">algo.set_options(timeout=<span class="number">300</span>) <span class="comment"># optional</span></span><br><span class="line"><span class="built_in">print</span>(algo.pipe(<span class="built_in">input</span>).result)</span><br></pre></td></tr></table></figure>

<p>就是這麼簡單 😎</p>
<br>
希望讀完這篇文章的您能夠有所收穫，我們下篇文見啦 😃]]></content>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Deploy</tag>
        <tag>API</tag>
        <tag>Python</tag>
        <tag>黑客松</tag>
        <tag>交大</tag>
        <tag>教學</tag>
      </tags>
  </entry>
  <entry>
    <title>回顧在 AppWorks School 的那段日子</title>
    <url>/2022/08/appworks-school-campus-program-experience/</url>
    <content><![CDATA[<p>充實又有趣的三個多月！</p>
<span id="more"></span>

<div class="note success">
    也可以到 <a href="https://kanido386.medium.com/回顧在-appworks-school-的那段日子-batch-1-campus-program-d53b4567dd15" target="_blank">Medium</a> 觀看有穿插照片的版本，會更清楚哦～
</div>

<h3 id="我與-AppWorks-School-的相遇"><a href="#我與-AppWorks-School-的相遇" class="headerlink" title="我與 AppWorks School 的相遇"></a>我與 AppWorks School 的相遇</h3><p>嗨大家好～ 我是 AppWorks School Campus Program Batch #1 的 Tim 林彥廷，筆名「卡尼多」😀</p>
<p>畢業於國立陽明交通大學資訊工程學系，職涯初期打算先做⼀名後端⼯程師。</p>
<p>很榮幸能在這邊和大家分享我在 AppWorks School 的點點滴滴！</p>
<p>想當初，還蠻幸運的，在我正頹廢、無聊滑臉書的時候，無意間滑到了 AppWorks School Campus Program 的招生宣傳文，當時心想：「咦？難道臉書演算法是在指示我去了解一下這個 Program 來解救一波自己的頹廢嗎？」</p>
<p>不仔細一看還好，仔細一看天啊不得了！這個 Campus Program 是專門為資訊相關科系的大學和研究所學生設計的，跟我過去所認知的「AppWorks School 協助很多人成功轉職為軟體工程師」不太一樣，居然也有這麼一個 Program 是給資訊相關科系的！</p>
<p>除此之外，上面還提到說這個 Program 可以協助我們利用課餘時間累積實作經驗、熟悉業界實務、認識新創生態，並在探索志向的過程當中累積技術即戰力。這正是當下狀態的我所渴求的！更誇張的是，這個 Program 居然全程免費！</p>
<p>那時候想說說明會的時間我剛好有空，加上招生宣傳文上也有提到現場有提供餐點，於是乎，抱著聽聽看的心情，參加了說明會。沒想到聽完了以後，讓我對這個 Program 的內容深感興趣，因而開啟了我這段酷旅程😎（從來沒這樣想過，原來滑臉書也是一件很酷的事情）</p>
<hr>
<h3 id="申請過程"><a href="#申請過程" class="headerlink" title="申請過程"></a>申請過程</h3><p>第一步就是填寫申請表單。</p>
<p>我當初在申請的時候有幾題是屬於比較開放式的那種，像是你有哪些程式語言使用上的經驗、你想多了解軟體開發領域當中的哪一塊及為什麼、分享課外活動的經驗以及從中學到了什麼，所以在寫表單的過程當中，你會更加清楚自己為何想要申請這個 Program，當你發現越填表單動機越明確，那就代表這個 Program 是非常適合你的。</p>
<p>有一題甚至要我們錄個一分鐘的自我介紹影片，可能上傳到 YouTube，然後再貼影片連結到表單上面。這個部分在我們那時候是 optional 的，但究竟有沒有做會不會影響到錄取與否呢？我是不敢拿這麼寶貴的機會開玩笑啦，所以最後還是錄了😂</p>
<p>很快地，填完申請表單的隔天，就收到了面談邀約，超開心的！這個面談的目的，是為了更深入了解申請者的學習歷程以及對課程的期待。點郵件裡面的連結，登記完可以出席的日期和時段以後，就離進去這個 Program 不遠囉，剩下就是去 School 面談這一關了，當天帶著輕鬆的心情面談即可！</p>
<p>關於面談，有一點想提醒一下，雖然是輕鬆的面談，但別忘了事先準備好想問的問題啊！（那次我忘記準備，被問到的時候，居然還反問說其他面試者都怎麼問，當下就覺得完蛋了😂）</p>
<p>所以該做的基本準備還是要做的！</p>
<br>
P.S. 接下來我會一一介紹每一階段大概都在做什麼，小標後面的時間是我們那時候的，可能會跟新的 schedule 不太一樣哦～

<hr>
<h3 id="入學準備任務-11-days"><a href="#入學準備任務-11-days" class="headerlink" title="入學準備任務 (11 days)"></a>入學準備任務 (11 days)</h3><p>4/1 禮拜五傍晚快六點的時候，收到了一封標題前面是「AppWorks School」的郵件，當下既期待又怕受傷害，到底會是封錄取信還是感謝信呢？</p>
<p>點開一看：「太好了，是入學邀請啊！」</p>
<p>興奮之餘，還是謹慎地讀了一下內容，深怕這只是一場夢啊！</p>
<p>上頭有些任務要在入學前完成，就照著做吧！其中有個任務可能會需要花些時間去研究 —— 完成 AWS 相關設置，建議可以在一邊設置的過程當中，一邊簡單用文字記錄下來，這樣之後如果想做一樣的事情，就可以看自己之前寫的東西快速重建了！（真的蠻建議這麼做，可以是 HackMD，可以是 Notion，甚至乾脆弄一個屬於自己的部落格，因為你可能在 School 期間會因為踩到某些「坑」，而讓你想砍掉重練你的 EC2 Instance，有了自己整理的設置過程，拿來參考很快就能重建，也就比較不會覺得那麼煩躁😂）</p>
<p>除此之外，School 還很貼心地提供「學習指引」給我們大家，希望我們在入學前這段時間鞏固一些基礎，這樣比較能順利銜接開學後的課程，因為開學後會直接開始實作「based on 那些基礎」的專案！（很扎實，但也能很快讓你變厲害的那種）</p>
<p>學習清單裡面有些是 Treehouse 的資源，咦，那不是要錢嗎？不用擔心！AppWorks School 非常貼心，開學後可以憑收據向 AppWorks School 請領一個月的月費，超賺的！</p>
<p>所以說，教學影片還不看爆嗎？</p>
<hr>
<h3 id="個人指定專案實作-4-weeks"><a href="#個人指定專案實作-4-weeks" class="headerlink" title="個人指定專案實作 (4 weeks)"></a>個人指定專案實作 (4 weeks)</h3><p>這個階段可謂穩固基底的黃金階段！</p>
<p>一開始會要我們搞定 EC2 環境，並在裡面裝好 Node.js、MySQL、NGINX。這個任務如果過去沒接觸過的話，得花上不少時間和精力去研究，而且常常會不知道自己在做什麼。這時就可以多問問身邊的同學和導師，永遠要記得，在 School，當你請求協助，總會有人伸出援手的，而且你並不孤單，大家都是站在同一陣線上的！</p>
<p>當你搞定好環境，這時候又會面臨到另一項挑戰：你必須根據 STYLiSH (進去之後你會琅琅上口的電商網站 project) 的設計稿，建所需的 MySQL 資料庫並用 Express 撰寫相關的 API，最後部署到 EC2 上面。這可能跟過去在學校寫作業的方式不太一樣 —— 沒有一個非常明確的 spec 要你做什麼，而是你要自己根據設計稿去構思該怎麼設計資料庫的 schema 和怎麼開後端的 API。我覺得這是個人指定專案實作當中非常有價值的一個部分，如同 Jamie 之前在一場 AMA (Ask Me Anything) 講座分享到的：「業界並不像學校，什麼問題都 well-defined，我們要學會自己去定義問題！」這是一個很好的機會去訓練自己這一 part。</p>
<p>此外，還會接觸到怎麼在 Express 上面做圖片上傳、申請 SSL 憑證以啟用 HTTPS、串接 TapPay 金流服務、Authentication 以及導師會帶大家體驗 code review 的流程。</p>
<p>前兩週是後端，第三週開始就要用 React 來做前端。</p>
<p>一開始有個 React Workshop，會透過實作簡單的 todo list app 來帶大家認識 React，像是怎麼使用 React 的 useState 和 useEffect。雖說是「簡單」的 todo list app，但如果是第一次接觸 React 而且過去習慣用 JavaScript 去操作 DOM Element，那會有一段小陣痛期😅（不過熟悉了以後就會發覺到 React 的魅力所在！）</p>
<p>Workshop 完了以後勒？沒有錯，就要開始使用 React 然後照著設計稿去刻前端。這是一趟不輕鬆但會越做越有成就感的艱辛旅程。</p>
<p>首先跟前端比較沒有關係，要為前端 project 設置 linter 及 prettier，讓自己能寫出具有一致風格且乾淨整潔的程式碼，這是個好機會來養成寫 code 的好習慣。接著就是用 create-react-app 及 react-router、styled-components 刻 STYLiSH 的頁面，如果過去比較沒碰過前端切版的話，很可能一個頁面就得花上一整天的時間，不過放心，越做會越上手的！最後就是部署到 EC2 上面啦，可能會踩到一些坑，就讓大家親自去體會囉～</p>
<p>還有第四週呢！第四週除了繼續刻前端頁面，還會要大家把前後端串在一起，也就是前端能 call 前兩週做的後端 API 來拿到它想要的資料。這個任務困難的點在於，你之前開的 API 或許根本不符合你前端的需求，所以你得不斷在前端、後端之間來回修改，直到兩者可以順利串接在一起為止。提個外話，過程中除了可以磨練耐心之外，你也會深刻體會到開發團隊彼此溝通的重要性：你看，自己一個人包前後端都這麼辛苦了，更何況是前後端分離的團隊開發協作模式！</p>
<p>總而言之，這個階段撐過來以後，真的會發現到自己的巨幅成長，不是開玩笑的！（再次提醒，過程雖然不輕鬆，但你總是能請求協助的）</p>
<hr>
<h3 id="團隊專案實作-1-week"><a href="#團隊專案實作-1-week" class="headerlink" title="團隊專案實作 (1 week)"></a>團隊專案實作 (1 week)</h3><p>在「個人指定專案實作」最後一個禮拜的星期五晚上，校長 Shirney 突然宣佈一個新活動 —— 第一屆 AppWorks School 校園計畫黑客松。當下真的有被嚇到，才剛結束充滿挑戰的專案實作，沒想到又有新的挑戰迎面而來，完全沒喘息的機會啊😂</p>
<p>這個黑客松競賽禮拜五晚上宣佈，然後下個禮拜一要上台報告 proposal，再下個禮拜一就要上台 demo，對於剛完成「個人指定專案實作」的大家來說，聽到的時候真的會覺得哇天啊，好想先休個息啊😂</p>
<p>這是一個團隊合作的專案，我們那時候的任務是：要在導師幫大家寫好的 STYLiSH 範例 code 上加上新功能，在那之前還要解決一些 bug，最後會根據功能完整度、整體介面呈現、綜合技術難度、綜合表現及協作來做評分。導師會預先幫大家分好組，所以禮拜五一宣佈完畢，大家就跟組員坐在一起開始討論，想加什麼功能都可以，天空才是你的極限！（我們這組最後結合了 LINE Bot，感覺如果你想結合 machine learning 的東西導師們也會很樂見的）</p>
<p>這個機會還蠻寶貴的，而且如果你出去面試，通常都會被問你過去有沒有團隊開發的經驗，這時候你就可以分享你在 School 團隊專案過程當中的點點滴滴，所以這個部分要認真投入啊！</p>
<p>最後 demo 的時候就能看到大家創意的發揮，還挺有趣的～</p>
<hr>
<h3 id="專題研討-1-week"><a href="#專題研討-1-week" class="headerlink" title="專題研討 (1 week)"></a>專題研討 (1 week)</h3><p>專題研討是什麼？簡單來說，導師會要我們大家分組去深入一些特定的主題，也就是「Dive into Topics」。</p>
<p>我們那時候有六個主題：(1) 前端、(2) Load balancing + Auto Scaling、(3) Message Queue、(4) GraphQL、(5) NoSQL Database + Database Management、(6) Monitoring。每個主題的名額有限，先搶先贏！主要的進行方式就是禮拜一的時候選定主題，在接下來的幾天好好去研究，禮拜五的時候每個主題會抽一位學員上台 share，每個主題大概 25 分鐘這樣。那因為每組由誰上台當天才會知道，所以每個人都要事先準備好能上台 share 25 分鐘的內容，沒準備好被抽到就尷尬了，所以大家都不得不好好去準備😅</p>
<p>我覺得這個 part 很讚的地方在於，每組各自鑽研一個主題，禮拜五的時候就能聽到大家經過消化吸收過後的介紹，能在那麼短的時間內 (不到一個禮拜) 就能接觸到不同的技術真的很賺！</p>
<hr>
<h3 id="求職暖身及企業期中考-1-week"><a href="#求職暖身及企業期中考-1-week" class="headerlink" title="求職暖身及企業期中考 (1 week)"></a>求職暖身及企業期中考 (1 week)</h3><p>這個階段開始，會有很多 Workshop 的活動可以參加！以 Batch #1 來說，這個階段的第一週有 Cybersecurity Workshop、Coding Interview 技巧的分享、QA Workshop。我覺得如果有時間的話都可以盡量參加，因為透過這些 Workshop，你可以接觸到很多不同面向的知識和心法，有些甚至可能過去不曾接觸過，而你都可以在每一次的 Workshop 當中 pick up 一些有趣的知識點和想法，真的還蠻不錯的。也蠻推薦可以在 Workshop 進行的過程當中，做點筆記記錄一下，這樣活動結束以後即使過了一段時間再回去看，很快就能回憶起當初講者分享了什麼，以及當時聽完以後那些屬於自己的寶貴收穫。</p>
<p>至於企業期中考的部分，那次我們是在禮拜五晚上。可能是因為想減緩我們對期中考的壓力吧？School 有幫我們準備晚餐。實際考完那個期中考以後，發覺自己跟剛進 School 的自己相比，實力是真的提升不少！在測驗當中，你會深刻感謝自己前幾週付出的努力，會非常慶幸當初無論是在做個人指定專案或者是團隊專案的時候有認真投入。所以那晚眼前的一切，對我們來說真的不是什麼太困難的挑戰，spec 和藹可親多了，而且就算在過程當中卡住，導師也會不時給予溫馨的提示，讓大家能更順利地完成測驗。雖然這個企業期中考不會納入 AppWorks School 畢業與否的考量，但如果沒參與到、沒實際深刻感受到自己的成長及過去幾週的辛勤，我覺得會非常可惜、甚至是會後悔的呢🤔</p>
<hr>
<h3 id="Topic-Discussion-1-week，optional"><a href="#Topic-Discussion-1-week，optional" class="headerlink" title="Topic Discussion (1 week，optional)"></a>Topic Discussion (1 week，optional)</h3><p>這週因為是大部分的人學校的期末考週，所以可以自己選擇要不要參加。我想說反正那週剛好沒什麼事，就來參加個吧！導師很有創意地，拿我們兩週前「專題研討」研究的技術，加點新東西整合起來，變成一個小 project，簡單來說，就是要整合 Express、MongoDB 資料庫、RabbitMQ message queue 和 Kubernetes 來做一個「根據使用者所在位置來顯示附近 YouBike 剩餘數量」的小工具，功能並不是這個 project 所著重的，而是練習怎麼把這些技術串起來！雖然 loading 真的不輕，畢竟只有一個禮拜的時間，但是在實作的過程當中，你會更加熟悉「專題研討」時大家分享到的技術，因為光聽可能多少有聽進去一些，但唯有弄髒手去實作，才會學習得更加深刻！（尤其 Kubernetes，聽說在業界蠻常會用到的，趁這個機會接觸一波也是挺不錯的～）</p>
<p>除了小 project 的實作以外，這週還有兩場分別講 Data Engineering 和 DevOps 的 Workshop，都是很不錯的 share！</p>
<hr>
<h3 id="求職暖身及遠距期中考-1-week"><a href="#求職暖身及遠距期中考-1-week" class="headerlink" title="求職暖身及遠距期中考 (1 week)"></a>求職暖身及遠距期中考 (1 week)</h3><p>這週也是有各種 Workshop 可以聽：業界分享「如何成為世界級的軟體工程師」 (強調 CS 基礎知識的重要性)、Agile Workshop、Docker Workshop (最後要用 Docker 將 STYLiSH project 給包起來，含 NGINX、Express Server、MySQL Database) or System Design Workshop (做一個能 load balancing 和 auto scaling 的縮網址服務) 二選一。</p>
<p>至於遠距期中考的部分，會需要你空出一個白天的時間 (我們那時候是在禮拜六)，然後會在 Discord (團隊用的通訊平台) 上面公告題目。有分前後端：如果你 Dive into Topics 那週選的是前端，那你就是做前端的題目，若是選其他的 topic 則是做後端。跟「企業期中考」有什麼差別嗎？有的。一個是實體、一個是遠端；一個累的是身、一個累的是心；而且挑戰的面向比較不一樣，可以達到更全方位的檢驗效果呢！</p>
<hr>
<h3 id="個人自主專案-3-weeks"><a href="#個人自主專案-3-weeks" class="headerlink" title="個人自主專案 (3 weeks)"></a>個人自主專案 (3 weeks)</h3><p>在上週會請我們構思接下來三週的個人專案要做什麼，然後禮拜五晚上的時候上台分享提案給大家。</p>
<p>強烈建議如果平常在生活當中有想到什麼有趣的點子或者是想解決的問題，都可以先找個東西記下來，那些會對你構思個人專案該做什麼非常有幫助啊！</p>
<p>（偏廢話可跳過😂）像我原本打算做一個類似 Stack Overflow 的問答論壇，之所以打算做是因為實在不知道該做什麼，就有點半隨便地選了這個題目。後來突然想到自己的 Github repo 那邊有一個做到一半就沒繼續再弄的 project (之前打算用 Python 做一個 GUI 的猜歌輔助工具)，加上求職暖身週有講者在 Workshop 的最後用 Kahoot 跟我們做互動，而且剛好在 School 培訓的這段期間接觸到了 React 前端，所以最後就改做<a href="https://github.com/kanido386/guess-songs-king">一款結合「Kahoot」和 「猜歌」元素的互動遊戲平台</a>。扯遠那麼多，我想說的是，靈感總是能在你意想不到的地方發揮它的價值，所以說，平常腦袋有蹦出什麼你覺得不錯的點子，就都先蒐藏起來吧，未來說不定能助你一臂之力！</p>
<p>這個個人專案非常重要，可以說是你在 School 大量學習及累積的一個總結，尤其當你要去外面面試的時候，你會更加深刻體會到這一點。如果你有寫在履歷上面的話，面試官很愛從個人專案去延伸問題問你，可能問你相關技術，可能問你為什麼想做及怎麼做，甚至問你有沒有遇到什麼困難並且是如何去解決的。當你有這麼一個個人專案的時候，你是可以引導面試走向的。所以這也是為什麼你應該認真投入於個人專案，當面試官發現你在介紹你自己個人專案時眼睛是發光的，他能感受到你的熱忱，我覺得這或許能讓對方留下不錯的印象，讓自己更有記憶點。</p>
<p>期間也有安排企業參訪：Hahow、Dcard。聽說每屆可能會不一樣，可以期待一下😀</p>
<hr>
<h3 id="求職衝刺-gt-1-week"><a href="#求職衝刺-gt-1-week" class="headerlink" title="求職衝刺 (&gt;1 week)"></a>求職衝刺 (&gt;1 week)</h3><p>這週有履歷撰寫的 Workshop，也有傳授面試技巧的 Workshop，而且你會在短時間的幾天之內生出一份英文履歷 (過程還蠻不輕鬆的😅)，完成了初版以後，會有非常專業的老師幫你看並提供修改上的建議，超級讚！</p>
<p>當週禮拜五晚上是場充滿感性的畢業典禮🎓（結束回到家以後會有種莫名其妙的空虛感）</p>
<p>接下來兩週的活動是給有求職需求的學員參加的 ——</p>
<p>(1) 錄音練習：導師每次會丟個面試常見問題，可能是技術也可能是非技術，你當下要錄自己的回答，傳到 Discord，導師隨機抽一位放出來，再看有什麼地方可以補充。而且導師還會幫大家整理一些心法和框架，遇到不知道該怎麼回答的問題時可以試著套用看看！</p>
<p>(2) 讀書會：每個人會被分配到要 share 哪個資料結構或演算法，到你上台的時候，除了介紹一下那是什麼之外，也要帶大家做點相關的 LeetCode 題目。簡單來說，就是大家一起刷起來啦😂</p>
<p>(3) 模擬面試：跟導師們約線上 or 實體的面試。有用 google doc 來邊講解題思路邊動手寫 code 的練習，有著重個人專案的問答及 system design 的白板題，也有針對你想練習的公司職缺來客製化的模擬面試，甚至會請厲害的 AppWorks School 校友來跟你模擬面試。在每次模擬面試完，面試官都會給予回饋，可以藉這個機會調整一下。我覺得這些練習對實際去外面面試還蠻有幫助的，比較不會有種「蛤？原來可以這樣考？」的驚訝感覺，因為有跟導師模擬過了（特別是用 google doc 解題這一點，外面還真的會這樣考呢！）</p>
<hr>
<h3 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h3><p>在 AppWorks School 這邊認識了很多志同道合的朋友，和大家一起 coding、debug、討論的感覺真的挺不錯的，也很喜歡那種大家在過程中一起成長的氛圍！</p>
<p>很開心能夠成為 AppWorks School 大家庭的一份子，更開心有這個機會在此和大家分享我在 AppWorks School 這段期間的點點滴滴，未來還請各位多多指教了🙏</p>
<br>
希望讀完這篇文章的你能夠有所收穫，如果有任何問題，歡迎寫 Email 給我哦😀]]></content>
  </entry>
  <entry>
    <title>用 Pure Data 打造吉他效果器</title>
    <url>/2021/01/asp-final-project/</url>
    <content><![CDATA[<p><a href="/2021/01/asp-final-project"><img src="https://images.unsplash.com/photo-1560849898-d058f7d93b23?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=2687&q=80" style="width:50vw;" /></a></p>
<!-- <img src="1.jpeg" style="width:50vw;" /> -->

<p>大三上修「互動式音訊處理導論」時所做的期末專題。</p>
<span id="more"></span>

<h2 id="特別感謝"><a href="#特別感謝" class="headerlink" title="特別感謝"></a>特別感謝</h2><p>首先，非常幸運能夠和來自越南的朋友 Son Tran 同一組，沒有他，就不會有這段有趣的旅程！<br>（他自彈自唱真的超好聽的，而且竟然還會做電子音樂！）<br>（在這邊偷偷放他的 YouTube channel: <a href="https://www.youtube.com/channel/UCm6tcNSqAYVqZpA8pm4-T5A" target="_blank">MadSon TR</a> 🎧）</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>強烈建議搭配後面的說明聽會比較知道在做什麼 😏</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/7F14-C7rrmg" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h2 id="課程內容簡介"><a href="#課程內容簡介" class="headerlink" title="課程內容簡介"></a>課程內容簡介</h2><p>這學期修了電機系張文輝教授開的<a href="https://timetable.nctu.edu.tw/?r=main/crsoutline&Acy=109&Sem=1&CrsNo=1078&lang=zh-tw" target="_blank">互動式音訊處理導論</a>，接觸到很多很酷的玩意兒：</p>
<ol>
<li>學一點聲音訊號處理的概念以後，用 MATLAB 做簡單的分析與處理</li>
<li>認識<a href="https://zh.wikipedia.org/wiki/%E5%90%88%E6%88%90%E5%99%A8" target="_blank">合成器</a>的基本運作原理之後，用線上數位音樂工作站 <a href="http://www.audiosauna.com/" target="_blank">AudioSauna</a> 自製音色並用新音色做一首簡單的曲子</li>
<li><strong><span style="color:black;">（本篇主角！）使用視覺化程式語言 <a href="http://puredata.info/" target="_blank">Pure Data</a> 做一些簡單的音訊處理</span></strong></li>
<li>用音訊編輯軟體 Adobe Audition 消除歌曲中的人聲</li>
<li>用助教訓練好的 HMM 模型，做音樂的音值識別、拍號判定、樂譜追蹤，並為一段只有主旋律的譜生成和弦伴奏</li>
<li>用一套叫 HTK 的自由軟體做一個簡單的歌手辨識系統</li>
<li>認識「動態時間伸縮」的原理以後，直接拿助教寫好的 C 程式來做一個簡單的歌曲查詢系統</li>
</ol>
<hr>
<h2 id="動機"><a href="#動機" class="headerlink" title="動機"></a>動機</h2><p>期末的時候必須選個相關主題來發展成一個專題。<br>我們原本打算是要做 source separation，也就是一種能夠把完整樂曲分離出 bass、鋼琴、吉他、鼓等獨立音訊的技術。<br>但後來想說，既然之前實驗課有接觸過 Pure Data，再加上我們都有玩過吉他效果器，所以我們就想結合兩者，並兼合我們的創意，打造屬於我們的吉他效果器！（而且還不用花錢）</p>
<h2 id="實作方法"><a href="#實作方法" class="headerlink" title="實作方法"></a>實作方法</h2><h3 id="找相關資料"><a href="#找相關資料" class="headerlink" title="找相關資料"></a>找相關資料</h3><p><em><span style="color:gray;">（研究別⼈是如何實作吉他效果器的）</span></em><br>我們在查資料的過程中找到了 <a href="https://guitarextended.wordpress.com/audio-effects-for-guitar-with-pure-data/" target="_blank">Audio effects for guitar with Pure Data</a> 這一篇文章，裡頭有很多吉他效果器的實作及實際用吉他去測試效果器的 demo！<br>只能說，網路世界無奇不有，這聽起來偏冷門的東西居然也找得到資源，酷斃了 😎</p>
<h3 id="吸收及內化"><a href="#吸收及內化" class="headerlink" title="吸收及內化"></a>吸收及內化</h3><p><em><span style="color:gray;">（將那些⽅法盡可能內化成我們⾃⼰的能⼒）</span></em><br>像海綿一樣，一直吸收、一直吸收，去讀懂為什麼他要這樣寫而不是那樣寫。<br>如此一來，不僅讓我們更清楚該如何開始，也讓我們更加了解每個效果器的運作原理，一舉兩得！</p>
<h3 id="著手打造"><a href="#著手打造" class="headerlink" title="著手打造"></a>著手打造</h3><p><em><span style="color:gray;">（利⽤我們對於吉他效果器的⾒解，打造屬於我們的吉他效果器）</span></em><br>其實大部分還是參考那篇文章的做法居多xD<br>雖然是這樣，但我們在過程中也更加熟悉了 Pure Data 的操作，若之後想嘗試同樣是視覺化程式語言但較為熱門的 Max/MSP，相信很快就能上手了吧！</p>
<h3 id="嘗試優化"><a href="#嘗試優化" class="headerlink" title="嘗試優化"></a>嘗試優化</h3><p><em><span style="color:gray;">（考慮⽤ Pure Data Externals 的⽅式讓界⾯看起來更加簡潔）</span></em><br>不過後來我們找到了 <a href="http://write.flossmanuals.net/pure-data/subpatches/" target="_blank">Subpatch</a> 的做法，它其實就是 Pure Data 界的 Function，可以自己定義在一個區塊當中你的 input／output 是什麼、要做哪些操作。<br></p>
<p>什麼意思？<br></p>
<p>比方說你現在不得不設計一部機器，需要餵給它的是好幾個單元的上課投影片和好多年份的考古題，你期望從這部機器當中獲得的僅僅是一張寫著好看分數的考卷，但過程中你卻得犧牲人生無數的可能性⋯⋯<br></p>
<p>為了解釋 Function 的概念，扯遠了。<br></p>
<p>拉回來。<br></p>
<p>利用 Subpatch，可以方便我們管理圖形化的程式，除了能讓畫面看起來比較乾淨之外，也可以讓整個程式邏輯以及架構更有條理！</p>
<h3 id="測試成品"><a href="#測試成品" class="headerlink" title="測試成品"></a>測試成品</h3><p><em><span style="color:gray;">（實際拿吉他測試我們的效果器，若有可以再改進的地⽅，就再改進）</span></em><br>星期日 (2021.01.03) 晚上，我們去九舍地下二樓試我們的吉他效果器。<br>提個外話，那邊的裝潢真的超棒的，走的是酒吧風、殘響效果又棒，若有酒保為我們調製上等的雞尾酒那就更完美了！</p>
<p>再拉回來。<br></p>
<p>原本我們是不抱持著什麼期待啦，想說市面上賣的效果器都不便宜，啊我們只不過是用程式語言來模擬出效果器，聲音是能有多好？<br>沒想到！當我們打開「Wha-wha」的效果，Son Tran 刷了第一個和弦以後，我們都被嚇到了！那令人驚豔的聲響效果，真的會讓人誤以為此時此刻、這個地方有什麼專業樂團正在現場演出！</p>
<p>我們從七點半一路弄到差不多快十一點，過程中調整了很多次程式，為的是讓聲音更符合我們的需求以及讓介面看起來比較不會那麼凌亂（雖然介面看起來還是很「科技風」就是了 😂）</p>
<hr>
<h2 id="結果分析"><a href="#結果分析" class="headerlink" title="結果分析"></a>結果分析</h2><p>廢話不多說，直接給大家看我們的程式圖吧！</p>
<h3 id="整體架構"><a href="#整體架構" class="headerlink" title="整體架構"></a>整體架構</h3><figure>
  <!-- <img src="https://i.imgur.com/5GYRnqu.png" style="width:43vw;" /> -->
  <img src="2.png" style="width:43vw;" />
  <figcaption>使用者介面</figcaption>
</figure>

<ul>
<li><code>pd 某某某</code> 的小方塊就是前面所說的 Subpatch，除了 <code>pd file</code> 是用來開啟音檔並加以讀取的功能以外，其他的 <code>pd 某某某</code> 就都是吉他效果器了！</li>
<li>吉他效果器左邊一排的正方形框框是開關（Pure Data 稱它為 Toggle），打開代表說我要讓這個效果器處理我們的聲音，關掉的話就表示我們要讓聲音直接通過，不處理，即 <code>output = input</code></li>
<li><code>adc~</code> (類比轉數位) 是我們的聲音輸入，我們選擇用錄音介面；<code>dac~</code> (數位轉類比) 則是輸出，不管是筆電內建的輸出或者是音箱都行，我們選擇用音箱，這樣聽起來比較震撼 😈</li>
<li><code>adc~</code> 和 <code>dac~</code> 後面的抖抖線意思是，通過這個有抖抖線的 Object 以後，它 output 出來的東西會是可以畫成波形圖的「訊號」，圖中黑線（Pure Data 稱它為 thin cable）代表控制資料的傳輸，藍線（Pure Data 稱它為 thick cable）代表訊號的傳輸</li>
<li>圖中一條一條的 slider 就是用來調整效果器參數的控制器（最下面的 slider 用來調控音量），藉由拉動 slider，就可以聽到聲音有趣的變化！（不然一成不變實在無趣）</li>
<li>後來我們決定把其他效果器的參數 slider 放進效果器 Subpatch 裡面，不然介面看起來會有點亂</li>
<li>中間偏右看起來像是按鈕的東西（Pure Data 稱它為 Bang），其功能是把參數設定到我們預設好的預設值，為的是方便回到預設值（有說跟沒說一樣），按下 Bang 以後，<code>s reset</code> (send) 就會幫我們把 Bang 的訊號傳到 <code>r reset</code> (receive) 的 output 給有數字的 Message，繼而引發更動 slider 的數值，於是乎，效果器的參數就回到預設值啦！</li>
</ul>
<h3 id="Subpatch-小介紹"><a href="#Subpatch-小介紹" class="headerlink" title="Subpatch 小介紹"></a>Subpatch 小介紹</h3><figure>
  <!-- <img src="https://i.imgur.com/rPCYoPY.png" style="width:33vw;" /> -->
  <img src="3.png" style="width:33vw;" />
  <figcaption>用 pd file 來簡單介紹</figcaption>
</figure>

<ul>
<li>剛剛說過，Subpatch 是 Pure Data 界的 Function！</li>
<li><code>inlet</code> 就是 input，<code>outlet</code> 就是 output</li>
<li>紅色圈起來的部分就是在區別究竟 input／output 是控制資料還是訊號</li>
<li>input／output 之間的東西就是一些操作，本例在做打開音檔並讀取的動作</li>
<li>有了 Subpatch 的協助以後，開發的過程就更加愉悅了呢！</li>
</ul>
<h3 id="Distortion-破音效果器"><a href="#Distortion-破音效果器" class="headerlink" title="Distortion 破音效果器"></a>Distortion 破音效果器</h3><p>把訊號的振幅拉大再擷取一小部分，聽起來就會有種失真的破音效果，<a href="https://youtu.be/7F14-C7rrmg?t=77" target="_blank">像這樣</a>。</p>
<figure>
  <!-- <img src="https://i.imgur.com/ziLZyCF.png" style="width:33vw;" /> -->
  <img src="4.png" style="width:33vw;" />
  <figcaption>Distortion 破音效果器</figcaption>
</figure>

<h3 id="Tremolo-顫音效果器"><a href="#Tremolo-顫音效果器" class="headerlink" title="Tremolo 顫音效果器"></a>Tremolo 顫音效果器</h3><p>用一個低頻振盪器 (LFO) 來調變音量，讓音量呈現忽大忽小的效果，<a href="https://youtu.be/7F14-C7rrmg" target="_blank">聽起來像這樣</a>。</p>
<figure>
  <!-- <img src="https://i.imgur.com/esTVil5.png" style="width:33vw;" /> -->
  <img src="5.png" style="width:33vw;" />
  <figcaption>Tremolo 顫音效果器</figcaption>
</figure>

<h3 id="Vibrato-抖音效果器"><a href="#Vibrato-抖音效果器" class="headerlink" title="Vibrato 抖音效果器"></a>Vibrato 抖音效果器</h3><p>用一個低頻振盪器 (LFO) 來調變頻率，讓音高呈現忽高忽低的效果，<a href="https://youtu.be/7F14-C7rrmg?t=30" target="_blank">聽起來像這樣</a>。</p>
<figure>
  <!-- <img src="https://i.imgur.com/O0g8FsR.png" style="width:38vw;" /> -->
  <img src="6.png" style="width:38vw;" />
  <figcaption>Vibrato 抖音效果器</figcaption>
</figure>

<h3 id="Wha-wha-娃娃效果器"><a href="#Wha-wha-娃娃效果器" class="headerlink" title="Wha-wha 娃娃效果器"></a>Wha-wha 娃娃效果器</h3><p>細節頗複雜就不解釋了，其原理跟頻率有關。那為什麼叫娃娃效果器呢？<a href="https://youtu.be/7F14-C7rrmg?t=123" target="_blank">聽聽看就知道了</a>xD</p>
<figure>
  <!-- <img src="https://i.imgur.com/n7iksIE.png" style="width:38vw;" /> -->
  <img src="7.png" style="width:38vw;" />
  <figcaption>Wha-wha 娃娃效果器</figcaption>
</figure>

<h3 id="Delay-延遲效果器"><a href="#Delay-延遲效果器" class="headerlink" title="Delay 延遲效果器"></a>Delay 延遲效果器</h3><p>上面的 slider 控制聲音衰減的快慢（這就是為什麼要乘上一個介於 0 到 1 之間不包含 1 的值），下面的 slider 則是控制多久重複一次（不過每重複一次，聲音會越來越小聲），<a href="https://youtu.be/7F14-C7rrmg?t=169" target="_blank">讓我們來聽聽看它的效果吧</a>！</p>
<figure>
  <!-- <img src="https://i.imgur.com/922G06G.png" style="width:38vw;" /> -->
  <img src="8.png" style="width:38vw;" />
  <figcaption>Delay 延遲效果器</figcaption>
</figure>

<h3 id="Reverb-殘響效果器"><a href="#Reverb-殘響效果器" class="headerlink" title="Reverb 殘響效果器"></a>Reverb 殘響效果器</h3><p>一種營造空間感的效果器。我們直接拿 Pure Data 內建的 <code>freeverb~</code> 來用，<a href="https://youtu.be/7F14-C7rrmg?t=210" target="_blank">聽起來像這樣</a>。</p>
<figure>
  <!-- <img src="https://i.imgur.com/7Sjp3w0.png" style="width:38vw;" /> -->
  <img src="9.png" style="width:38vw;" />
  <figcaption>Reverb 殘響效果器</figcaption>
</figure>

<h3 id="Chorus-合聲效果器"><a href="#Chorus-合聲效果器" class="headerlink" title="Chorus 合聲效果器"></a>Chorus 合聲效果器</h3><p>製造一個和原來聲音有微小時間差和頻率差的聲音，然後再同時放。<br>就像是一群人在合唱的時候，即使是唱同個旋律，也會因為進來的時間點有微小的差異、各自的不同音準，而形成一種亂中有序的感覺。<a href="https://youtu.be/7F14-C7rrmg?t=357" target="_blank">聽聽看吧</a>！</p>
<figure>
  <!-- <img src="https://i.imgur.com/rmj9qr6.png" style="width:38vw;" /> -->
  <img src="10.png" style="width:38vw;" />
  <figcaption>Chorus 合聲效果器</figcaption>
</figure>

<hr>
<h2 id="參考來源"><a href="#參考來源" class="headerlink" title="參考來源"></a>參考來源</h2><p><a href="https://guitarextended.wordpress.com/audio-effects-for-guitar-with-pure-data/" target="_blank">Audio effects for guitar with Pure Data</a></p>
<h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>前面其實已經講得差不多了，就用三個字來描述吧：「真有趣！」<br>能創造出一個可以用五官感受的東西真的超有成就感的，很享受那個過程 🏝</p>
<h2 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h2><p>感謝教授開設這一門很有意思的課，感謝三位助教每堂實驗課的帶領，<br>並再次感謝能與 Son Tran 合作了這整個學期，沒有你們，就沒有這一切！<br><br><br>希望讀完這篇文章的您能夠有所收穫，我們下篇文見啦 😃</p>
]]></content>
      <tags>
        <tag>交大</tag>
        <tag>音訊處理</tag>
        <tag>吉他</tag>
        <tag>效果器</tag>
        <tag>Pure Data</tag>
        <tag>課程</tag>
        <tag>專題</tag>
      </tags>
  </entry>
  <entry>
    <title>喜歡《大英雄天團》杯麵？何不自己做一個！</title>
    <url>/2021/07/baymax-with-us/</url>
    <content><![CDATA[<p><a href="/2021/07/baymax-with-us"><img src="https://images.unsplash.com/photo-1579762593175-20226054cad0?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1614&q=80" style="width:50vw;" /></a></p>
<!-- <img src="0.jpg" style="width:50vw;" /> -->

<p>做一個 LINE Bot 版的杯麵～</p>
<span id="more"></span>

<div class="note success">
    這篇文將簡單分享所有功能的實作細節，至於 demo，可以到我的 <mark><a href="https://github.com/kanido386/baymax-with-us#readme" target="_blank">GitHub repo</a></mark> 那邊看看。
</div>

<p>也想做一個 LINE Bot？可以參考我「<a href="https://kanido386.github.io/2021/07/fsm-line-bot/" target="_blank">用 FSM 及 LINE Messaging API 做一個聊天機器人</a>」這篇文。<br>想讓自己的 LINE Bot 更 powerful？可以參考我「<a href="https://kanido386.github.io/2021/07/hackathon-line-hint/" target="_blank">黑客松 LINE Bot 賽前補帖</a>」這篇文。</p>
<hr>
<h2 id="指定聽歌"><a href="#指定聽歌" class="headerlink" title="指定聽歌"></a>指定聽歌</h2><p>Powered by <a href="https://developers.google.com/youtube/v3">YouTube Data API</a></p>
<h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><ul>
<li><a href="https://github.com/kanido386/baymax-with-us/blob/master/src/fsm.py#L17">觸發條件</a></li>
<li><a href="https://github.com/kanido386/baymax-with-us/blob/master/src/fsm.py#L83">前處理</a></li>
<li><a href="https://github.com/kanido386/baymax-with-us/blob/master/src/service/youtube.py">實作細節</a></li>
</ul>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><ol>
<li>使用者輸入 <code>聽 王藍茵 惡作劇</code></li>
<li>借助 <a href="https://developers.google.com/youtube/v3">YouTube Data API</a>，以「王藍茵 惡作劇」當作 query，取得 video 的搜尋結果</li>
<li>只取前三個最相關影片的 id，前面加上 <code>https://www.youtube.com/watch?v=</code> 就是影片網址了</li>
<li>除了 id，還能從 response 拿到影片標題和縮圖</li>
<li>用 <code>TemplateSendMessage</code> 包一包，傳送給使用者</li>
<li>使用者點按「聽這個！」以後，因為 <code>MessageTemplateAction</code>，會傳送所選影片的網址</li>
<li>因為 LINE 的設計，可以直接在 LINE 裡面看 YouTube 影片，也就因此，能直接收聽音樂了</li>
</ol>
<p>（因為 <a href="https://developers.google.com/youtube/v3">YouTube Data API</a> 有每日額度限制，超過的話，使用者只會收到「用完每日額度了」）</p>
<hr>
<h2 id="隨機聽歌"><a href="#隨機聽歌" class="headerlink" title="隨機聽歌"></a>隨機聽歌</h2><p>Powered by <a href="https://docs-en.kkbox.codes/">KKBOX Open API</a> &amp; <a href="https://developers.google.com/youtube/v3">YouTube Data API</a></p>
<h3 id="程式碼-1"><a href="#程式碼-1" class="headerlink" title="程式碼"></a>程式碼</h3><ul>
<li><a href="https://github.com/kanido386/baymax-with-us/blob/master/src/fsm.py#L22">觸發條件</a></li>
<li><a href="https://github.com/kanido386/baymax-with-us/blob/master/src/fsm.py#L97">前處理</a></li>
<li><a href="https://github.com/kanido386/baymax-with-us/blob/master/src/service/kkbox.py">實作細節</a></li>
</ul>
<h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h3><ol>
<li>使用者輸入 <code>隨機聽</code></li>
<li>借助 <a href="https://docs-en.kkbox.codes/#get-/charts">KKBOX Open API</a> 的 <code>/charts</code>，隨選當中五個排行榜，並用 <code>QuickReply</code> 的方式，讓使用者選取感興趣的排行榜</li>
<li>因為是用 <code>PostbackAction</code>，所以接下來會觸發<a href="https://github.com/kanido386/baymax-with-us/blob/master/src/fsm.py#L27">這個條件</a>、進到<a href="https://github.com/kanido386/baymax-with-us/blob/master/src/fsm.py#L105">這個狀態</a>，並呼叫 <a href="https://github.com/kanido386/baymax-with-us/blob/master/src/service/kkbox.py#L45">send_random_tracks</a></li>
<li>借助 <a href="https://docs-en.kkbox.codes/#get-/charts/{playlist_id}/tracks">KKBOX Open API</a> 的 <code>/charts/&#123;playlist_id&#125;/tracks</code>，隨選該排行榜當中的五首歌曲，並用 <code>FlexSendMessage</code> 的方式，讓使用者選五首當中想聽的（文字顏色是隨機的，讓畫面變得有趣不單調）</li>
<li>使用者點按想聽的歌曲以後，因為 <code>MessageTemplateAction</code>，會傳送 <code>聽 [誰的] [歌曲名]</code></li>
<li>後面就是「指定聽歌」的步驟了</li>
</ol>
<hr>
<h2 id="做運動"><a href="#做運動" class="headerlink" title="做運動"></a>做運動</h2><p>這比較單純。</p>
<h3 id="程式碼-2"><a href="#程式碼-2" class="headerlink" title="程式碼"></a>程式碼</h3><ul>
<li><a href="https://github.com/kanido386/baymax-with-us/blob/master/src/fsm.py#L33">觸發條件</a></li>
<li><a href="https://github.com/kanido386/baymax-with-us/blob/master/src/fsm.py#L116">前處理</a></li>
<li><a href="https://github.com/kanido386/baymax-with-us/blob/master/src/service/exercise.py">實作細節</a></li>
</ul>
<h3 id="解析-2"><a href="#解析-2" class="headerlink" title="解析"></a>解析</h3><p>其實就是寫死運動教學影片網址，然後隨機傳其中一個給使用者而已。</p>
<hr>
<h2 id="查證訊息"><a href="#查證訊息" class="headerlink" title="查證訊息"></a>查證訊息</h2><p>Powered by <a href="https://www.google.com/">Google</a> ＆ <a href="https://pypi.org/project/googlesearch-python/">googlesearch-python</a> ＆<br><a href="https://tfc-taiwan.org.tw/">台灣事實查核中心</a>、<a href="https://cofacts.tw/">Cofacts 真的假的</a>、<a href="https://www.mygopen.com/">MyGoPen</a>、<a href="https://fact-checker.line.me/">LINE訊息查證</a>、<a href="https://www.rumtoast.com/">蘭姆酒吐司</a></p>
<h3 id="程式碼-3"><a href="#程式碼-3" class="headerlink" title="程式碼"></a>程式碼</h3><ul>
<li><a href="https://github.com/kanido386/baymax-with-us/blob/master/src/fsm.py#L38">觸發條件</a></li>
<li><a href="https://github.com/kanido386/baymax-with-us/blob/master/src/fsm.py#L125">前處理</a></li>
<li><a href="https://github.com/kanido386/baymax-with-us/blob/master/src/service/fact_checking.py">實作細節</a></li>
</ul>
<h3 id="解析-3"><a href="#解析-3" class="headerlink" title="解析"></a>解析</h3><ol>
<li>使用者輸入 <code>查證 [可疑訊息]</code></li>
<li>借助 <a href="https://www.google.com/">Google</a> 及 <a href="https://pypi.org/project/googlesearch-python/">googlesearch-python</a> 這個套件，以你貼上的可疑訊息當作 query，取得搜尋結果的前幾個網頁連結</li>
<li>一一對那幾個網頁連結去做判斷，若網址包含 <code>tfc-taiwan.org.tw</code> 等等的關鍵詞，也就是屬於<a href="https://tfc-taiwan.org.tw/">台灣事實查核中心</a>、<a href="https://cofacts.tw/">Cofacts 真的假的</a>、<a href="https://www.mygopen.com/">MyGoPen</a>、<a href="https://fact-checker.line.me/">LINE訊息查證</a>、<a href="https://www.rumtoast.com/">蘭姆酒吐司</a>其中一個的網頁，就存在相對應的 list 裡面</li>
<li>結果用 <code>FlexSendMessage</code> 的方式呈現，button 的顏色是根據來源網站的配色決定的，像 MyGoPen 的 logo 橘色較多，所以我選用橘色來當 MyGoPen 的 button 色</li>
<li>因為 <code>FlexSendMessage</code> 的 button 屬於 uri action，當使用者按下 button 以後，會直接在 LINE 裡面開啟該查證網站的頁面</li>
<li>若前幾個搜尋結果都不是來自那五個查證網站，使用者會收到「找不太到欸」，畢竟其他來源的消息是真是偽比較不能保證</li>
</ol>
<hr>
<h2 id="玩遊戲"><a href="#玩遊戲" class="headerlink" title="玩遊戲"></a>玩遊戲</h2><p>Powered by 我爸常傳到群組的消遣遊戲們 😂</p>
<h3 id="程式碼-4"><a href="#程式碼-4" class="headerlink" title="程式碼"></a>程式碼</h3><ul>
<li><a href="https://github.com/kanido386/baymax-with-us/blob/master/src/fsm.py#L43">觸發條件</a></li>
<li><a href="https://github.com/kanido386/baymax-with-us/blob/master/src/fsm.py#L137">前處理</a></li>
<li><a href="https://github.com/kanido386/baymax-with-us/blob/master/src/service/game.py">實作細節</a></li>
</ul>
<h3 id="解析-4"><a href="#解析-4" class="headerlink" title="解析"></a>解析</h3><ol>
<li>使用者輸入 <code>玩遊戲</code> 以後，聊天機器人會用 <code>QuickReply</code> 的方式，問使用者要當消遣還是挑戰（至於我怎麼區分消遣、挑戰？看 source code 應該能略知一二 😁）</li>
<li>依照使用者的選擇，用 <code>FlexSendMessage</code> 的方式，隨機傳送該類別的遊戲給使用者</li>
<li>因為 <code>FlexSendMessage</code> 的 button 一樣是屬於 uri action，當使用者按下 button 以後，會直接在 LINE 裡面開啟該遊戲的頁面</li>
</ol>
<p>（遊戲連結和說明一樣是事先寫好的，至於不直接傳連結給使用者是因為，這樣畫面就少了點美感，而且更破壞了玩遊戲前的情緒和氛圍）</p>
<hr>
<h2 id="查天氣"><a href="#查天氣" class="headerlink" title="查天氣"></a>查天氣</h2><p>Powered by <a href="https://www.google.com/">Google</a> ＆ <a href="https://pypi.org/project/googlesearch-python/">googlesearch-python</a></p>
<h3 id="程式碼-5"><a href="#程式碼-5" class="headerlink" title="程式碼"></a>程式碼</h3><ul>
<li><a href="https://github.com/kanido386/baymax-with-us/blob/master/src/fsm.py#L58">觸發條件</a></li>
<li><a href="https://github.com/kanido386/baymax-with-us/blob/master/src/fsm.py#L161">前處理</a></li>
<li><a href="https://github.com/kanido386/baymax-with-us/blob/master/src/service/weather.py">實作細節</a></li>
</ul>
<h3 id="解析-5"><a href="#解析-5" class="headerlink" title="解析"></a>解析</h3><p>這個非常陽春，其實就是直接用 <code>[地點] 天氣</code> 去 google，只是多用 <code>FlexSendMessage</code> 包裝而已。</p>
<p>（本來是想說用氣象局的 API 啦，但想說既然自己平常也習慣 google「天氣」的介面了，直接拿來用或許更簡單也更符合需求）</p>
<hr>
<h2 id="請求新功能"><a href="#請求新功能" class="headerlink" title="請求新功能"></a>請求新功能</h2><p>Powered by <a href="https://docs.python.org/3/library/smtplib.html">SMTP protocol client</a><br>參考自 <a href="https://www.learncodewithmike.com/">Learn Code With Mike</a> 的 <a href="https://www.learncodewithmike.com/2020/02/python-email.html">[Python實戰應用]Python寄送Gmail電子郵件實作教學</a></p>
<h3 id="程式碼-6"><a href="#程式碼-6" class="headerlink" title="程式碼"></a>程式碼</h3><ul>
<li><a href="https://github.com/kanido386/baymax-with-us/blob/master/src/fsm.py#L63">觸發條件</a></li>
<li><a href="https://github.com/kanido386/baymax-with-us/blob/master/src/fsm.py#L171">前處理</a></li>
<li><a href="https://github.com/kanido386/baymax-with-us/blob/master/src/service/email.py">實作細節</a></li>
</ul>
<h3 id="解析-6"><a href="#解析-6" class="headerlink" title="解析"></a>解析</h3><ol>
<li>使用者輸入 <code>新功能 [名稱] [描述]</code></li>
<li>將新功能的名稱和描述填入 email 的 content 當中</li>
<li>利用 <a href="https://docs.python.org/3/library/smtplib.html">SMTP protocol client</a>，傳送 content 給指定的 email address 也就是我，這麼做，是為了讓我知道有使用者想新增功能</li>
<li>若寄信失敗，則傳送給使用者「增加新功能的服務出了點狀況」</li>
</ol>
<hr>
<h2 id="功能一覽"><a href="#功能一覽" class="headerlink" title="功能一覽"></a>功能一覽</h2><p>這頗單純。</p>
<h3 id="程式碼-7"><a href="#程式碼-7" class="headerlink" title="程式碼"></a>程式碼</h3><ul>
<li><a href="https://github.com/kanido386/baymax-with-us/blob/master/src/fsm.py#L68">觸發條件</a></li>
<li><a href="https://github.com/kanido386/baymax-with-us/blob/master/src/fsm.py#L182">前處理</a></li>
<li><a href="https://github.com/kanido386/baymax-with-us/blob/master/src/service/feature.py">實作細節</a></li>
</ul>
<h3 id="解析-7"><a href="#解析-7" class="headerlink" title="解析"></a>解析</h3><p>用 <code>QuickReply</code>，讓使用者點選想嘗試的功能，因為是 <code>MessageAction</code>，所以後續就能觸發上述的功能了！</p>
<br>
今天的分享就到這邊，我們下篇文見吧 😃]]></content>
      <tags>
        <tag>API</tag>
        <tag>Python</tag>
        <tag>LINE</tag>
        <tag>Bot</tag>
      </tags>
  </entry>
  <entry>
    <title>職涯＆人生方面的省思</title>
    <url>/2022/12/career-life-thought/</url>
    <content><![CDATA[<p>讀文章寫心得：<a href="https://readingoutpost.com/squiggly-career/">《職場天賦》讀後心得：實用的職涯指南和三個重點</a></p>
<p>隨機選到這篇文章挺不錯的，剛好才工作三個多月，很需要多多關注職涯方面的思考。也許能透過這篇文章，反思出一些關於職涯發展方面的想法吧？</p>
<p>（試試看在公司午休吃飽飯以後，花個大概半小時的時間寫一篇，感受一下這段時間閱讀和思考的感覺 → 花了大概 50 分鐘，但挺不錯的）</p>
<span id="more"></span>

<p>我們往往都會認為，職涯路上總是有一個固定的標準答案，好像一定要遵循著那條路，才能達到所謂的「成功」。然而，就如同文章裡面提到的：「那些在別人眼中看起來很優質的好工作，並不一定是最吸引你的工作。」在還沒出社會之前，我們可能會覺得，只要做著別人常說的「好工作」就一定一路順遂，而且可以做得很開心因為是「好工作」，但很可能當我們開始做了「好工作」以後，才發覺那不是自己真正想要的。</p>
<p>究竟「好工作」到底是什麼？雖然我自己也還在摸索當中，但我認為，「好工作」或者是說「對自己來說的好工作」，應該是很客製化的。因為每個人感興趣的、符合個性的、擅長的、所認同的價值觀都不盡相同，如果想用一個描述去完美定義「好工作」，那實在是太不切實際了！</p>
<p>或許，我們可以嘗試改用「不斷優化」的角度去思考這件事情：如果發現，現在做的工作自己沒到很喜歡，會不會主要是因為自己才剛接觸，需要點時間和耐心去學習、熟悉和適應呢？如果真的做了一段時間，體會到這工作可能真的不適合我吧？那再另尋其他出路也不遲。偶爾，也可以在下班時間之餘，嘗試接觸看看其他領域，體驗一下，或許能出乎意料之外發覺到自己原來對某方面挺感興趣的，發展成副業甚至想辦法變成正職不是挺賺的嗎？這「不斷優化」的過程中最重要的事情，就是多多跟自己對話。畢竟，最了解自己的人，除了自己，還會有誰呢？父母總不可能知道你無時無刻在想什麼吧xD</p>
<p>所以說，最關鍵的，還是得靠自己去摸索、去感受。永遠要記得：人生沒有所謂的標準答案，適合自己的答案，你可以去詢問他人的建議，但最終還是得靠自己去找尋和做決定！文章當中也提到：「強項不只是你天生擅長的事情，也是你透過人生經歷、後天學習而來的技能和行為。」一切都得靠自己去領悟，最重要的，就是要願意踏出去那每一步，嘗試成功也好、失敗也好，累積經驗，幫助自己在做下一次決策時，能夠更加順利！</p>
<p>除此之外，文章提到的「自信」真的也非常重要！這個每次都會讓我想到金州勇士的 Jordan Poole。對，我是勇迷。Jordan Poole 在新秀賽季的時候，表現不甚理想，甚至也曾被下放到發展聯盟去磨練。然而，儘管如此，Jordan Poole 呈現出來的感覺就是一個很有自信的人。也許就是因為這樣，「相信自己是能夠做到的」，讓他撐過 NBA 生涯初期的撞牆期，他的表現漸入佳境，甚至在今年十月的時候還和勇士球團簽下四年$1.4 億美金的頂薪合約成功完成續約！如果 Jordan Poole 沒有那爆棚的自信，說不定現在已經被 NBA 淘汰了也說不定，但這樣不是挺可惜的嗎？轉換到我們身上也是一樣，無論在哪個方面，如果我們能夠多一點勇氣和自信，或許會更有機會達到我們想要的高度和目標吧？</p>
<p>文章也提到重要的一個詞：「好奇心」。有了好奇心，才會驅動我們往未曾探索、體驗過的領域去嘗試。這又讓我想到，我其實以前對 NBA 完全沒有感覺，每次轉到緯來體育台，看到 NBA 比賽就想直接轉掉。誰知道，在 2016 年的某個晚上，我也不知道怎麼搞的，我居然看完了一場勇士對上雷霆的比賽，印象中是西區決賽 Game 6 吧？讓我印象最深刻的是 Kevin Durant 輸球後的沮喪神情（結果後來轉隊來勇士還挺意外的xD）自從那場比賽以後，我就喜歡上了金州勇士，我也不知道，就很神奇，可能是 Klay Thompson、Stephen Curry 和整個團隊呈現出來的感覺我很喜歡吧？扯的真的很遠，我想說的是，如果因為自己不曾多嘗試就認定說某某某自己絕對沒興趣，那我覺得，或許會因為這樣，錯失很多挖到寶的好機會吧？</p>
<p>最後，再套用文章當中的一句話：「職涯不是跟別人比賽爬階梯，而是畫出專屬於自己迂迴而上的曲折線」。人生也是一樣，你的人生想追求什麼？「認識自我、感受世界、創造價值」，讓我們創造屬於自己的一片天吧！</p>
]]></content>
  </entry>
  <entry>
    <title>決定改部落格文章 Views 的計算方式</title>
    <url>/2022/06/change-views-count/</url>
    <content><![CDATA[<p>想說這樣比較直覺，也比較有趣😂</p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>參考<a href="https://kanido386.github.io/2021/06/hexo-github-pages-blog/#%E9%A1%AF%E7%A4%BA%E6%96%87%E7%AB%A0%E9%96%B1%E8%AE%80%E6%AC%A1%E6%95%B8">之前自己寫的</a>，原本 Views 是用 localStorage 來看說這個訪客有沒有造訪過某篇文章：<br>如果沒有的話，Views 就加一，並用 localStorage 來記錄說他造訪過了；<br>如果有的話，也就是 localStorage 有記錄，Views 就不會變動。</p>
<p>但這樣挺無趣的，每進去一次，就應該要加一才對，所以我決定來修改一下它的計算方式！</p>
<h2 id="記錄一下"><a href="#記錄一下" class="headerlink" title="記錄一下"></a>記錄一下</h2><p>因為之前所有文章的 Views 即將歸零重新計算了，想說在這邊記錄一下，留個念：</p>
<ol>
<li>（2021-07-12） <strong><a href="https://kanido386.github.io/2021/07/hackathon-line-hint/">黑客松 LINE Bot 賽前補帖</a></strong> （161）</li>
<li>（2021-07-16） <strong><a href="https://kanido386.github.io/2021/07/baymax-with-us/">喜歡《大英雄天團》杯麵？何不自己做一個！</a></strong> （114）</li>
<li>（2021-07-10） <strong><a href="https://kanido386.github.io/2021/07/fsm-line-bot/">用 FSM 及 LINE Messaging API 做一個聊天機器人</a></strong> （113）</li>
<li>（2021-01-13） <strong><a href="https://kanido386.github.io/2021/01/microprocessor-project/">用 STM32 開發板做一台類似投籃機的遊戲機台</a></strong> （58）</li>
<li>（2021-01-06） <strong><a href="https://kanido386.github.io/2021/01/asp-final-project/">用 Pure Data 打造吉他效果器</a></strong> （56）</li>
<li>（2020-09-05） <strong><a href="https://kanido386.github.io/2020/09/summer-project/">用一點樂理和音訊處理技術做簡單的音色轉換</a></strong> （47）</li>
<li>（2021-06-10） <strong><a href="https://kanido386.github.io/2021/06/hexo-github-pages-blog/">用 Hexo 及 GitHub Pages 打造部落格</a></strong> （45）</li>
<li>（2020-04-27） <strong><a href="https://kanido386.github.io/2020/04/javascript-es6-cheatsheet/">JavaScript ES6 Cheatsheet</a>（</strong>42<strong>）</strong></li>
<li>（2021-07-06） <strong><a href="https://kanido386.github.io/2021/07/algorithmia-ml-models/">用 Algorithmia 部署 ML Models</a></strong> （34）</li>
<li>（2021-07-08） <strong><a href="https://kanido386.github.io/2021/07/python-line-blockchain/">當 Python 遇上了 LINE Blockchain</a></strong> （33）</li>
<li>（2021-07-04） <strong><a href="https://kanido386.github.io/2021/07/python-android-phone/">用 Python 操作 Android 手機</a></strong> （25）</li>
<li>（2021-06-13） <strong><a href="https://kanido386.github.io/2021/06/python-pdf-to-png/">用 Python 將 PDF 文檔轉成 PNG 圖檔</a></strong> （24）</li>
<li>（2022-01-09） <strong><a href="https://kanido386.github.io/2022/01/spotify-side-project-plan/">做 Spotify 相關的 side project</a></strong> （19）</li>
<li>（2021-09-26） <strong><a href="https://kanido386.github.io/2021/09/just-do-it/">不完美行動</a></strong> （19）</li>
<li>（2021-06-14） <strong><a href="https://kanido386.github.io/2021/06/dragon-boat-festival/">端午節立蛋</a></strong> （19）</li>
<li>（2022-03-25） <strong><a href="https://kanido386.github.io/2022/03/line-developers-meetup-16/">【心得】LINE Developers Meetup #16</a></strong> （18）</li>
<li>（2022-04-09） <strong><a href="https://kanido386.github.io/2022/04/freshman-career-73-64/">【職涯路上】73~64</a></strong> （15）</li>
<li>（2021-10-01） <strong><a href="https://kanido386.github.io/2021/10/senior-first/">即將展開的大四上</a></strong> （13）</li>
<li>（2022-03-27） <strong><a href="https://kanido386.github.io/2022/03/2022-yourator-career-fair/">【心得】2022 Yourator 數位職涯博覽會</a></strong> （11）</li>
<li>（2022-03-12） <strong><a href="https://kanido386.github.io/2022/03/freshman-career-92/">【職涯路上】92，交大就業博覽會</a></strong> （11）</li>
<li>（2021-11-14） <strong><a href="https://kanido386.github.io/2021/11/next-10000-hours/">【閱讀筆記】下個10000小時，你打算怎樣過？</a></strong> （11）</li>
<li>（2022-04-09） <strong><a href="https://kanido386.github.io/2022/04/free-aws-nodejs-web-server/">【圖文教學】免費在 AWS 上建一個 Node.js Web Server</a></strong> （10）</li>
<li>（2022-03-30） <strong><a href="https://kanido386.github.io/2022/03/freshman-career-76-74/">【職涯路上】76~74</a></strong> （10）</li>
<li>（2022-05-25） <strong><a href="https://kanido386.github.io/2022/05/nosql-introduction/">【技術筆記】NoSQL、Data Replica、Sharding</a></strong> （9）</li>
<li>（2022-03-27） <strong><a href="https://kanido386.github.io/2022/03/freshman-career-84-77/">【職涯路上】84~77</a></strong> （8）</li>
<li>（2022-03-11） <strong><a href="https://kanido386.github.io/2022/03/driving-school/">駕訓班裡的點點滴滴</a></strong> （8）</li>
<li>（2022-04-27） <strong><a href="https://kanido386.github.io/2022/04/ssl-for-free/">用 SSL For Free 免費申請 SSL 憑證</a></strong> （7）</li>
<li>（2020-05-16） <strong><a href="https://kanido386.github.io/2020/05/moleculer-crud-guide/">Moleculer CRUD Guide</a></strong> （7）</li>
<li>（2022-06-03） <strong><a href="https://kanido386.github.io/2022/06/2022-dragon-boat-festival/">2022 端午節立蛋</a></strong> （6）</li>
<li>（2021-12-19） <strong><a href="https://kanido386.github.io/2021/12/soft-skills/">停下來思考</a></strong> （6）</li>
<li>（2022-03-14） <strong><a href="https://kanido386.github.io/2022/03/freshman-career-91-90/">【職涯路上】91~90，越挫越勇！</a></strong> （5）</li>
<li>（2022-03-07） <strong><a href="https://kanido386.github.io/2022/03/freshman-career-100-97/">【職涯路上】100~97，開始行動！</a></strong> （5）</li>
<li>（2022-01-28） <strong><a href="https://kanido386.github.io/2022/01/help-you-take-action/">助你行動</a></strong> （5）</li>
<li>（2022-06-05） <strong><a href="https://kanido386.github.io/2022/06/youbike-helper/">用 Docker 和 Kubernetes 部署一個使用到 RabbitMQ 及 MongoDB 的 Express App</a></strong> （4）</li>
<li>（2022-03-11） <strong><a href="https://kanido386.github.io/2022/03/freshman-career-96-93/">【職涯路上】96~93，自我懷疑⋯⋯</a></strong> （4）</li>
<li>（2021-12-11） <strong><a href="https://kanido386.github.io/2021/12/synth-one-with-logic-pro/">免費 iOS 合成器 App《Synth One》也能搭配 Logic Pro 玩音樂？</a></strong> （4）</li>
<li>（2022-03-18） <strong><a href="https://kanido386.github.io/2022/03/freshman-career-89-86/">【職涯路上】89~86，再廢也不要停止反思</a></strong> （3）</li>
<li>（2021-12-15） <strong><a href="https://kanido386.github.io/2021/12/rest-is-important/">【閱讀筆記】一流的人如何保持巔峰</a></strong> （3）</li>
<li>（2021-12-12） <strong><a href="https://kanido386.github.io/2021/12/live-in-the-moment/">專注當下</a></strong> （3）</li>
<li>（2022-06-12） <strong><a href="https://kanido386.github.io/2022/06/freshman-career-63-0/">【職涯路上】63~0，Commencement</a></strong> （2）</li>
<li>（2022-03-19） <strong><a href="https://kanido386.github.io/2022/03/freshman-career-85/">【職涯路上】85，不想徒具形式</a></strong> （2）</li>
<li>（2021-10-07） <strong><a href="https://kanido386.github.io/2021/10/logic-pro-plug-in-compatibility/">如何解決 Logic Pro Plug-In Compatibility 的問題</a></strong> （2）</li>
</ol>
<h2 id="來改吧"><a href="#來改吧" class="headerlink" title="來改吧"></a>來改吧</h2><ol>
<li>參考<a href="https://kanido386.github.io/2021/06/hexo-github-pages-blog/#%E9%A1%AF%E7%A4%BA%E6%96%87%E7%AB%A0%E9%96%B1%E8%AE%80%E6%AC%A1%E6%95%B8">我之前寫的</a>，去 Firestore Database → 規則，來編輯規則： <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">service cloud.firestore &#123;</span><br><span class="line">  match /databases/&#123;database&#125;/documents &#123;</span><br><span class="line">    match /articles/&#123;any&#125; &#123;</span><br><span class="line">      allow read: if <span class="literal">true</span>;</span><br><span class="line">      allow write: if <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 新規則</span></span><br><span class="line">    match /views/&#123;any&#125; &#123;</span><br><span class="line">      allow read: if <span class="literal">true</span>;</span><br><span class="line">      allow write: if <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 編輯完以後，記得按「發布」</li>
<li>到 theme 的 config 檔 <code>/themes/next/_config.yml</code>，修改關於 firestore 的設置： <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">firestore:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># collection: articles</span></span><br><span class="line">  <span class="attr">collection:</span> <span class="string">views</span> <span class="comment"># Required, a string collection name to access firestore database</span></span><br><span class="line">  <span class="attr">apiKey:</span> <span class="string">&lt;網路</span> <span class="string">API</span> <span class="string">金鑰&gt;</span></span><br><span class="line">  <span class="attr">projectId:</span> <span class="string">&lt;專案</span> <span class="string">ID&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>去到 <code>/themes/next/layout/_third-party/statistics/firestore.swig</code> 修改計算方式： <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 其實就是註解掉第 51~56 行</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">localStorage</span>.getItem(title)) &#123;</span><br><span class="line">  increaseCount = <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// Mark as visited</span></span><br><span class="line">  <span class="built_in">localStorage</span>.setItem(title, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<br>
這樣就改好囉，就是這麼簡單😎]]></content>
  </entry>
  <entry>
    <title>別被時間綁住了！</title>
    <url>/2022/12/dont-stuck-in-time/</url>
    <content><![CDATA[<p>讀文章寫心得：<a href="https://www.managertoday.com.tw/books/view/66080">領導大師的人生課：年輕不下定決心，年老認為自己無用，都是畫地自限</a></p>
<p>年輕的時候覺得時間還很多，遲遲不做決定而維持原狀，反正時間還很多；逐漸年長之後覺得做很多事情都為時已晚了，所以即使心中有想嘗試的新行動，也乾脆不去做了，反正也比不過年輕人早早就開始。</p>
<p>這個想法，怎麼感覺跟我上上禮拜日的想法很雷同！早上的時候覺得還有很多時間，所以可以很慵懶不採取行動，到了較晚的時候就會覺得太晚開始行動、早知道早一點開始，那乾脆就這樣結束一天⋯⋯</p>
<p>來嘗試看看能不能透過這篇文章反思點什麼🤔</p>
<p>（挑戰看看在下班搭車的時候寫完這一篇，雖然依照過往經驗，這個時間點通常都很累啦😂）</p>
<span id="more"></span>

<p>感覺是被「時間」這個框架給束縛住了嗎？以年齡來說，45 歲看似「遲了」，但如果是跟未來 65 歲的自己才開始行動比較呢？一日的時間也是一樣，下午四點的時候感覺今天快過完了，但如果是跟晚上十點比較呢？</p>
<p>如果因為「覺得」遲了而不展開行動，那真的很可惜，因為第二好展開行動的時間點就是現在！試想一下，今天你突然萌生出嘗試新東西的想法，但因為各種藉口，後來就決定乾脆算了。幾年後又突然想嘗試那個東西，然而此時再來回頭看，往往會覺得很嘔，因為內心會不斷冒出聲音：早知道當初就先開始了⋯⋯</p>
<p>沒有所謂通往成功之路的標準答案，路，是自己走出來的！當然每個人對於「何謂成功」的定義不盡相同，這也一樣沒有唯一解！</p>
<p>結論就是：時間早晚不是重點，關鍵在於你怎麼去看待它。</p>
]]></content>
  </entry>
  <entry>
    <title>駕訓班裡的點點滴滴</title>
    <url>/2022/03/driving-school/</url>
    <content><![CDATA[<p>簡單記錄一下～</p>
<span id="more"></span>

<h2 id="前面廢話"><a href="#前面廢話" class="headerlink" title="前面廢話"></a>前面廢話</h2><p>原本打算趁寒假比較閒的時候上駕訓班，但因為比較晚才去注意相關資訊，就只能報年後開始上課的期別。（當時心想：早知道就早一點去了解，這樣開學後就不用再去駕訓班練車了，但沒有早知道這回事啊xD 就警惕自己，這就是拖延的後果，之後盡量不要再犯了）</p>
<p>扯遠了，所以我 1/26 到附近的診所體檢，<a href="https://www.mvdis.gov.tw/m3-emv-hca/agency/query">這邊</a>可以查詢最近的體檢代辦所。然後接著就去駕訓班報名。</p>
<p>原本我打算報的是「手排」，但教練知道了以後，立馬試著說服我報「自排」，他說現在幾乎都是自排車了，不必去學手排。</p>
<p>報名駕訓班前是有做一點功課，有查到說教練很可能會說服你學自排，因為比較好教、好學，而且男女學員的待遇還可能不一樣xD 那個時候想說，哪有可能那麼容易被說服，我想學手排，是因為我想更了解開車的原理啊，管它好學不好學！</p>
<p>沒想到才聽了教練幾句話的我，很快就被說服了xD 後來想說，家裡的人沒在開車，對於車子，我實在超級無敵不熟，腦袋裡面沒什麼開車上路的 data，學比較難的手排也只是在刁難自己而已，真的需要，之後再說好像也是可🤔</p>
<p>真的要長話短說了⋯⋯</p>
<h2 id="我的第一堂駕駛課"><a href="#我的第一堂駕駛課" class="headerlink" title="我的第一堂駕駛課"></a>我的第一堂駕駛課</h2><p>第一次上課是在 2/6，也就是年後的禮拜日。</p>
<p>一剛開始，教練帶我到模擬機台練習轉⽅向盤，我那時候才知道，原來方向盤左右的極限是各⼀圈半啊，我還以為像電玩一樣，只能轉那麼一點點。教練教我怎麼轉以後，就要我自己練習 15 分鐘，然後他就去其他地方了。當時的我心想，哇嗚，網路上說的果然是真的，可能我是男生的關係吧？但後來經過一次又一次的上課，我才明白，很多東西教練真的只需要提點一下，其他靠學員自己練真的就行了。重點是：教練並不像網路上說的那種模樣啊！而且之後仔細想想，難道轉方向盤這種沒什麼技術的東西也要教練全程都在一旁陪我轉嗎xD</p>
<p>無腦轉了一陣子的方向盤以後，教練就帶我進車子裡了。哇嗚，居然這麼快，難道待會就要開車了嗎？還真的沒錯。</p>
<p>一上車，教練先向我介紹⽅向燈、⾬刷、PRD檔、臨時停⾞按鈕、⼿煞⾞、調整後照鏡的控制這些，介紹完以後，就帶我練「直線進退」了。我那個時候才知道，原來切到 R 檔或 D 檔以後，你不踩剎車，車子可是會動的呢！以為像遊戲一樣，就一直踩油門往前衝就是了xD 教練要我慢慢前進、後退，練習腳含著剎車的感覺，因為之後會常用到。</p>
<p>下課前，居然就要練「路邊停車」了！好快啊，不是才第一堂課而已？練習的過程就不多說了，我想說的是，<strong>下課以後，真的最好把剛剛記的口訣、體會到的東西記下來，一來可以幫自己再複習一遍，二來下次練車前看的時候，很快就能回憶起來！</strong>當天上完課，我記了以下的筆記：</p>
<blockquote>
<p><strong>（路邊停⾞）</strong></p>
<ul>
<li>步驟：後退 → 右⼀圈半 → 回來 → 左⼀圈半 → (停⾞) → 換D檔 → 維持左⼀圈半 → 回來 → 右⼀圈 → 回來 → 換R檔 → 無限循環</li>
<li>訣竅：三⾓形</li>
</ul>
</blockquote>
<p>第一堂課還真扎實啊xD</p>
<h2 id="新關卡登錄！"><a href="#新關卡登錄！" class="headerlink" title="新關卡登錄！"></a>新關卡登錄！</h2><p>第二次上課在 2/12，練的是「倒車入庫」和「曲線進退」。</p>
<p>當時真的覺得好快，練好多看起來不容易的關卡，我才第二次上課而已，而且之前都沒開過車啊 (我想大家都是xD)！</p>
<p>一樣下課的時候記了點筆記：</p>
<blockquote>
<p><strong>（倒⾞⼊庫）</strong></p>
<ul>
<li>步驟：後退直到外⾯竿⼦在右後座扶⼿的前⾯⼀點點 → 右打到底,可以從右後照鏡看到⾞⼦逐漸在⽩線內進去 → ⽅向盤導正,後退到⼈在樹前⾯⼀點點 → 前進到⼀個東東在⽩線前⾯⼀點點 → 右打底,正了之後再導回來</li>
</ul>
<p><strong>（曲線進退）</strong></p>
<ul>
<li>前進步驟：前進到左前燈在⽩線前⾯⼀點點,但我覺得可以觀察左後照鏡,當出現路線的時候再下⼀動 → 左打1⼜1/4圈,同時看著左後照鏡左彎,注意⾨把與⽩線的距離,太近太遠就調整⽅向盤的幅度 → 當左還是右前燈碰到⽩線就導正,前進直到右前燈超過⽩線⼀點點,但其實可以觀察右後照鏡 → 右邊跟左邊的操作⽅式⼤同⼩異,就左右互換⽽已 → 到站</li>
<li>後退步驟：切換R檔,注意距離,同時做⽅向盤幅度上的調整→ 當左後照鏡看到半圓時,導正 → 後退到⾨把進到半圓內 → ⽅向盤往左轉1⼜1/4圈,⼀樣要調整幅度 → 導正回到起點</li>
</ul>
</blockquote>
<p>裡面很多東西你可能會看不懂，<strong>這就是筆記，自己能夠看懂才是重點！</strong></p>
<h2 id="第一次跑場考"><a href="#第一次跑場考" class="headerlink" title="第一次跑場考"></a>第一次跑場考</h2><p>第三次上課是在隔天 2/13，令我驚訝的是，上週日才第一次上課，那週日就要跑整個場考的關卡了！太酷了吧！</p>
<p>那天教練跟我約特別早，八點就要到駕訓班練車。真的還蠻早的，起床時頗掙扎，那麼早，原來是因為今天要直接跑關卡，怕晚了⼈就多了！</p>
<p>因為還很菜，要進車練的時候忘記放下⼿煞⾞，被教練訓了一頓xD</p>
<p>其實還蠻好玩的，很像在玩遊戲，啊如果不小心壓到黑管的話，就會很大聲地逼逼叫讓你丟臉懲罰你xD</p>
<p>關卡依序如下，順便附上我的小筆記：</p>
<ol>
<li>⾏前檢查及起駛前動作：⾏駛前先打左⽅向燈代表要出來 → 打右⽅向燈再打D檔,前進,⾨把到紫紅草時右⽅向盤打到底,然後轉正,稍微讓⾞⼦中間偏右⼀點</li>
<li>倒⾞⼊庫：先打右⽅向燈再打R檔 → 後退到右後座上⾯⼿把到提⽰牌附近(不要太後⾯) → 右⽅向盤打到底 → 正了以後轉正退後到⼈對到⿈線 → 打右⽅向燈再打D檔 →往前到右邊凸起(?)對到紫紅草 → 出來動作不解釋xD</li>
<li>路邊停⾞：⼤同⼩異,記得打燈,⼀開始右⽅向盤到左後照鏡安全島出現四個⿊⾊再導正,其他⼀樣</li>
<li>S型曲線進退：先打右⽅向燈,前進直到右⾨把(?)到安全島時,右⽅向盤打到底 → 感覺到顛頗⼀次時,⽅向盤導正 → 其他跟前⾯練習⼀樣,只是半圓要⾃⼰去想像,倒退前記得先打右⽅向燈 → 快結束時,也就是差不多⾞體轉正時,⽅向盤導正 → 打右⽅向燈,然後右⽅向盤打到底出去</li>
<li>（中間就是注意號誌和打燈,右⾨把(?)到⽩線時再開始轉⽅向盤到底,然後慢慢導正）</li>
<li>上坡起步：⾞速儀表的100對到左⼆的黑管,要上坡前踩⼀點點煞⾞右邊的油⾨,到頂時記得快換踩剎⾞（後來補上：左標記要對到藍、拉⼿煞⾞、油⾨踩不超過1）</li>
<li>穩定換檔：右邊的東東(?)對到紫紅草,前⾯的左黑管要在左前燈的右邊⼀些些 → 前進,適時調整⽅向盤</li>
</ol>
<p>筆記真的能幫助之後的每一次練習啊！</p>
<h2 id="第一次道駕"><a href="#第一次道駕" class="headerlink" title="第一次道駕"></a>第一次道駕</h2><p>2/18，練完一段時間的場內以後，教練帶我練道駕。</p>
<p>我只想說，那一天練完只覺得，我可能永遠都拿不到汽車駕照了，因為我開得實在是超級無敵爛，不斷被教練訓斥，顏面掃地的那種，我自己也覺得非常危險，像是不要突然在路中間踩剎⾞，而我卻做了，這樣真的很容易發生追撞啊！</p>
<p>那個時候真的超級沒信心，覺得，唉，看來汽車駕照真的跟我無緣了吧？</p>
<p>但說真的，現在回想起來，第一次上路，緊張害怕是非常正常的，跟場內的感覺差非常多，你還得多踩油門之外，馬路上也有其他大大小小的車子啊！</p>
<p>現在的我只想跟當時的自己說：不要害怕，每次的練習，你會越來越來熟悉，也會越來越覺得沒什麼的！（2/27 的我寫下了這個：「道駕真的是⽐前幾次好很多啊！」，真的要相信自己能做到啊！）</p>
<h2 id="例行練車，例行樂趣"><a href="#例行練車，例行樂趣" class="headerlink" title="例行練車，例行樂趣"></a>例行練車，例行樂趣</h2><p>接著後幾次就是各種到駕訓班練車。</p>
<p>過程真的會覺得無聊，因為都重複做一樣的事⋯⋯</p>
<p>不確定行不行，但後來我不管了，打開手機的 Spotify，聽著歌，跟著唱，教練車裡頭彷彿我個人的小型演唱會，我甚至還因此掌握了怎麼唱我原本唱不上去的歌呢xD</p>
<p>就這樣，爾後的練車，我就是這樣悠遊自在，練車和享樂融為一體，已經分不清我是在練車還是在享受那種感覺了，挺不錯的！</p>
<p>提個外話，冷氣還不錯舒服～</p>
<h2 id="小挫折"><a href="#小挫折" class="headerlink" title="小挫折"></a>小挫折</h2><p>明明已經接近「躊躇滿志」的狀態了，沒想到 3/6 的道駕，讓我有種跌倒的感覺。</p>
<p>快考試了，還是有不少開不好的地方，甚至又被教練唸，不是很好受。</p>
<p>於是乎，我做了以下筆記：</p>
<ul>
<li>油⾨不要⼀直踩 早點準備煞停</li>
<li>路邊停⾞前打右⽅向燈後記得說右⽅無來⾞</li>
<li>路邊停⾞出來左⽅向燈後記得135度</li>
<li>迴轉前速度要慢 ⽅向盤要打到底</li>
<li>那個牌⼦那邊 記得放慢 紅綠燈等⾞的時候不要出去太多</li>
</ul>
<p>沒事，有幫自己記下道駕的注意要點，之後再多多提醒自己就行了～</p>
<h2 id="考前一天"><a href="#考前一天" class="headerlink" title="考前一天"></a>考前一天</h2><p>就跟教練約了一個小時的練習場考，練完跟朋友打球，打完球就快速複習一下筆試模擬試卷自己圈起來的地方，好像就這樣，也不必特別準備什麼。</p>
<p>但就要記得早點睡，因為隔天 06:50 就要到駕訓班集合搭車考筆試。</p>
<p>啊對了還有，再看個道駕影片讓腦袋順過一遍路考的路線，也再複習一下開⾞前檢查動作，確保自己順序有記對。</p>
<p>也別忘了先準備好隔天需要的身分證、乘車證、錢錢、一顆平常的心。</p>
<h2 id="考照當天"><a href="#考照當天" class="headerlink" title="考照當天"></a>考照當天</h2><p>3/11，五點半起來，吃完早餐，出發去駕訓班。</p>
<p>早上有點冷，那溫度加劇了我的緊張感，帶著這份心情，前往筆試考場，直到通過筆試了以後，加上外頭陽光燦爛也溫暖了起來，頓時覺得豁然開朗，好像沒那麼緊張，心中能感受到一股莫名的平靜。</p>
<p>最讓人不耐煩的，就是等路考的過程，應該有兩小時吧，待在椅子上坐著，也不想滑手機，原本有聽音樂後來也不想聽了。（啊對了，我平常練車聽的歌就那幾首，我發現考前聽那幾首，可以幫助我快速平復緊張的情緒欸！還蠻讚的！）</p>
<p>終於輪到我，上場囉！（ABCDEFGHIJKLMNOPQRSTUVWXYZ）咦我過了？</p>
<p>真的，聽到我過了的當下，真的有種「咦我過了？」的感受，因為我是真的帶著很平常的心情去開車的，就像平常邊聽歌邊練車一樣，而道考的時候，彷彿是開著車帶著考官去遊山玩水一樣，是多麼地輕鬆愜意啊！就這樣，通過了考驗。</p>
<p>人生其他方面也該是相同道理吧🤔</p>
<br>
感謝吳教練的諄諄教誨啊😎]]></content>
  </entry>
  <entry>
    <title>端午節立蛋</title>
    <url>/2021/06/dragon-boat-festival/</url>
    <content><![CDATA[<p><a href="/2021/06/dragon-boat-festival"><img src="https://images.unsplash.com/photo-1586975471851-06fbf8453bda?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1500&q=80" style="width:50vw;" /></a></p>
<!-- <img src="0.jpeg" style="width:50vw;" /> -->

<span id="more"></span>

<h3 id="今年戰績"><a href="#今年戰績" class="headerlink" title="今年戰績"></a>今年戰績</h3><p>11:55～12:45 共 50 分鐘，立了 12 顆蛋。</p>
<h3 id="蛋"><a href="#蛋" class="headerlink" title="蛋"></a>蛋</h3><p><img src="1.jpg"></p>
<h3 id="面對陽光陰影就在背後蛋"><a href="#面對陽光陰影就在背後蛋" class="headerlink" title="面對陽光陰影就在背後蛋"></a>面對陽光陰影就在背後蛋</h3><p><img src="2.jpg"></p>
<h3 id="流星雨蛋"><a href="#流星雨蛋" class="headerlink" title="流星雨蛋"></a>流星雨蛋</h3><p><img src="3.jpg"></p>
<h3 id="即將進洞的高爾夫球蛋"><a href="#即將進洞的高爾夫球蛋" class="headerlink" title="即將進洞的高爾夫球蛋"></a>即將進洞的高爾夫球蛋</h3><p><img src="4.jpg"></p>
<h3 id="翅膀蛋"><a href="#翅膀蛋" class="headerlink" title="翅膀蛋"></a>翅膀蛋</h3><p><img src="5.jpg"></p>
<p><img src="6.gif"></p>
<br>
今天的分享就到這邊，我們下篇文見吧 😃]]></content>
  </entry>
  <entry>
    <title>【圖文教學】免費在 AWS 上建一個 Node.js Web Server</title>
    <url>/2022/04/free-aws-nodejs-web-server/</url>
    <content><![CDATA[<p>文章裡面附了不少圖xD</p>
<span id="more"></span>

<h2 id="建立-AWS-帳戶"><a href="#建立-AWS-帳戶" class="headerlink" title="建立 AWS 帳戶"></a>建立 AWS 帳戶</h2><p>如果沒有 AWS 帳戶，到<a href="https://portal.aws.amazon.com/billing/signup">這邊</a>註冊個吧！</p>
<p><img src="1.png"></p>
<h2 id="建立-EC2-執行個體-Instance"><a href="#建立-EC2-執行個體-Instance" class="headerlink" title="建立 EC2 執行個體 (Instance)"></a>建立 EC2 執行個體 (Instance)</h2><ol>
<li>搜尋「EC2」，點按 EC2 項目底下的「Instances」</li>
</ol>
<p><img src="2.png"></p>
<ol start="2">
<li>點按右上角「啟動新執行個體」</li>
</ol>
<p><img src="3.png"></p>
<ol start="3">
<li>Machine image 選免費的 Amazon Linux 2 AMI</li>
</ol>
<p>Kernel 選最新版的，<a href="https://aws.amazon.com/tw/about-aws/whats-new/2021/11/amazon-linux-2-ami-kernel-5-10/">這篇</a>有說為什麼：</p>
<blockquote>
<p>We recommend you use Amazon Linux 2 with kernel 5.10 when launching new instances to benefit from new features and performance improvements.</p>
</blockquote>
<p><img src="4.png"></p>
<ol start="4">
<li>選免費的「t2.micro」以後，按「審核和啟動」<br>（如果想進一步做設置，可以按「下一步: 配置實例詳細信息」）</li>
</ol>
<p><img src="5.png"></p>
<ol start="5">
<li>啟動吧！</li>
</ol>
<p><img src="6.png"></p>
<ol start="6">
<li>創建新密鑰對 → 輸入密鑰對名稱 → 下載密鑰對<br>（下載下來的密鑰對不要弄丟囉，之後會用到！）</li>
</ol>
<p><img src="7.png"></p>
<ol start="7">
<li>啟動新實例</li>
</ol>
<p><img src="8.png"></p>
<ol start="8">
<li>有了！</li>
</ol>
<p><img src="9.png"></p>
<h2 id="分配-Elastic-IP-給-Instance"><a href="#分配-Elastic-IP-給-Instance" class="headerlink" title="分配 Elastic IP 給 Instance"></a>分配 Elastic IP 給 Instance</h2><p>我是照著「<a href="https://enterprise.arcgis.com/en/server/10.3/cloud/amazon/allocate-elastic-ip-and-associate-with-your-instance.htm">Allocate an Amazon Elastic IP and associate it with your instance</a>」這篇做的。</p>
<ol>
<li>左側欄找到「彈性 IP」</li>
</ol>
<p><img src="10.png"></p>
<ol start="2">
<li>右上角「配置彈性 IP 地址」</li>
</ol>
<p><img src="11.png"></p>
<ol start="3">
<li>點「配置」</li>
</ol>
<p><img src="12.png"></p>
<ol start="4">
<li>勾選那個彈性 IP 地址 → 動作 → 與彈性 IP 地址建立關聯</li>
</ol>
<p><img src="13.png"></p>
<ol start="5">
<li>選你要建立關聯的執行個體 (Instance) 吧！</li>
</ol>
<p><img src="14.png"></p>
<ol start="6">
<li>建立關聯</li>
</ol>
<p><img src="15.png"></p>
<h2 id="架設-Node-js-Web-Server"><a href="#架設-Node-js-Web-Server" class="headerlink" title="架設 Node.js Web Server"></a>架設 Node.js Web Server</h2><h3 id="用-SSH-連進你的-Instance"><a href="#用-SSH-連進你的-Instance" class="headerlink" title="用 SSH 連進你的 Instance"></a>用 SSH 連進你的 Instance</h3><ol>
<li>參照「<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/connection-prereqs.html">General prerequisites for connecting to your instance</a>」這篇來取得 Instance 的 user name 以及 public DNS name</li>
</ol>
<blockquote>
<p>For Amazon Linux 2 or the Amazon Linux AMI, the user name is <code>ec2-user</code>.</p>
</blockquote>
<p><img src="16.png"></p>
<ol start="2">
<li>同樣參照「<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/connection-prereqs.html">General prerequisites for connecting to your instance</a>」這篇，更改 private key (剛剛下載的密鑰對) 的權限</li>
</ol>
<blockquote>
<p>If you do not set these permissions, then you cannot connect to your instance using this key pair.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 400 try-aws-ec2.pem</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>照「<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html">Connect to your Linux instance using SSH</a>」這篇的做法，用 SSH 連進去！</li>
</ol>
<p>（我把 <code>try-aws-ec2.pem</code> 放在終端機當前目錄下）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用「公有 IPv4 DNS」</span></span><br><span class="line">ssh -i try-aws-ec2.pem ec2-user@ec2-54-254-94-30.ap-southeast-1.compute.amazonaws.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用「公有 IPv4 地址」</span></span><br><span class="line">ssh -i try-aws-ec2.pem ec2-user@54.254.94.30</span><br></pre></td></tr></table></figure>

<p><img src="17.png"></p>
<ol start="4">
<li>輸入「yes」按 enter</li>
</ol>
<p><img src="18.png"></p>
<p>連進去了，開心 🎉</p>
<blockquote>
<p>第 3. 步的文章，裡面有提到「Transfer files to Linux instances using an SCP client」，如果有需要轉移檔案的，可以參考一下！</p>
</blockquote>
<h3 id="設置-Node-js"><a href="#設置-Node-js" class="headerlink" title="設置 Node.js"></a>設置 Node.js</h3><ol>
<li>照著「<a href="https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html">Tutorial: Setting Up Node.js on an Amazon EC2 Instance</a>」這篇做即可安裝 Node.js，我就不重複了xD</li>
</ol>
<p><img src="19.png"></p>
<ol start="2">
<li>簡單做一個 Node.js web server，測試用的，我是參考「<a href="https://appdividend.com/2022/03/04/how-to-build-node-js-web-server/">How To Build Node.js Web Server From Scratch</a>」這一篇</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir my-web-server</span><br><span class="line"><span class="built_in">cd</span> my-web-server</span><br><span class="line">touch server.js</span><br><span class="line">vim server.js</span><br></pre></td></tr></table></figure>

<p>下面的 code 貼到裡面。（只是為了測試能不能跑，所以不是很介意沒自己寫這個部分）<br>也可以用 Express 來寫，這部分真的就是創意的發揮～</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123; <span class="string">&quot;Content-type&quot;</span>: <span class="string">&quot;text/plain&quot;</span> &#125;);</span><br><span class="line">    res.end(<span class="string">&quot;Hello world\n&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Server is running at 3000&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>跑跑看 <code>node server.js</code>，看外部能不能連上</li>
</ol>
<p><img src="20.png"></p>
<p><img src="21.png"></p>
<p>不行欸，為什麼啊？原來還差一個步驟！</p>
<h3 id="編輯傳入規則"><a href="#編輯傳入規則" class="headerlink" title="編輯傳入規則"></a>編輯傳入規則</h3><p>記得到「安全群組」編輯傳入規則新增 TCP <code>&lt;server的port&gt;</code>，才可透過 <code>&lt;Instance的IP位址&gt;:&lt;server的port&gt;</code> 連線，像是 <code>54.254.94.30:3000</code></p>
<ol>
<li>左側欄找到「安全群組」</li>
</ol>
<p><img src="22.png"></p>
<ol start="2">
<li>勾選你欲修改的安全群組 → 動作 → 編輯傳入規則</li>
</ol>
<p><img src="23.png"></p>
<ol start="3">
<li>新增規則</li>
</ol>
<p><img src="24.png"></p>
<ol start="4">
<li>選「自訂 TCP」→ 連接埠範圍填 server 的 port → 來源選「0.0.0.0/0」代表接受任何來源的傳入 → 儲存規則</li>
</ol>
<p><img src="25.png"></p>
<ol start="5">
<li>再來連連看，成功啦 🎉</li>
</ol>
<p><img src="26.png"></p>
<h2 id="Bonus"><a href="#Bonus" class="headerlink" title="Bonus"></a>Bonus</h2><h3 id="讓-Server-背景執行"><a href="#讓-Server-背景執行" class="headerlink" title="讓 Server 背景執行"></a>讓 Server 背景執行</h3><p>我是參考「<a href="https://blog.toright.com/posts/4242/nodejs-server-to-linux-service-daemon-%E8%A3%BD%E4%BD%9C%E6%95%99%E5%AD%B8.html">NodeJS Server to Linux Service Daemon 製作教學</a>」這一篇，用的是「<a href="https://www.npmjs.com/package/forever">forever - npm</a>」這個 CLI tool，或許有更好的做法！</p>
<h3 id="裝-MySQL-Server"><a href="#裝-MySQL-Server" class="headerlink" title="裝 MySQL Server"></a>裝 MySQL Server</h3><p>我是直接照「<a href="https://awswithatiq.com/install-mysql-server-in-amazon-linux-2/">How to Install MySQL server in Amazon Linux 2</a>」這一篇的教學跑，裡面寫得很清楚，我就不重複了 😅</p>
<br>
希望這篇教學文能幫助到您，我們下篇文見啦 😃]]></content>
  </entry>
  <entry>
    <title>【職涯路上】100~97，開始行動！</title>
    <url>/2022/03/freshman-career-100-97/</url>
    <content><![CDATA[<p>行動才是一切，暫時忘卻完美主義吧！</p>
<span id="more"></span>

<h2 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h2><p>3/4 禮拜五那天，突然想到說可以來倒數看看離畢業 (6/12) 還剩下幾天，一數發現剛好剩下 100 天！<br>之所以這麼做，是因為我原本很可能有個實習機會，某些原因的關係，我選擇婉拒。<br>因此覺得自己得開始做點什麼，希望自己回頭來看這件事的時候，會認為是值得的！</p>
<h2 id="儀式感"><a href="#儀式感" class="headerlink" title="儀式感"></a>儀式感</h2><p>對於職涯方面，實在不想一直拖延，於是乎，我那天下午向朋友做了一個宣誓：</p>
<blockquote>
<p>今天我要盡我所能做一個簡單能用的 LINE 聊天機器人，主要功能是使用者能先挑感興趣的 KKBOX 排行榜(會先隨機秀出幾個)，接著會隨機跳出排行榜裡面的幾首歌，使用者點他想聽的，就能用 YouTube 或 Spotify 聽那首，適用情境可能就是當使用者不知道要聽什麼歌的時候，可以有個小幫手能夠幫忙推薦這樣。</p>
</blockquote>
<p>因為如果不讓別人知道，很可能會偷懶不做，但如果真的這樣的話，不就顯得「放棄實習機會」很愚蠢了嗎？</p>
<p>我還說：</p>
<blockquote>
<p>我想讓自己習慣每天都花點心思在開發這件事情上，累積一點東西，多積極參與對求職有幫助的活動！</p>
</blockquote>
<p>就真的很希望自己能跳脫懶惰拖延的圈圈裡面！</p>
<h2 id="小成果"><a href="#小成果" class="headerlink" title="小成果"></a>小成果</h2><p>最後當天有做出來那個聊天機器人嗎？有的，我把它叫做「推歌小幫手」。<br>然而，過程可真是不輕鬆，就跟現在寫這篇文一樣⋯⋯<br>（太久沒寫文章，現在回頭看之前寫的教學文，不禁讓我懷疑那些真的是我寫的嗎，怎麼感覺現在要重回之前的狀態還有一段路要走😂）</p>
<!-- ![](result.gif) -->

<img src="result.gif" alt="Demo" width="250" />

<h2 id="困難與挑戰"><a href="#困難與挑戰" class="headerlink" title="困難與挑戰"></a>困難與挑戰</h2><p>為什麼做那個聊天機器人不太輕鬆？太久沒發揮創意然後實作出東西是其中一個原因，但主要是心理層面的掙扎與糾結。</p>
<p>還是會有點擔心說會不會其實去實習是個比較好的選項。</p>
<p>因為希望自己在投履歷和面試的時候，能有些像樣的 side project 提出來分享，但要做出像樣的 side project，就得花心思去思考怎樣的 project 才能吸引到人，無論是 project 的完整性與成熟度、與⽬標職缺及產業的相關性、企業端要求的技術能⼒，都得去顧慮到。</p>
<p>那一整個過程光是用想的，就覺得，哇天啊，好像很不輕鬆啊！而選擇實習的話，就可以照著主管為我規劃的步調走，比較不用去煩惱這些。</p>
<p>除此之外，因為生疏，會覺得自己頓頓的，甚至大部分的 code 和實作過程還是參考之前自己寫的「<a href="https://kanido386.github.io/2021/07/baymax-with-us/" target="_blank">喜歡《大英雄天團》杯麵？何不自己做一個！</a>」才順利完成，就會覺得自己是不是在作弊都不動腦⋯⋯</p>
<h2 id="豁然開朗"><a href="#豁然開朗" class="headerlink" title="豁然開朗"></a>豁然開朗</h2><p>直到我前天讀了「<a href="https://blog.niclin.tw/2019/09/03/start-your-side-project-beiyi-app-1/">2 個月擁有 6000 用戶 Side project 這樣做（一）</a>」這篇文章，才明白原來我這麼做是沒問題的，這是「平時養 code、寫技術⽂章」所帶來的好處：</p>
<ul>
<li>要做 LINE 聊天機器人？我之前已經做過兩次了，<strong>直接搬來⽤！</strong></li>
<li>要串接 YouTube 和 KKBOX 的 API？我之前有把它們包成適合用於 LINE Bot 的 function 了，<strong>直接搬來⽤！</strong></li>
<li>要做 LINE 或 Heroku 之類東西的設定？以前寫過教學⽂，<strong>直接看⾃⼰的筆記實作！</strong></li>
</ul>
<p>頓時欣慰了不少。<br>但這樣我那個聊天機器人有多什麼功能嗎？有的，多嘗試串接了 Spotify 的 API，用的是「Spotipy」這個別人封裝好的 Python 套件。（Spotipy is a lightweight Python library for the Spotify Web API.）</p>
<h2 id="後續"><a href="#後續" class="headerlink" title="後續"></a>後續</h2><p>雖然很沒什麼，但我覺得還是要給自己一點鼓勵，畢竟願意起身行動，比自己一直在那邊踟躕不前好多了（不行動雖然「看似完美」，但是是不會有任何成果產生的）</p>
<p>認真考慮那個聊天機器人的功能可以加進之前做的「<a href="https://github.com/kanido386/baymax-with-us#readme">杯麵</a>」裡面！（杯麵功能豐富多啦，而且 README 已經有點樣子了，可以再作延伸）</p>
<h2 id="尋求建議"><a href="#尋求建議" class="headerlink" title="尋求建議"></a>尋求建議</h2><p>到了隔天，也就是 3/5 禮拜六，我去參加了由 104 主辦的「新世代求職趨勢&amp;人資獨家徵才解密」活動，聽企業講座之外，也去做了履歷健診。</p>
<p>邊聽講座邊記筆記，除此之外也趁機看了一些別人對於 side project 的建議，「<a href="https://tw.alphacamp.co/blog/side-project-guide">好的 Side Project 和作品集如何做？給新⼿⼯程師的懶⼈包</a>」這篇文真的很讚，整理了一些優質的建議文，然後我也做了點筆記，希望自己能常常回憶起來那些建議並加以行動！</p>
<p>履歷健診的部分真的很不錯，因為人很多要排隊等待，本來想說就算了反正之後還是有機會 (但我快畢業啦)，幸好沒懶惰，跟對方聊聊以後，對於職涯方面和履歷修改上真的有不少收穫，還建議我可以經營 LinkedIn，我們後來「建立關係」，對方很好心地說之後如果有什麼疑惑可以再跟他聯絡，覺得挺有意思的！</p>
<h2 id="砥礪心智"><a href="#砥礪心智" class="headerlink" title="砥礪心智"></a>砥礪心智</h2><p>而昨天早上到駕訓班練車，整個下午到傍晚燙了個鳥巢頭QQ，晚上因為鳥巢頭而沒什麼心情做正事xD，就這樣那天也沒什麼行動，睡前還有點過意不去呢😅</p>
<h2 id="繼續寫下去"><a href="#繼續寫下去" class="headerlink" title="繼續寫下去"></a>繼續寫下去</h2><p>今天主要就是這篇文啦～（真的太久沒寫，都不知道自己到底在寫什麼，語句通順與否還是會很在意，慢慢來吧，今天這樣寫感覺好像有點回來了，還行，但花了兩小時多😢）</p>
<h2 id="指點迷津"><a href="#指點迷津" class="headerlink" title="指點迷津"></a>指點迷津</h2><p>跳 tone 一下，剛好很適合這個階段多提醒自己！</p>
<p>最近聽了「<a href="https://open.spotify.com/show/1xpiKWtcLQcYALGHBw4SbP">職涯履行家 Creating Our Future</a>」的一集 podcast「<a href="https://open.spotify.com/episode/64Y8HF2iPtZh5KvRIlKtyV?si=3LMAAPj9QamiOOfP8HWEQQ">剛踏入社會，你也好迷茫嗎？深度聊聊迷茫怎麼來＆如何解決它！</a>」，何則文分享了一些點，我覺得很不錯，把它記下來了：</p>
<ul>
<li>我們為何迷茫？從⼩被⽤「標準答案」來教育，但未來的時代其實是沒有標準答案的，你必須要找到⾃⼰的解答！</li>
<li>過去的成功(模式)，不代表會帶來未來的成功</li>
<li>最重要的是回到⾃⼰的初⼼，不要問說社會覺得怎麼樣好，⽽是我做什麼事情我會開⼼，做什麼會覺得我的⼈⽣是幸福、是快樂的，往內求⽽⾮往外求</li>
<li>不要跟別⼈⽐，跟過去的⾃⼰⽐就好 (成⻑型思維)！⾄於別⼈怎麼樣，那是他家的事情，他可能只是個 NPC (⼈⽣或許只是個遊戲，是被更⾼層次的東⻄建構出來的，像是元宇宙的概念)</li>
<li>真正的學習是怎麼樣？學到⼀個東⻄然後它變成⼀個 module 或 function (可重複拿來⽤，不同 input 進來可得到不同 output，⽽不是只是⼀個 constant)。學習不是記憶，⽽是想辦法建⽴⼀個機制，讓未來⾃⼰可以找到答案</li>
<li>只有你可以對你的⼈⽣負起你的責任，不能像機器⼀樣很被動，別⼈推我們才去做，⽽是要開始找到⾃⼰⼈⽣的解答</li>
<li>要有跨域思維，不要被⾃⼰的科系、背景、社會環境給綁住，⾛出⾃⼰的道路！</li>
</ul>
<p>總結：不要追求外在的成功⽽是內在的幸福、不要讓你的過去(像是學經歷)限制你的未來、要有危機意識，不斷學習，了解⾃⼰！</p>
<br>
加油！接下來這條路肯定不輕鬆，別怕，一起克服心理障礙、戰勝心魔吧！]]></content>
      <tags>
        <tag>職涯</tag>
        <tag>side project</tag>
      </tags>
  </entry>
  <entry>
    <title>【職涯路上】63~0，Commencement</title>
    <url>/2022/06/freshman-career-63-0/</url>
    <content><![CDATA[<p>時間過得真是快啊！轉眼間，來到了這系列文的最終章。</p>
<span id="more"></span>

<h2 id="前面廢話一下"><a href="#前面廢話一下" class="headerlink" title="前面廢話一下"></a>前面廢話一下</h2><p>超久沒有認真寫文章了，都快忘記寫文章的感覺，而且 63~0 這個時間跨度也太大，超過了這期間 (100天) 的一半，真的是齁 😂</p>
<p>雖然也還不太確定這篇能寫什麼東西出來，但想說要來個「有始有終」，就算再沒內容，也要有個 ending。</p>
<p>現在的感覺有點掙扎，腦袋不斷發送「快點給我停下來！」的指令給我正在打字的雙手，但心底的某個微弱的聲音卻要我忍著這股掙扎感，咬著牙也要把這篇給生出來。<br>還是會很在意語句通不通順、前後邏輯有沒有連貫之類的事情，今天這篇就暫時拋在腦後吧，不然只會綁手綁腳而已，我對這篇的要求就是有一定數量的文字即可，品質什麼的就暫時先當作沒那回事。</p>
<p>總是要有個<strong>開始</strong>，才會漸入佳境！</p>
<hr>
<h2 id="這系列文意義在哪"><a href="#這系列文意義在哪" class="headerlink" title="這系列文意義在哪"></a>這系列文意義在哪</h2><p>這要從 100 天前的「緣起」來說起。</p>
<p>3/4 禮拜五那天，突然想到說可以來倒數看看離畢業 (6/12 也就是今天) 還剩下幾天，一數發現剛好剩下 100 天！<br>之所以這麼做，是因為我原本很可能有個實習機會，但基於某些原因的考量，我選擇婉拒。<br>因此覺得自己得開始做點什麼，而不是只是原地踏步，希望自己回頭來看那件事的時候，會認為自己所做的決定是值得的！</p>
<p>所以意義？就是讓自己能夠回顧這一切（但系列文的文章數量實在少得可憐，實在是 😂）</p>
<hr>
<h2 id="值得嗎"><a href="#值得嗎" class="headerlink" title="值得嗎"></a>值得嗎</h2><p>好啦，現在是 100 天後的我，正在回顧這一切，對於當初的決定，我覺得如何呢？</p>
<p><strong>「完全值得！」</strong></p>
<p>沒錯，完全值得！</p>
<p>自從 4/1 收到 AppWorks School Software Engineering Campus Program 錄取通知，連假期間參考 School 給的資源學一些程式方面的東西，並在 4/11 去實體空間參加開學典禮，認識了 School 的大家並開啟了學習旅程以後，我發現到自己有越來越喜歡「這一塊」的微妙感覺！</p>
<p>（完了，開始不知道自己在寫什麼東西了，太久沒輸出了⋯⋯）</p>
<p>在 School 學習剛好也九週了，好快哦，剩下四週而已。<br>不然來簡述一下我這幾週都在 School 做些什麼好了（如果我還記得的話）</p>
<hr>
<h2 id="School"><a href="#School" class="headerlink" title="School"></a>School</h2><h3 id="Week-1"><a href="#Week-1" class="headerlink" title="Week 1"></a>Week 1</h3><ul>
<li>搞定 EC2 環境，裝好 Node.js、MySQL、Nginx<ul>
<li><strong><a href="https://kanido386.github.io/2022/04/free-aws-nodejs-web-server/" target="_blank">【圖文教學】免費在 AWS 上建一個 Node.js Web Server</a></strong></li>
</ul>
</li>
<li>建電商網站所需的 MySQL 資料庫並用 Express 撰寫商品相關的 API</li>
<li>做一個能夠建立新商品的 Management Page（需要處理到有關照片上傳到 Server 的功能）</li>
<li>將後端部署到 EC2</li>
</ul>
<h3 id="Week-2"><a href="#Week-2" class="headerlink" title="Week 2"></a>Week 2</h3><ul>
<li>弄和使用者 (member system)、訂單相關的資料庫及 API</li>
<li>申請 SSL 憑證，以啟用 HTTPS<ul>
<li><strong><a href="https://kanido386.github.io/2022/04/ssl-for-free/" target="_blank">用 SSL For Free 免費申請 SSL 憑證</a></strong></li>
</ul>
</li>
<li>串接 TapPay 金流服務</li>
<li>Authentication</li>
<li>體驗 Code Review</li>
</ul>
<h3 id="Week-3"><a href="#Week-3" class="headerlink" title="Week 3"></a>Week 3</h3><ul>
<li>學習 React</li>
<li>設置 linter 及 prettier</li>
<li>用 create-react-app 及 react-router、styled-components 做電商網站的首頁</li>
<li>部署到 EC2：前端 build 出來以後，放進後端的 folder 裡，做點設定即可透過後端進到前端頁面</li>
</ul>
<h3 id="Week-4"><a href="#Week-4" class="headerlink" title="Week 4"></a>Week 4</h3><ul>
<li>繼續做電商網站的商品、購物車、結帳頁面（串 TapPay）</li>
<li>使用 localStorage 存購物車的商品資訊</li>
<li>前端能 call 前兩週做的後端 API 來拿到它想要的資料</li>
<li>分組黑客松開跑！</li>
</ul>
<h3 id="Week-5"><a href="#Week-5" class="headerlink" title="Week 5"></a>Week 5</h3><ul>
<li>黑客松提案</li>
<li>專注在黑客松開發上：在範例的電商網站 code 上加進新的功能</li>
<li>嘗試結合 LINE Bot</li>
</ul>
<h3 id="Week-6"><a href="#Week-6" class="headerlink" title="Week 6"></a>Week 6</h3><ul>
<li>黑客松 Demo</li>
<li>分組深入一些特定主題<ul>
<li>Load balancing + Auto Scaling</li>
<li>Message Queue</li>
<li>GraphQL</li>
<li>NoSQL Database + Database Management</li>
<li>Monitoring</li>
</ul>
</li>
<li>上台 share 成果給大家<ul>
<li><strong><a href="https://kanido386.github.io/2022/05/nosql-introduction/" target="_blank">【技術筆記】NoSQL、Data Replica、Sharding</a></strong></li>
</ul>
</li>
</ul>
<h3 id="Week-7"><a href="#Week-7" class="headerlink" title="Week 7"></a>Week 7</h3><ul>
<li>優化前四週開發的電商網站</li>
<li>Cybersecurity Workshop</li>
<li>(Talks) Coding Interview</li>
<li>QA Workshop</li>
<li>企業期中考 (很特別的考試)</li>
</ul>
<h3 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h3><ul>
<li>Data Engineering Workshop</li>
<li>DevOps Workshop</li>
<li>串一些技術來做一個小 project（主要是研究 Kubernetes）<ul>
<li><strong><a href="https://kanido386.github.io/2022/06/youbike-helper/" target="_blank">用 Docker 和 Kubernetes 部署一個使用到 RabbitMQ 及 MongoDB 的 Express App</a></strong></li>
</ul>
</li>
</ul>
<h3 id="Week-8"><a href="#Week-8" class="headerlink" title="Week 8"></a>Week 8</h3><ul>
<li>業界分享 - 如何成為世界級的軟體工程師</li>
<li>Agile Workshop</li>
<li>Docker Workshop：最後用 Docker 把電商網站 project 給包起來（含 Nginx、Express Server、MySQL Database）</li>
<li>構思接下來三週的個人專案＆上台分享提案</li>
<li>遠距發題的 Midterm：based on 原本的電商網站 project，做一個統整訂單資料並繪製成圖表來呈現的 dashboard，當有新訂單進來時，使用 socket.io 自動刷新 dashboard 頁面</li>
</ul>
<hr>
<h2 id="繼續前進"><a href="#繼續前進" class="headerlink" title="繼續前進"></a>繼續前進</h2><p>探索自我的職涯之路，不會因為系列文完結而結束！</p>
<p>文章也會繼續寫，不然久久沒寫，都不知道該怎麼寫了 😂</p>
]]></content>
  </entry>
  <entry>
    <title>【職涯路上】73~64</title>
    <url>/2022/04/freshman-career-73-64/</url>
    <content><![CDATA[<p>這幾天有種「帕金森定律」的感覺🤔</p>
<span id="more"></span>

<h2 id="這次沒什麼內容"><a href="#這次沒什麼內容" class="headerlink" title="這次沒什麼內容"></a>這次沒什麼內容</h2><p>說實在話，感覺這幾天蠻不踏實的，有點不知道自己在做什麼⋯⋯<br>大概就是：</p>
<ul>
<li>(3/31) 完成和聲學作業六</li>
<li>(4/1) 收到 <a href="https://kanido386.github.io/2022/03/freshman-career-84-77/#3-25-五" target="_blank">AppWorks School Software Engineering Campus Program</a> 錄取通知<ul>
<li>我後面一律簡稱 AWSCP</li>
</ul>
</li>
<li>(4/1) 收到<a href="https://kanido386.github.io/2022/03/freshman-career-92/#奧丁丁集團" target="_blank">奧丁丁</a>面試邀請<ul>
<li>結果我還是沒開始碰 Laravel 😅</li>
</ul>
</li>
<li>(4/2) AWSCP 有提供 Pre-study 學習清單，試著去規劃這幾天該怎麼分配時間學習<ul>
<li>但最後也沒照那個計畫走</li>
</ul>
</li>
<li>(4/2) 完成 AWSCP 前置任務<ul>
<li>跟我「<a href="https://kanido386.github.io/2022/04/free-aws-nodejs-web-server/" target="_blank">【圖文教學】免費在 AWS 上建一個 Node.js Web Server</a>」這篇有關</li>
</ul>
</li>
<li>(4/3~4/9) 學習 AWSCP Pre-study</li>
<li>(4/5~4/9) 準備奧丁丁面試<ul>
<li>覺得自己好像都在原地踏步😢</li>
</ul>
</li>
<li>(4/7) 完成圖形識別 Homework 2</li>
</ul>
<h2 id="再說點什麼"><a href="#再說點什麼" class="headerlink" title="再說點什麼"></a>再說點什麼</h2><p>準備迎接人生第一場正式面試，那焦慮感還蠻不好惹的xD<br>有嘗試要練習怎麼回答可能會被問到的問題，但就⋯⋯</p>
<p>加加油吧！</p>
]]></content>
  </entry>
  <entry>
    <title>【職涯路上】84~77</title>
    <url>/2022/03/freshman-career-84-77/</url>
    <content><![CDATA[<p>簡單回顧一下這週都做了些什麼。</p>
<span id="more"></span>

<h2 id="3-20-日"><a href="#3-20-日" class="headerlink" title="3/20 (日)"></a>3/20 (日)</h2><p>那天陷入焦慮情緒當中，有種「好像永遠都無法再提起勁一樣」的無力感，想一直前進，但感覺不太到那種 fu，腦袋整個一團混亂⋯⋯</p>
<p>最後那天做了「電腦動畫與特效 HW1」3 小時 41 分鐘又 8 秒，雖然心情很糟，但還是有不錯的進度。</p>
<p>那個時候很希望能從那心之牢籠當中逃脫出來，關掉筆電、平板、手機，讓自己靜一靜。</p>
<p>沒想到，晚上 10. 多，突然起了一個念頭，不知怎地，原本打算幾天後再去申請的 <a href="https://school.appworks.tw/software-engineering-campus-program/">AppWorks School Software Engineering Campus Program</a>，突然打算那個 moment 去做那件事，沒多想什麼，也沒去管今天的狀態是好是壞，就去行動，也很神奇地，非常高效地填完表單問題，還錄了個自我介紹影片，雖然搞到快 1.，但真的很感謝自己願意把負面情緒拋在腦後，起身去行動！</p>
<p>就不要想那麼多，真的做就對了，讓心思 focus 在那件事情上。</p>
<p>這邊有個小心得，之所以能高效完成表單，是因為之前累積了一些關於我自己的相關資料，像是準備面試的筆記、<a href="https://kanido386.github.io/about/" target="_blank">關於我</a>的頁面、申請其他東西填的內容，就都可以拿來參考寫進去，反正都是自己寫的嘛！拿來用有什麼不對嗎xD 這道理就跟我之前<a href="https://kanido386.github.io/2022/03/freshman-career-100-97/#豁然開朗" target="_blank">寫過的道理</a>一樣啊！</p>
<p>所以說，路真的不會白走啊！</p>
<h2 id="3-21-一"><a href="#3-21-一" class="headerlink" title="3/21 (一)"></a>3/21 (一)</h2><p>沒做啥，早上搭車，下午旁聽影像合成，傍晚到系電腦教室測試那個「電腦動畫與特效 HW1」然後交出去，晚上打球。</p>
<h2 id="3-22-二"><a href="#3-22-二" class="headerlink" title="3/22 (二)"></a>3/22 (二)</h2><p>早上起來閱讀「跟著柴鼠學FQ」，希望自己能多一點投資理財的意識。</p>
<p>下午遠端上電腦動畫與特效都在做其他事xD 接著上和聲學。</p>
<p>晚上去圖書館寫和聲學作業，也嘗試參考「<a href="https://www.youtube.com/watch?v=MsbzY6QbRVA">讓我拿到FAANG面試的履歷</a>」這個影片做英文履歷，但很不順利，主要是因為「覺得自己沒資格列出我做過那些事情」的心理作祟吧？還有「具體把每個經歷用幾行英文句子寫出來」對我來說有點挑戰吧？OK的，之後可以再回來弄～</p>
<h2 id="3-23-三"><a href="#3-23-三" class="headerlink" title="3/23 (三)"></a>3/23 (三)</h2><p>早上一樣有專心聽講「圖形識別」哦！</p>
<p>下午和晚上去圖書館做事，解決了和聲學作業～<br>難得第二天就完成交出去，以為成績會很差，沒想到拿到了自己的新高 A-！</p>
<p>英文履歷的部分，因為那個時候效率不佳，就⋯⋯<br>又不像和聲學作業，可以隨便寫一寫交出去，要我做一份垃圾履歷，我還寧願不做呢，所以後來就沒繼續弄了。</p>
<h2 id="3-24-四"><a href="#3-24-四" class="headerlink" title="3/24 (四)"></a>3/24 (四)</h2><p>今天參加了 LINE Developers 舉辦的 Meetup，原本以為可以免費參加，沒想到⋯⋯ 在公館圓環沒兩段式左轉，被開了 600 元的罰單，剛剛還特地查了一下，原來「台北市取締未兩段式左轉公館圓環5213件連3年居冠」，沒辦法⋯⋯</p>
<p>至於那場活動我有什麼感悟，詳見這一篇「<a href="https://kanido386.github.io/2022/03/line-developers-meetup-16/" target="_blank">【心得】LINE Developers Meetup #16</a>」</p>
<h2 id="3-25-五"><a href="#3-25-五" class="headerlink" title="3/25 (五)"></a>3/25 (五)</h2><p>因為禮拜日填的申請表單有獲得青睞，今天去 AppWorks School 面談。</p>
<p>面完後，對於自己的表現，我還蠻失落的⋯⋯</p>
<p>一整場完整呈現出我口語表達能力極差的樣貌，而當兩位面試官越是提到這一點，我越是往那方面(口語表達能力極差所該展現出來的感覺)去表現⋯⋯</p>
<p>就連自己也不知道自己在講什麼。</p>
<p>更誇張的是，我忘記準備要提問的問題了，居然還問面試官「其他面試者都怎麼問」，真的是愚蠢到家⋯⋯</p>
<p>甚至面試官問我最後一題：</p>
<blockquote>
<p>如果你今天在外面拿到 offer，又同時錄取了這個計畫，你會怎麼做選擇？</p>
</blockquote>
<p>我居然回答，可是我覺得我目前在外面拿到 offer 的「機率」很低欸，就整個呈現出我對自己很沒信心的感覺⋯⋯</p>
<p>後來想想，我應該要這麼回答：</p>
<blockquote>
<p>如果我在外面拿到了 offer，我當然就會去，畢竟加入這個計畫的最終目的就是要找到一份理想的工作，上了的話，這個目的就達成了！</p>
</blockquote>
<p>所以深刻體會到自己真該好好提升口語表達能力！！！</p>
<p>下禮拜五之前結果會出來，當然還是很希望能夠錄取，但真的不敢抱持什麼太大的希望。</p>
<p>那天面談結束後的失落感其實還蠻大的，但不要就此氣餒，找到了可以改進的地方，試著去修正，多加練習口語表達，即使最後真的沒被錄取也要做點 side project 沈浸在寫 code 的感覺，而不是只是嘴巴上說說，社群也可以多跑，甚至可以嘗試上台做分享！</p>
<p>我那天寫給自己：</p>
<blockquote>
<p>職涯之路不會因為這次的錄取與否而停止，即使跌倒，我也會爬起來繼續前進，加油！</p>
</blockquote>
<h2 id="3-26-六"><a href="#3-26-六" class="headerlink" title="3/26 (六)"></a>3/26 (六)</h2><p>今天去台北小巨蛋逛 Yourator 主辦的數位職涯博覽會，詳見「<a href="https://kanido386.github.io/2022/03/2022-yourator-career-fair/" target="_blank">【心得】2022 Yourator 數位職涯博覽會</a>」</p>
<p>逛到最後的時候超級累，背著不輕的背包到處趴趴走，還很不像我地到處找別人開口講話，這對我目前的腦袋瓜來說 loading 很重啊xD</p>
<p>整體來說挺值得的！</p>
<h2 id="3-27-日"><a href="#3-27-日" class="headerlink" title="3/27 (日)"></a>3/27 (日)</h2><p>幾乎都在寫部落格文章😅</p>
<h2 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h2><p>這週還挺充實的，讚讚～</p>
<p>所以真的不要覺得一天很廢，就會永遠廢下去，總是會有起伏的嘛！</p>
]]></content>
  </entry>
  <entry>
    <title>【職涯路上】76~74</title>
    <url>/2022/03/freshman-career-76-74/</url>
    <content><![CDATA[<p>連假前來個小回顧。</p>
<span id="more"></span>

<h2 id="3-28-一"><a href="#3-28-一" class="headerlink" title="3/28 (一)"></a>3/28 (一)</h2><p>早上搭車的時候，邊收看「<a href="https://youtu.be/lHGYdq1X9dU">2022 WorkLife Opening 未來工作生活大解構</a>」邊做點筆記，收穫滿滿，對工作及生活有著大開眼界般的見解！</p>
<h3 id="學-Photoshop-做筆記"><a href="#學-Photoshop-做筆記" class="headerlink" title="學 Photoshop 做筆記"></a>學 Photoshop 做筆記</h3><p>下午旁聽影像合成課，學到了 Photoshop 去背、修臉的技巧，我也是邊上課邊做筆記，這幫助我之後再看的時候能快速回憶起來。</p>
<p>來放其中一段筆記當作例子：</p>
<p><strong>主角很多細節的去背</strong></p>
<p>（before）</p>
<p><img src="1.jpg"></p>
<ol>
<li>右下角在圖層旁邊的「色版」→ 選一個顏色的色版複製一個 → 反白也就是選取那個色版（其他的不能動到，不然完成都開起來後顏色會變）</li>
<li>影像 → 調整 → 亮度/對比 → 「對比」調到最高，這樣等等會更好抓髮絲的紋路</li>
<li>這樣等等會更好塗色不會超出範圍：背景單純的圖可先用「魔術棒」點選背景 → 選取 → 反轉</li>
<li>塗黑主角：前景色調成黑色 → 筆刷工具 → 把要的人物非黑的部分塗黑（可調大筆刷更快狠準）有沒塗到的部分再放大去一一塗</li>
</ol>
<p>（中間產物）</p>
<p><img src="2.png"></p>
<ol start="5">
<li>呈現剪影效果：影像 → 調整 → 色階 → 黑白都往中間拉 → 按確定</li>
<li>選取人物：魔術棒工具點背景(不要勾連續) → 選取 → 反轉</li>
<li>色版 → 打開 RGB → 圖層 → 增加遮色片 → 剛剛複製出來的色版可以丟掉了</li>
</ol>
<p>（after）</p>
<p><img src="3.png"></p>
<p>圖看起來有些白邊，怎麼修？我有記筆記，但礙於篇幅(?)，可能就不先放上來了😅</p>
<h3 id="後來勒"><a href="#後來勒" class="headerlink" title="後來勒"></a>後來勒</h3><p>上完課就去圖書館寫「圖形識別 Homework 2」，效率奇佳！（做事前沒想那麼多，開始做就對了，想太多反而會成為阻礙）</p>
<p>吃晚餐的空檔，拜讀了何則文老師的「<a href="https://www.linkedin.com/posts/wherder_nhlniwniwjcijfcjcahaynjliljlhskqfiljjpvllyjwgnha-activity-6909755387239960576-PpNa?utm_source=linkedin_share&utm_medium=android_app">從對目標受眾的理解來建設EVP</a>」，剛好跟早上搭車看的影片有關聯，覺得還蠻有趣的xD</p>
<p>晚上決定跟著「<a href="https://youtu.be/3xrko3GpYoU">🔴 Let’s build Spotify 2.0 with NEXT.JS 12.0! (Middleware, Spotify API, Tailwind, NextAuth, Recoil)</a>」這個影片來學怎麼 clone Spotify，影片有4小時，最近會慢慢跟完。<br>雖然常聽到說跟著影片模仿學比較沒有效果(?)，但我想說透過看影片模仿的方式，來擴增我的資料庫或者說是技能包。（「<a href="https://github.com/kanido386/tutorial-spotify-clone">tutorial-spotify-clone</a>」我會放在 GitHub 上，目前我 GitHub 實在太空😅）</p>
<hr>
<h2 id="3-29-二"><a href="#3-29-二" class="headerlink" title="3/29 (二)"></a>3/29 (二)</h2><p>早上讀「跟著柴鼠學FQ」，結束前用「自由書寫」的方式來記錄體悟，以免讀完整本書以後，很多東西都忘得一乾二淨了。（總是要留點什麼才好，不然有點可惜）</p>
<p>因為昨天的教學影片用的是 Next.js，讓我間接找到了 Next.js 官方的 <a href="https://nextjs.org/learn/foundations/about-nextjs">Learn Next.js</a>，意外發現讀起來好讀又有趣之外，也包含很多跳脫 Next.js 的網頁開發相關知識，覺得挖到寶，之後會繼續用零碎時間把它啃完！<br>心裡多少會有個聲音：「只是讀，沒跟著操作有什麼用？」啊就讀了以後，真的有學到新東西啊，實作的話，可以等跟著影片 clone Spoitfy 的時候來熟悉，而且感覺在實作之前先懂它的邏輯，會更知道自己在做什麼。（哎呀，人生沒有標準答案啊！相信自己的直覺吧！）</p>
<p>接著就是上電腦動畫與特效＆和聲學。（流水帳xD）</p>
<p>吃完晚餐寫和聲學作業，然後打球跟別人三打三的時候全身冒煙，都懷疑自己是不是巨人了😂</p>
<hr>
<h2 id="3-30-三"><a href="#3-30-三" class="headerlink" title="3/30 (三)"></a>3/30 (三)</h2><p>早上上圖形識別。</p>
<h3 id="作品集可以怎樣優化"><a href="#作品集可以怎樣優化" class="headerlink" title="作品集可以怎樣優化"></a>作品集可以怎樣優化</h3><p>午餐配「<a href="https://www.youtube.com/watch?v=SvtSza13sk8">Portfolio Projects that Get you Hired</a>」這個影片，頻道主秀出 stand-out-to-him 的作品集頁面。我那個時候忘記做點筆記，但還有點印象：</p>
<blockquote>
<ul>
<li>招募者可沒空 register 去試你的 APP，何不做個 demo 的 GIF 來展現呢？</li>
<li>可以讓人看出來你使用了哪些核心功能或技術，像是 authentication、database CRUD、串接第三方 API</li>
<li>可以用條列的方式來簡述你做了什麼，招募者可沒那麼多時間讀故事啊</li>
</ul>
</blockquote>
<p>好像還有一些不錯的建議，真的有點可惜沒記下來😅</p>
<h3 id="後續"><a href="#後續" class="headerlink" title="後續"></a>後續</h3><p>零碎時間，不管是排隊買午餐還是搭車，都在讀 <a href="https://nextjs.org/learn/foundations/about-nextjs">Learn Next.js</a>，沒辦法，它太讚了xD</p>
<p>下午搭車前去測 Inbody，想了解自己的身體狀況！（學校資源真的要好好運用啊）</p>
<p>晚上遠端幫朋友解決 Windows 上面 Python 環境設定的問題以及一點小教學，才知道有「<a href="https://www.teamviewer.com/tw/">TeamViewer</a>」這麼方便的遠端工具！（也才又找回小時候喜歡教同學的感覺）</p>
<br>
職涯路上，那些看似平凡無奇的事物，仔細一看，其實還挺有意思的😎]]></content>
  </entry>
  <entry>
    <title>【職涯路上】89~86，再廢也不要停止反思</title>
    <url>/2022/03/freshman-career-89-86/</url>
    <content><![CDATA[<p>跟上禮拜一樣，又是二三四五覺得自己好像都沒在做什麼⋯⋯<br>嗯 來簡單盤點一下好了🤔</p>
<span id="more"></span>

<h2 id="前面廢話"><a href="#前面廢話" class="headerlink" title="前面廢話"></a>前面廢話</h2><p>這難道是一個輪迴嗎？怎麼又是二三四五⋯⋯</p>
<p>就感覺，咦，一個禮拜又過去了？而我，好像還停留在原點似的，沒什麼進展。</p>
<p>是很不想打這一篇，沒什麼內容，也沒什麼值得分享的，甚至會讓人覺得我怎麼那麼廢，但想說，這樣才能最真實地呈現「職涯路上」的歷程，時好時壞，有起也有落。</p>
<p>即便如此，我希望我能堅持下去，無論是職涯探索路上，讓自己越來越清楚自己要的人生是什麼，抑或是這系列文，讓未來回顧的時候會心一笑之外，也能讓自己記得，這一路走來經歷了哪些，而我又是怎麼去面對的。</p>
<h2 id="四天共通"><a href="#四天共通" class="headerlink" title="四天共通"></a>四天共通</h2><p>先說這四天一樣都沒做 side project，這讓我不禁懷疑，自己到底什麼時候才肯行動呢？</p>
<p>完美主義真的不能拿來當藉口，或許只是「個人作業系統」上需要做點什麼，讓「做 side project」這個行動能夠在「個人流程」當中更容易進行。</p>
<p>這麼說頗抽象，簡單來說，就是要想個適合自己的好辦法去規劃啊！</p>
<p>說到規劃，等等也會提到我最近嘗試的「規劃」方法（但還不穩定）</p>
<h2 id="3-15-禮拜二"><a href="#3-15-禮拜二" class="headerlink" title="3/15 禮拜二"></a>3/15 禮拜二</h2><p>這天最好的決定，就是「複習圖形識別講義」！</p>
<p>之前上圖形識別的時候都在混，老師上他的，我在弄自己的東西，頂多偶爾停下來聽一下老師在講什麼觀念，但其實兩邊很難兼顧到，不斷切換注意力，讓自己很快就累了⋯⋯</p>
<p>所以，那天就突然想說，我隔天上課來試著專心聽課看看好了，說不定會有意想不到的收穫呢。</p>
<p>但已經落掉不少進度了欸，怎麼辦？就複習啊。</p>
<p>於是乎，我就花了 1 小時 6 分鐘又 39 秒的時間做這件事，發現，其實也沒花多少時間啊，就看你肯不肯做而已！（我習慣邊做麻煩(?)一直讓我想拖延的事情邊計時，這樣自己會比較有動力xD）</p>
<p>雖然讀完講義還不是到很懂，但至少更明白裡面的一些觀念了。<br><br></p>
<p>至於和聲學作業，我後來打算不一定得當天解決，因為它有點創作的味道，還蠻適合穿插在麻煩(?)事的中間，當作一種能讓腦袋休息的活動。</p>
<p>而我本週的作業也在昨天 (禮拜四) 完成，也發覺自己越來越上手，也越來越能感受到當中有趣和實用的地方，老師還說我進步許多，開心！<br><br></p>
<p>哦對了，那天我還讀了「<a href="https://blog.104.com.tw/104bravo-badminton-olympic-gold-medal/">只求盡力，不被掌聲迷惑｜李洋｜104掌聲</a>」這篇文章，我很喜歡裡面一句話的人生態度：</p>
<blockquote>
<p>「反正大不了考零分、大不了輸球，我就爛、我就做不到。但如果今天被我拚到，那就是賺到。」</p>
</blockquote>
<p>允許自己偶爾廢，沒關係，廢完再出發，盡力而為！</p>
<h2 id="3-16-禮拜三"><a href="#3-16-禮拜三" class="headerlink" title="3/16 禮拜三"></a>3/16 禮拜三</h2><p>早上認真聽課「圖形識別」，我甚至還認真地做筆記，感覺有學到東西，甚至還幫助到我寫「電腦動畫與特效」的作業，覺得值得！很感謝前一天的自己願意去複習講義，讓自己回到正軌。<br><br></p>
<p>那天我還開始嘗試了前面提到的「規劃」。</p>
<p>我怎麼「規劃」？</p>
<ul>
<li>（60分鐘）電腦動畫與特效 HW1</li>
<li>（30分鐘）和聲學作業四</li>
<li>（20分鐘）圖形識別 Homework 1</li>
<li>（15分鐘）優化杯麵</li>
<li>（10分鐘）到 CakeResume 上面挖工作</li>
</ul>
<p>需要花不少時間持續進行的任務，我就先把它們列出來，然後寫下當天我「至少」要花多少時間做那件事情，也就是最低門檻，當然越久越好。</p>
<p>那天結束後：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> （60分鐘 → 78）電腦動畫與特效 HW1</li>
<li><input checked="" disabled="" type="checkbox"> （30分鐘 → 32）和聲學作業四</li>
<li><input checked="" disabled="" type="checkbox"> （20分鐘 → 25）圖形識別 Homework 1</li>
<li><input checked="" disabled="" type="checkbox"> （15分鐘 → 16）優化杯麵</li>
<li><input checked="" disabled="" type="checkbox"> （10分鐘 → 16）到 CakeResume 上面挖工作</li>
</ul>
<p>箭頭後面的數字是我實際「投入」了多少時間。</p>
<p>這麼做有個好處，就是可以讓自己不會再找藉口說因為「沒時間」而沒辦法做某件事，那是因為自己沒分配給它啊！</p>
<p>而每項分配的時間真的不用多，多了反而讓自己很有壓力，首要目的是能夠讓自己行動起來。<br><br></p>
<p>原本以為如果接下來每一天都這樣下去，不就順利大吉了嗎？就一切都在掌握之中，事情都往好的方向發展。</p>
<p>然而，直到今天 (禮拜五)，才戳破了我這個美好的想法。<br><br></p>
<p>完了，又開始覺得自己語無倫次了⋯⋯ 不行，接下來長話短說好了，頗累⋯⋯</p>
<h2 id="3-17-禮拜四"><a href="#3-17-禮拜四" class="headerlink" title="3/17 禮拜四"></a>3/17 禮拜四</h2><p>「規劃」的部分很順利，都有完成「規劃」裡面列出來的事情 (我把它想成是種子)，投入的時間 (我把它想成是施肥) 也比預期的還要多。<br><br></p>
<p>早上起床吃早餐配「<a href="https://www.youtube.com/watch?v=07hLrBM2T50">Fiona Lin：給沒有夢想的人！邊走邊想職涯探險指南｜職涯實驗室 Career Design Lab</a>」這個分享，做了一點筆記：</p>
<ul>
<li>沒有一個明確的目標？那就盡可能善用現有的資源去大量探索吧！沒目標不該是停滯下來的理由</li>
<li>關於求職：研究公司的 job description，它風格怎麼寫，就盡可能地用相似的「語言」去闡述自己（像是 <a href="https://careers.kkcompany.com/kkbox/f75bcd50-12c9-49a3-9db7-f87442538a1e">KKBOX Backend Engineer</a>「帶來價值」）</li>
<li>工作的時候，把自己的思維拉到老闆等級，而非停留在最底層不知道全局的狀態，這樣講出來、做出來的東西才會具有不一樣的視野（簡單來說，就是要知道自己做這個是為了什麼）把自己當成是老闆的顧問，為老闆解決痛點，也可以試著想，如果我是老闆 (或是 leader)，我可以怎麼做</li>
<li>不要去追逐別人的成功學，你要設計好屬於自己的能量(?)系統<br></li>
</ul>
<p>也參考「<a href="https://bulldogjob.com/news/449-how-to-write-a-good-readme-for-your-github-project">How to write a good README for your GitHub project?</a>」這篇文做了一個<a href="https://github.com/kanido386/my-readme-template">給自己用的 README 模板</a>（之後會不斷優化），協助日後能更好地呈現 side project！<br><br></p>
<p>還聽了「<a href="https://www.accupass.com/event/2202240549396412264380">玩出創新人才力｜以遊戲化創業開闢work-life平衡新解方</a>」、「<a href="https://www.youtube.com/watch?v=BbpAdk0F8Rk">【數位職涯博覽會】行前準備工作坊｜台灣青年職涯創新協會</a>」這兩場線上講座，尤其後面那一場，特別適合現階段在職涯路上探索的你我收看呢（我還做了不少筆記xD）</p>
<h2 id="3-18-禮拜五"><a href="#3-18-禮拜五" class="headerlink" title="3/18 禮拜五"></a>3/18 禮拜五</h2><ul>
<li>（30分鐘 → 0）撰寫求職信模板</li>
<li>（60分鐘 → 18）圖形識別 Homework 1</li>
<li>（60分鐘 → 0）電腦動畫與特效 HW1</li>
<li>（20分鐘 → 0）「my-readme-template」→ 做 Side Project</li>
<li>（10分鐘 → 0）學習 PHP</li>
</ul>
<p>思考原因，一來是因為昨天太晚睡 (2.) 導致今天晚起 (10.) 而 delay 到時間 (完美主義作祟)，二來是因為這樣的睡眠時間造成今天精神狀態不如以往，然後又看到有任務至少要做「60分鐘」，讓自己有種「什麼事都不想做」的感覺，因為要「60分鐘」好麻煩啊⋯⋯</p>
<p>當然主要是因為精神沒很好啦xD</p>
<p>明天可能暫時就不先特別規劃時間，隨意想做什麼就做什麼好了！（有時候這樣，反而讓自己更容易行動起來，因為不管做了什麼都是多做的，有種賺到(?)或是覺得自己好勤奮的感覺）<br><br></p>
<p>今天最有收穫的，就是去北科大聽了 AppWorks School 的「<a href="https://www.accupass.com/event/2203110650191159249834">資訊新芽人才培訓計畫說明會</a>」，這是我昨天隨意滑一下臉書滑到的，感覺挺不錯，就報名參加了。</p>
<p>原本以為只會介紹計畫內容，沒想到還分享了不少資訊職涯方面的實用建議，超讚的！</p>
<p>認真考慮申請加入這個計畫 (說是社群感覺更為貼切)，免費就算了，還那麼多資源可以運用，不就很適合現階段的我去探索這方面嗎？</p>
<h2 id="資訊職涯實用建議"><a href="#資訊職涯實用建議" class="headerlink" title="資訊職涯實用建議"></a>資訊職涯實用建議</h2><p>簡單在這邊分享一下好了：</p>
<p>業界期待你不僅僅會解決問題，而是養成規劃好解法的習慣，除了在開發過程中多去釐清需求、留意 coding style、遵照開發流程之外，遇到困難時，也會去細看相關部分的 source code，而不是只會在 Stack Overflow 上找 code 以後直接 copy and paste，秉持著追根究底的探索精神！</p>
<p>實際進到團隊開發以後，不僅要熟悉開發流程 (像是敏捷開發)、工具，也要懂得去做跨部門溝通。</p>
<p>最重要的是，要知道自己為何而選，在進入職場之前，多做工作領域方面的探索 (很多HR都覺得很重要)，並展現出主動積極與工作穩定度，遇到困難時，主動回報以及尋求協助。</p>
<p>我們生在一個複雜多變的世界 (VUCA時代)，正面臨著「過去經驗不再容易套用」、「當下容易做錯決定甚至難以做決定」、「到處都是機會也到處都沒機會」的情況，沒有所謂的標準答案，而是要自己去找尋答案！從發現問題到解決問題，中間的思路是最為重要的。</p>
<p>那麼我們該如何因應呢？持續學習、保持靈活、懂得團隊協作。</p>
<h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>哎呀，人生就是不斷在做選擇和嘗試啊，永遠都不會知道如果做了這個選擇而不是那個會怎麼樣。</p>
<p>所以就相信自己的選擇吧！</p>
<p>不管最後結果是好是壞，都比因為怕做錯選擇而不採取任何行動好。</p>
<p>沒有標準答案，沒有絕對的對錯啦！</p>
<br>
<br>
話說，明天又是新的一天了呢😂]]></content>
  </entry>
  <entry>
    <title>【職涯路上】91~90，越挫越勇！</title>
    <url>/2022/03/freshman-career-91-90/</url>
    <content><![CDATA[<p>這兩天花了 8 小時 55 分鐘又 48 秒的「專注時間」在弄電腦動畫與特效的作業，有點心得！</p>
<span id="more"></span>

<h2 id="前面廢話"><a href="#前面廢話" class="headerlink" title="前面廢話"></a>前面廢話</h2><p>因為這個作業的關係，我預期我這兩天應該「沒辦法」弄 side project 或是其他跟職涯有關的事情，果真，在正式開始寫作業 code 之前，我就花了非常多時間在「讓我的 mac 能順利跑起來作業程式」這件事情上⋯⋯</p>
<p>原本以為只需要煩惱怎麼寫 code 而已，還真沒想到說還得處理寫 code 之前的「讓程式跑起來」，加上又很難分點心思在職涯方面，覺得自己怎麼又沒新進度，那整個過程實在是非常挫折和煎熬。</p>
<p>然而，現在回頭來看 (雖然也才最近而已xD)，我覺得這個挑戰還挺不錯的，讓我有了一點體悟，或許，這份體悟也能夠對我的職涯路上有所幫助呢！</p>
<h2 id="一開始"><a href="#一開始" class="headerlink" title="一開始"></a>一開始</h2><p>之前助教就有說過用 mac 寫作業會很麻煩，所以我就決定去系上的電腦教室寫作業。</p>
<p>我們作業有討論區，開始寫之前，好奇點開來看，咦，有人發問「<strong>Mac版本不支援此專案類型</strong>」欸！</p>
<p>根據裡面的討論，加上那位同學後來也沒繼續追問下去，應該是解決了，感覺 mac 好像只要照 <code>README.md</code> 裡面的指令打一打就可以用 <code>cmake</code> 來 build 了🤔</p>
<p>於是乎，我跟著打指令，沒想到⋯⋯</p>
<p><img src="1.png"></p>
<p>噴出了錯誤，而且上面居然寫 <code>introduced in macOS 10.15</code>！</p>
<p>完蛋，我 macOS 的版本是 10.14.6，但我不想更新啊😂</p>
<p>因此，我就鼓起勇氣 (怕被笑這什麼笨問題的心理作祟)，在討論區發問「<strong>macOS 10.15 以下(不含) 的版本是否真的得更新作業系統才能做作業</strong>」，問助教難道只能更新而不能靠其他方法解決嗎？</p>
<p>真希望助教能給出直接明確又能順利解決的解方啊！（錯誤的心理xD）</p>
<h2 id="似乎有點希望"><a href="#似乎有點希望" class="headerlink" title="似乎有點希望"></a>似乎有點希望</h2><p>助教回覆說，因為 <code>filesystem</code> 是 C++17 的東西，可能是編譯器沒支援。</p>
<p>建議我可以在 cmake 的指令後方加上<br><code>-DCMAKE_C_COMPILER=YOUR_GCC_PATH -DCMAKE_CXX_COMPILER=YOUR_G++_PATH</code><br>「<strong>或是去改一下找 file path 的 code 也可以</strong>」。</p>
<p>人生真的是不斷在做選擇，有些 maybe 比較好，有些 maybe 比較差，而這次我選擇忽略後者嘗試前者。</p>
<p>從現在的視角來看，二擇一的岔路，我選擇了崎嶇的那一條。（但或許更有收穫也說不定）</p>
<p>後來我指令改成<br><code>cmake -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_CXX_COMPILER=/usr/bin/g++ --build build --config Release --parallel 8</code><br>在輸入到終端機前，我內心想：「這一插曲終於能夠落幕了⋯⋯」</p>
<p><img src="2.png"></p>
<p>嗯嗯很好，看起來 C 和 CXX 編譯器的確都改了！<br>於是又再下下一個指令。</p>
<p><img src="3.png"></p>
<p>哭啊，還是一樣的錯誤⋯⋯ 明明編譯器已經改了啊？</p>
<p>於是我決定再繼續追問下去！甚至還多問「去改一下找 file path 的 code」這個部分，想說多了解，或許也是一條不錯的路🤔</p>
<h2 id="助教高明"><a href="#助教高明" class="headerlink" title="助教高明"></a>助教高明</h2><p>真不愧是助教，看到我的截圖 (上上一張)，立馬點出了問題！</p>
<p>他說：「你還是用Xcode (AppleClang) 阿，看看最上面第一行和第二行的compiler ID。」</p>
<p>我居然沒注意到，可見在程式開發上，有些 message 或 log 不要漏看會比較好。</p>
<p>然後建議我：「MacOS 上的/usr/bin/gcc 預設是指到 Xcode 的 AppleClang。所以假設你是用 gcc 11 你要找找看 gcc-11 在哪裡而不是用 gcc。」</p>
<p>（中間過程真的百般曲折就不贅述了）</p>
<p>後來 <code>brew install gcc@11</code> 裝相關工具，然後找到了 <code>gcc-11</code>、<code>g++-11</code> 分別在哪，又找到了<a href="https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER.html">這篇</a>說可以加上參數，最後，我的指令變成這樣：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake -S . -B build -D CMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=<span class="string">&#x27;/usr/local/bin/gcc-11&#x27;</span> -DCMAKE_CXX_COMPILER=<span class="string">&quot;/usr/local/bin/g++-11;-std=c++17&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="4.png"></p>
<p>看起來好像有設定到 C++17 (?)</p>
<p>然後再下 <code>cmake --build build --config Release --parallel 8</code> 居然冒出了新的錯誤⋯⋯</p>
<p><img src="5.png"></p>
<p>我就在討論區跟助教說：「可能是沒設定好 include library 之類的關係，但我可能就先停在這邊了，謝謝助教的提示！」</p>
<p>不行，我已經花非常多時間在這上頭了，如果今天作業沒 deadline、我沒其他事要做，那繼續研究還 OK，但情況不是這樣啊xD</p>
<p><strong>有時候，選擇放棄，換走另外一條路，也是不錯的選擇！</strong></p>
<h2 id="另闢蹊徑"><a href="#另闢蹊徑" class="headerlink" title="另闢蹊徑"></a>另闢蹊徑</h2><p>我決定嘗試「或是去改一下找 file path 的 code 也可以」的方法了！</p>
<p>問了助教：「剛剛 trace 了一下 code，是不是只有 <code>findPath()</code> 這個 function 會用到 filesystem 的東西呢？如果直接把 assets 的路徑寫死是不是就能解決了呢？」</p>
<p>助教回覆：「是的，不過最好加上個你自己的 define guard」</p>
<p>雖然現在看來輕鬆，但當時依舊忐忑不安，連最重要作業的 code 都還沒開始動工，而我卻還在弄這些五四三？</p>
<p>我當時害怕極了。</p>
<p>（嘗試中）</p>
<p>哇嗚，令我驚訝的是，我居然只花了 16 分 19 秒就搞定了，怎麼跟前面的方法差那麼多啊😂</p>
<p><img src="6.png"></p>
<p>Built 成功！</p>
<p><img src="7.png"></p>
<p>看到畫面上出現球球和布料，豪感動啊啊啊～</p>
<h2 id="回饋"><a href="#回饋" class="headerlink" title="回饋"></a>回饋</h2><p>受到討論區和助教的 carry，怎能不回饋呢？</p>
<p>雖然可能沒有人像我一樣用比較舊的 mac 寫作業，但我還是 share 了我做了哪些改動來讓程式能順利跑起來：</p>
<blockquote>
<p><code>main.cpp</code></p>
<ul>
<li>第 78 行的「 findPath(“sphere.vert”) 」改成「 “/path/to/sphere.vert” 」</li>
<li>第 79、91、92 行也一樣</li>
</ul>
<p><code>utils.h</code></p>
<ul>
<li>註解掉第 2、57 行（分別是 <em>filesystem</em> 標頭檔、findPath 函式）</li>
</ul>
<p><code>utils.cpp</code></p>
<ul>
<li>註解掉第 8~22、67～70 行（findAssetPath、findPath）</li>
</ul>
<p><code>shader.h</code></p>
<ul>
<li>第 18 行的「 std::filesystem::path 」改成「 std::string 」</li>
</ul>
<p><code>shader.cpp</code></p>
<ul>
<li>第 6 行的「 std::filesystem::path 」改成「 std::string 」</li>
<li>註解掉第 8~16 行</li>
<li>第 43 行的「 std::filesystem::path 」改成「 std::string 」</li>
</ul>
<p>改完之後再下最一開始「乾淨」的指令：<br><code>cmake -S . -B build -D CMAKE_BUILD_TYPE=Release</code><br><code>cmake --build build --config Release --parallel 8</code><br>就可以了！</p>
</blockquote>
<p>非常謝謝助教的幫忙！</p>
<h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>解決在 mac 上面跑程式的問題以後，就開始寫作業 code！</p>
<p>對了，和弄作業的第一天相比，第二天的焦慮感淡了不少，我想，應該是因為我有做到下面那張圖闡述的哲理吧？</p>
<p><img src="8.png"></p>
<p>我每次做困難任務的時候，都會幫自己計時，一方面是想讓自己有「進度在前進」的感覺，一方面可以在回顧當天的時候知道自己都做了些什麼，而不是「明明有做事情卻覺得自己都在瞎忙」。</p>
<p>第一天，我完全是用「電腦動畫與特效 HW1」的名義來行動，什麼意思？看第二天就會懂了。</p>
<p>第二天，我不是單純「電腦動畫與特效 HW1」，而是細分成：</p>
<blockquote>
<p>雜項、trace code、再嘗試用 mac 跑跑看、最後回報給助教決定不再追根究底了、<br>試著寫死路徑跑跑看、剛剛的過程整理成小筆記並回報到討論區、<br><code>void Cloth::initializeSpring()</code>、<code>void Cloth::computeSpringForce()</code></p>
</blockquote>
<p>宣告完當下要做哪個細項以後，再開始計時行動。</p>
<p>我覺得這麼做讓我內心輕鬆了不少，我想，是因為這讓我更加明確當下的自己在做什麼吧？而不是整坨糊在一起的雜亂無章感！</p>
<p>或許，之後遇到任何困難事，也可以嘗試這樣去 approach，不要因為它「充滿未知數」而感到懼怕～</p>
<br>
雖然多花了不少時間，但路是不會白走的！<br>
相信這次的體驗，也能成為職涯路上，成長茁壯的重要滋養 🌱]]></content>
  </entry>
  <entry>
    <title>【職涯路上】92，交大就業博覽會</title>
    <url>/2022/03/freshman-career-92/</url>
    <content><![CDATA[<p>趁現在印象還很清楚的時候來記錄一下。</p>
<span id="more"></span>

<h2 id="前面扯淡"><a href="#前面扯淡" class="headerlink" title="前面扯淡"></a>前面扯淡</h2><p>今天交大就業博覽會，對於正在探索人生職涯的我而言，怎能缺席呢？</p>
<p>昨天剛在新北考完駕照，今早就搭車回新竹。之前沒禮拜六南下不知道，原來那麼塞！十點多上客運，十二點左右才到學校⋯⋯ 但那時候想說，隨便啦，反正逛攤位應該不會那麼花時間吧？啊不就拿拿傳單、填填資料、抽抽獎品而已！（但我錯了xD）</p>
<p>我們有分三大區，我幾乎都待在綜合一館B1那一區，因為那一區有我比較感興趣的「資訊軟體」類別的攤位。</p>
<p>廢話不多說，直接進到重點好了。</p>
<hr>
<h2 id="逛攤位"><a href="#逛攤位" class="headerlink" title="逛攤位"></a>逛攤位</h2><p>我等等列出我比較有印象而且有心得的攤位。</p>
<h3 id="開必拓數據"><a href="#開必拓數據" class="headerlink" title="開必拓數據"></a>開必拓數據</h3><p>這是我今天第一間詢問關於後端職缺的企業。</p>
<p>原本還擔心說會不會沒人理我，沒想到當他們的人員聽到我想了解後端工作，立馬請了他們的後端工程師向我說明他們在做什麼。</p>
<p>於是乎，這就成為了我繼續找其他企業詢問有關後端工作的契機，因為那過程真的還蠻有趣的，很多企業都很熱情地介紹他們的工作！</p>
<p>就不要怕去問，真的問就對了，聊聊的過程，也會更清楚知道自己想要什麼、不想要什麼，挺有意思的。</p>
<h3 id="Dcard"><a href="#Dcard" class="headerlink" title="Dcard"></a>Dcard</h3><p>這間我並沒有去詢問職缺相關的問題 (剛去博覽會沒多久還很菜xD 就還不知道在博覽會那邊就是不斷提問就對了)，我反倒是覺得他們的宣傳手法很有意思！</p>
<p>因為在就業博覽會這種類型的活動，逛的人一定會拿到各種大大小小的東西，這個時候，就會非常希望能夠有個大袋子裝東西。</p>
<p>而 Dcard 就很聰明地給參與者很大的手提袋，上頭印著大大的「Dcard」，參與者拿完手提袋以後，一定還會再逛其他攤位嘛，會繼續趴趴走，咦，這樣拿著手提袋到處走的人不就成為 Dcard 的免費移動宣傳嗎？</p>
<p>這都是我的猜測啦，但若真的是這樣的話，實在是太高明了！</p>
<h3 id="奧丁丁集團"><a href="#奧丁丁集團" class="headerlink" title="奧丁丁集團"></a>奧丁丁集團</h3><p>這是今天對我來說最大的收穫吧？直接跟他們的技術長聊了好一段時間。</p>
<p>技術長先向我說明奧丁丁在做什麼，用很有邏輯、條理的方式一一介紹提供的服務。</p>
<p>首先，和台灣許多小農及中小型商家合作成為了「奧丁丁市集」，像是台灣鮮乳地圖、台灣水果地圖，等於是幫它們讓更多人看見，協助推廣的概念。</p>
<p>有了推廣「商品」，怎能少了推廣「體驗」，畢竟那些產業也會有很多的體驗活動，有了「奧丁丁體驗」，整合了國內外上千位嚮導合作、彙整熱門景點、套裝行程等等的資訊。</p>
<p>有了體驗，當然也就能夠有「旅遊」的概念，所以也就有了「奧丁丁揪你 (Journey)」。</p>
<p>有了旅遊，當然也就需要「住宿」，旅宿業者原本就有用其他平台來做這一塊，但「奧丁丁區塊鏈旅宿管理服務」可以幫忙做整合的動作，就可能不必再 1. 自己找人做網站 2. 得自己煩惱要投放到哪些訂房網站 3. 思考管理系統的建置該怎麼解決。</p>
<p>有訂房，那也就需要「支付」，所以也有「奧丁丁支付服務」。</p>
<p>當然還有其他服務，這一整個，儼然形成了一個生態圈，也的確是他們正在用心經營的！</p>
<p>除了向我介紹他們在做什麼，我也問了技術長會希望面試者能夠具備什麼樣的能力。</p>
<p>他說，他看重的是面試者在做 side project 的過程當中，是如何思考他要什麼、遇到什麼困難、怎麼解決問題這類的軟實力，技術倒是其次，可以靠學習來彌補！因為畢竟到業界工作就是要幫企業解決問題，需要具備獨立思考能力，遇到挑戰時，能夠去思考該怎麼解決。</p>
<p>我最喜歡這間企業後端工程師職缺的部分，是他們在開發的時候是會了解公司的整體產品，完了開始有點語無倫次了，我想表達的是，在你開發前，你是會了解公司所有產品到底是在做什麼並參與到，而不是可能只是一個小功能而已。尤其所有服務又有種生態系的感覺，我還蠻喜歡這種「大整合」的概念，像 LINE 一樣xD（music、pay、tv、bank…）若又能參與開發，我會覺得很有意義！</p>
<p>他們主要使用的技術是 PHP，跟 KKBOX 的 backend engineer 一樣，或許該是學習 Laravel 的好契機了xD</p>
<h3 id="Appier"><a href="#Appier" class="headerlink" title="Appier"></a>Appier</h3><p>跟我介紹 backend 的人建議，面試的時候可做簡報輔助，把作品集整理起來，簡報上頭可以清楚秀出架構之類的東西，好讓面試官了解，也幫助自己更能從容應答。</p>
<p>他還提到一個有趣的點，如果被問了你覺得簡單的問題，可以反問面試官相關但更難的問題，看對方實力到哪，然後不斷來回循環 (當然自己實力要夠不然就糗啦)，畢竟上頭夠厲害對自己職涯方面的成長會比較有利，這麼做感覺就是當成一種篩技術成長環境的方式xD</p>
<p>還有一個點我覺得很有收穫。會 Python，是要會到什麼程度呢？會寫 Flask 就是會 Python？那你懂底層的 garbage collection、python 2 vs python 3、GIL 嗎？所以，你懂的xD 要有自信說出自己會某某語言，最好懂一下它底層相關的知識和運作方式吧！</p>
<h3 id="賈桃樂學習主題館"><a href="#賈桃樂學習主題館" class="headerlink" title="賈桃樂學習主題館"></a>賈桃樂學習主題館</h3><p>原來新竹有免費提供就業相關的諮詢服務啊，超棒的欸！</p>
<p>來這攤並不是直接為了職缺，而是希望能提升職涯方面的東西(?)，而我也因此得知了有免費的諮詢服務，賺到了！</p>
<hr>
<h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><p>想精進職涯方面？真的多參加職涯活動準沒錯！</p>
<p>透過跟企業端聊工作內容、公司在做什麼，那心底的輪廓真的會有越趨清晰的感覺。</p>
<p>而且多聊、多了解，更了解各種產業之外，也會更清楚自己比較想往哪條路走，有時候甚至能對你原本既定的印象產生了改變，我覺得那交流的過程真的讓人很有收穫！</p>
<p>（我真的累了，連續寫了一小時半，開始不知道自己在寫什麼了xD）</p>
<p><strong>就業博覽會的重點：大量問就對了！</strong>我有個想法，如果突然不知道要問什麼，或許可以問說，請問別人有問了您什麼很好的問題嗎？因為感覺很多人問的問題，問得超好，我自己也很想知道啊！</p>
<br>
今天這樣逛，真的值得😎]]></content>
  </entry>
  <entry>
    <title>【職涯路上】96~93，自我懷疑⋯⋯</title>
    <url>/2022/03/freshman-career-96-93/</url>
    <content><![CDATA[<p>卡卡的感覺😅</p>
<span id="more"></span>

<h2 id="前面廢話"><a href="#前面廢話" class="headerlink" title="前面廢話"></a>前面廢話</h2><p>這幾天實在沒做什麼，說來實在慚愧啊xD<br>本來想說就當作沒這回事，反正文章也沒人看，偷懶應該沒差吧？<br>但這樣下去不行啊，這條路是我選擇的，我要負起責任，對得起自己的人生啊！<br>所以，雖然很廢，但還是決定要打這一篇文，試著去檢討為何這幾天會覺得自己都沒在軌道上。</p>
<h2 id="3-8-禮拜二"><a href="#3-8-禮拜二" class="headerlink" title="3/8 禮拜二"></a>3/8 禮拜二</h2><p>早上嘗試把自己「<a href="https://kanido386.github.io/2021/06/python-pdf-to-png/">用 Python 將 PDF 文檔轉成 PNG 圖檔</a>」這一篇文的功能，用一個 Flask Web APP 包起來，但因為 12. 半要上課，暫停了以後，後來就沒繼續做下去了⋯⋯</p>
<p>其實感覺應該沒有到太困難，但可能是因為完美主義作祟，讓我想要在做 project 的過程中能夠看起來「很完美」，於是乎，就很沒意義地學別人先做一個 template project，再開始動工，想當然耳，耗費了太多不必要的時間 (畢竟自己做的那個 template 超級陽春，沒什麼用的感覺)，也就因此沒在上課前做完，那又因為要做的 project 不怎麼有趣 (但想想其實只是太在意一定要很完美什麼的)，導致那個 project 目前就沒後續了⋯⋯</p>
<p>還有一個可能的原因，因為之前做 project 完會寫成部落格文章，像是「<a href="https://kanido386.github.io/2021/07/baymax-with-us/">喜歡《大英雄天團》杯麵？何不自己做一個！</a>」這一篇，我的潛意識會希望之後每做完 project 都能夠產出相同品質的紀錄文章。但這個想法反而有點阻撓我，讓我沒辦法 focus 在開發上面，而是顧慮太多那些五四三。其實，若真要寫文章，開發完再去構思不就好了嗎？畢竟是自己做的 project，不用擔心說會忘記太多什麼的，啊真的擔心，就把查到的相關文章或是一些關鍵先累積丟在一個地方，做完之後再來整理寫成文章不就好了？就不要太追求完美，沒有所謂的標準答案啊！</p>
<p>這學期我有修「和聲學」，下午五點多上完課後，吃完晚餐，就會去圖書館做和聲學的作業。每次都會花上禮拜二一整個晚上和一點點其他天的時間，該是思考怎麼解決這個困難點的時候了！嗯🤔 可能就期許自己作業「先求有再求好」吧？就以完成為目標，然後做的時候盡量保持專注，下週再試試看吧xD（本來還打算退掉呢，但現在覺得學那些樂理好像也挺有意思的，沒修，未來幾乎不可能會再碰到那一塊的，修了，說不定在某一天突然就能派上用場）</p>
<h2 id="3-9-禮拜三"><a href="#3-9-禮拜三" class="headerlink" title="3/9 禮拜三"></a>3/9 禮拜三</h2><p>早上上圖形識別，幾乎都是數學啊😅</p>
<p>下次上課前來彌補一番，目前的我看到數學就想逃，但其實仔細一看，啊就符號比較嚇人而已啊，試著用心去理解它，相信會有收穫的！（看能不能下次上課前試著搞懂前面的部分，前面的部分我幾乎都在神遊啊xD）</p>
<p>所以早上沒得做 project。</p>
<p>下午吃完弄完衣服就搭車回台北了，回到家以後⋯⋯整個陷入自我懷疑、提不起勁的漩渦裡面，所以 project 相關的東西也是沒任何進展。</p>
<p>昨晚室友在睡前跟我談到「財務自由」的話題，我那個時候真的超累，但還是硬聽了他對於財務自由的想法。後來他問我有什麼想法，我⋯⋯居然沒想法！當下我真的覺得我超廢，怎麼沒認真去思考自己的人生，都24歲了，到底都在做什麼啊！抱著這種埋怨的心情，睡去，然而睡不好，因為那感覺使人煩躁，早上起床的時候頭頗痛⋯⋯</p>
<p>找時間好好思考關於投資理財，甚至是人生其他面向的事情！太重要了！</p>
<h2 id="3-10-禮拜四"><a href="#3-10-禮拜四" class="headerlink" title="3/10 禮拜四"></a>3/10 禮拜四</h2><p>前一天太煩躁，禮拜四就好多了。</p>
<p>早上透過「整理數位的東西」梳理情緒，就這樣早上就沒了。（但的確有療癒的效果）</p>
<p>下午先到駕訓班練車，因為隔天要考照。練完車以後，跟朋友去打球，聊到了他爸：</p>
<p>他說他爸是他最熟悉的陌生人，長時間出國在外工作，跟家人疏遠，錢是賺不少啦，年薪至少有200萬，但，這樣真的值得嗎？</p>
<p>我朋友是希望以此為警惕，我聽了也想了很多，雖然還沒出社會沒感受到錢的重要性，但還是會覺得追求幸福比成功還來得重要！</p>
<p>追求成功不見得能體會到心靈上的幸福 (世俗眼光上的算什麼東西)，而追求幸福，雖非主要目的，但或許也能夠伴隨一點點的「成功」。</p>
<p>打球、聊天的過程挺愉快的，加上疏洪道那邊的風很舒服，那一段真的讓人心曠神怡啊！</p>
<p>回到家隨便弄一弄就又晚上了，練完車後又打了球，實在累，所以就也沒弄 project 的東西⋯⋯</p>
<h2 id="3-11-禮拜五"><a href="#3-11-禮拜五" class="headerlink" title="3/11 禮拜五"></a>3/11 禮拜五</h2><p>考駕照 → 寫文章 → 寫和聲學作業 → 再寫文章。<br>就這樣，今天就過去了xD 一樣沒弄 project！</p>
<br>
沒關係，明天就又是新的一天了呢，放下完美主義的念頭，發揮創意「打造」人生一波吧！]]></content>
  </entry>
  <entry>
    <title>用 FSM 及 LINE Messaging API 做一個聊天機器人</title>
    <url>/2021/07/fsm-line-bot/</url>
    <content><![CDATA[<p><a href="/2021/07/fsm-line-bot"><img src="https://images.unsplash.com/photo-1579600161224-cac5a2971069?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1502&q=80" style="width:50vw;" /></a></p>
<!-- <img src="0.jpeg" style="width:50vw;" /> -->

<p>還帶了一點 Heroku 跟 ngrok 的介紹。</p>
<span id="more"></span>

<p>2021 升大四那場黑客松的因緣際會之下，讓我接觸到了這一塊，挺有趣的！</p>
<hr>
<h1 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h1><h2 id="LINE-Developers"><a href="#LINE-Developers" class="headerlink" title="LINE Developers"></a>LINE Developers</h2><h3 id="登入-LINE-Developers"><a href="#登入-LINE-Developers" class="headerlink" title="登入 LINE Developers"></a>登入 LINE Developers</h3><p>還沒註冊的話，先註冊吧！</p>
<h3 id="Create-a-new-provider"><a href="#Create-a-new-provider" class="headerlink" title="Create a new provider"></a>Create a new provider</h3><p>使用者看得到 provider 的名稱哦～</p>
<h3 id="Create-a-new-channel"><a href="#Create-a-new-channel" class="headerlink" title="Create a new channel"></a>Create a new channel</h3><p>選 Messaging API</p>
<p><img src="1.png"></p>
<p>填一填 Channel name、Channel description、Category、Subcategory → 勾一勾 → Create<br>（注意：The channel name can’t be changed for seven days.）</p>
<h3 id="更改設定"><a href="#更改設定" class="headerlink" title="更改設定"></a>更改設定</h3><p>進到 <a href="https://manager.line.biz/">LINE Official Account Manager</a> → 選本次 project 的帳號 → 照下面那張圖更改設定</p>
<p><img src="2.png"></p>
<p>進到自己的 channel → Messaging API → <code>Webhook settings</code> 下面的 <code>Use webhook</code> 也別忘了打開</p>
<p><img src="2.5.png"></p>
<p>這樣等等在測試的時候，就不會沒反應囉！</p>
<h2 id="Heroku"><a href="#Heroku" class="headerlink" title="Heroku"></a>Heroku</h2><p>為何需要 Heroku？因為 Messaging API 需要綁定 Webhook URL，讓我們的 server 能從 LINE Platform 接收到 <a href="https://developers.line.biz/en/docs/messaging-api/receiving-messages/">webhook events</a> 並加以處理。</p>
<p>還是不清楚什麼是 webhook events？<a href="https://developers.facebook.com/docs/messenger-platform/reference/webhook-events/">Messenger Platform</a> 的解釋我蠻喜歡的：</p>
<blockquote>
<p>Webhook events are how the XXX Platform notifies your bot when a variety of interactions or events happen, including when a person sends a message. Webhook events are sent by the XXX Platform as POST requests to your webhook.</p>
</blockquote>
<p>如果 server 只在 local 端運行，沒有個 public 的 endpoint，LINE Platform 怎能傳送 webhook events 給我們的 server？所以我們需要透過把 code 部署到 Heroku，Heroku 會為我們部署上去的 server 生出一個 public 的 endpoint，把這個 endpoint (或是說 URL) 貼到 <code>Webhook settings → Webhook URL</code> 就行囉！</p>
<p>（別忘了 <code>Webhook URL</code> 下面的 <code>Use webhook</code> 也要打開哦）</p>
<p>後來發現前期用 ngrok 測試比較有效率也比較優雅，不然每次要測試，還要等待 Heroku 的部署 ＆ commit message 都會亂寫 (畢竟不確定 code 是否會有 bug)</p>
<p>ngrok 是什麼？怎麼用？後面會介紹！</p>
<h3 id="登入-Heroku"><a href="#登入-Heroku" class="headerlink" title="登入 Heroku"></a>登入 Heroku</h3><p>還沒註冊的話，先註冊吧！</p>
<h3 id="Create-New-App"><a href="#Create-New-App" class="headerlink" title="Create New App"></a>Create New App</h3><p>New → Create new app</p>
<p><img src="3.png"></p>
<p>輸入 App name → 出現綠色的 <code>&lt;app-name&gt; is available</code> 提示訊息代表沒跟其他 Heroku App 撞名 → 地區目前只有美國、歐洲可以選，我選美國 → Create app</p>
<p><img src="4.png"></p>
<h3 id="登入-Heroku-CLI"><a href="#登入-Heroku-CLI" class="headerlink" title="登入 Heroku CLI"></a>登入 Heroku CLI</h3><p>如果還沒安裝 Heroku CLI，可以到<a href="https://devcenter.heroku.com/articles/heroku-cli">這邊</a>照著指示裝～<br>安裝完以後，輸入下面的指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">heroku login</span><br></pre></td></tr></table></figure>

<p>跳轉到瀏覽器，按下 Log In 後就行囉！</p>
<p><img src="5.png"></p>
<h3 id="Create-a-new-Git-repo"><a href="#Create-a-new-Git-repo" class="headerlink" title="Create a new Git repo"></a>Create a new Git repo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir &lt;project-name&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;project-name&gt;</span><br><span class="line">git init</span><br><span class="line">heroku git:remote -a &lt;app-name&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;project-name&gt;</code> 可以跟 <code>&lt;app-name&gt;</code> 一樣哦～<br>（我個人認為一樣的話會比較好，沒有為什麼，就感覺比較好）</p>
<h2 id="ngrok"><a href="#ngrok" class="headerlink" title="ngrok"></a>ngrok</h2><p>透過 <a href="https://ngrok.com/">ngrok</a>，不必部署就能在 local 端測試了！<br><a href="https://5xruby.tw/posts/easy-ngrok-by-nginx-ssh-tunnel">這一篇</a>應該能幫助你了解 ngrok 是什麼。<br>（看「ngrok 服務簡介」這個部分就行了，然後其實沒註冊 ngrok 也能用）</p>
<h3 id="安裝-ngrok"><a href="#安裝-ngrok" class="headerlink" title="安裝 ngrok"></a>安裝 ngrok</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew cask install ngrok       <span class="comment"># for Homebrew v2.6.x and below</span></span><br><span class="line">brew install --cask ngrok     <span class="comment"># for Homebrew v2.7.x and above</span></span><br></pre></td></tr></table></figure>

<p>安裝完後，在終端機輸入 <code>ngrok</code> 有出現東西就代表成功了！</p>
<hr>
<h1 id="正式開發！"><a href="#正式開發！" class="headerlink" title="正式開發！"></a>正式開發！</h1><h2 id="用-Pipenv-管理專案套件"><a href="#用-Pipenv-管理專案套件" class="headerlink" title="用 Pipenv 管理專案套件"></a>用 Pipenv 管理專案套件</h2><p>沒裝過的話，跟著<a href="https://pipenv.pypa.io/en/latest/#install-pipenv-today">這篇文</a>裝吧！</p>
<h3 id="建-Python-虛擬環境"><a href="#建-Python-虛擬環境" class="headerlink" title="建 Python 虛擬環境"></a>建 Python 虛擬環境</h3><p>Create a new project using Python 3.9（其他版本的也行）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipenv --python 3.9</span><br></pre></td></tr></table></figure>

<p>如此一來，專案多了個 <code>Pipfile</code>。<br>是不是長得很像 npm 的 <code>package.json</code> 呢？其實功能也差不多哦！<br>想徹底了解那是什麼的話就 google 吧！</p>
<h3 id="裝套件"><a href="#裝套件" class="headerlink" title="裝套件"></a>裝套件</h3><p>用 Pipenv 裝個套件試試</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipenv install line-bot-sdk     <span class="comment"># LINE Messaging API</span></span><br></pre></td></tr></table></figure>

<p>除了 <code>Pipfile</code> 的 <code>[packages]</code> 底下多了個 <code>line-bot-sdk = &quot;*&quot;</code> 之外，還多生成了一個 <code>Pipfile.lock</code>。<br>我是把它理解成 npm 的 <code>node_modules</code> 資料夾啦！</p>
<h3 id="裝其他-dependency"><a href="#裝其他-dependency" class="headerlink" title="裝其他 dependency"></a>裝其他 dependency</h3><p>把其他需要的套件也裝一裝：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipenv install flask          <span class="comment"># 處理 webhook</span></span><br><span class="line">pipenv install python-dotenv  <span class="comment"># 可將重要資料存成環境變數</span></span><br><span class="line">pipenv install transitions    <span class="comment"># 別人用 Python 實作好的 FSM</span></span><br><span class="line">pipenv install pygraphviz     <span class="comment"># 不裝這個會報錯，或許是因為 transitions 需要(?)</span></span><br></pre></td></tr></table></figure>

<div class="note warning">
    在裝 pygraphviz 之前，必須先用 Homebrew 之類的套件管理工具裝 graphviz。<br>
    不過，很可能還是會噴出錯誤訊息，這就必須靠 google 解決了⋯⋯
</div>

<p>如果還有其它套件要安裝，就一律把 <code>pip install xxx</code> 改成 <code>pipenv install xxx</code> 就可以囉！</p>
<p>（話說在安裝前已經 <code>pipenv shell</code> 進到虛擬環境的話，記得先 <code>exit</code> 離開虛擬環境以後再安裝，不然 <code>Pipfile</code> 可能不會更新到。我測試的時候是這樣啦，不知道有沒有錯🤔）</p>
<h3 id="進虛擬環境"><a href="#進虛擬環境" class="headerlink" title="進虛擬環境"></a>進虛擬環境</h3><p>如何進到有裝那些套件的環境呢？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipenv shell   <span class="comment"># 進去</span></span><br><span class="line"><span class="built_in">exit</span>           <span class="comment"># 離開</span></span><br></pre></td></tr></table></figure>

<p>進到虛擬環境以後，輸入 <code>pip list</code> 終端機就會列出你在這個環境中裝了哪些套件～</p>
<h2 id="簡單試-LINE-Bot"><a href="#簡單試-LINE-Bot" class="headerlink" title="簡單試 LINE Bot"></a>簡單試 LINE Bot</h2><p>寫個「你傳什麼文字它就回什麼文字」的 Bot。</p>
<h3 id="將機密存成環境變數"><a href="#將機密存成環境變數" class="headerlink" title="將機密存成環境變數"></a>將機密存成環境變數</h3><ol>
<li><p>打開 LINE Developers，進到你的 channel</p>
</li>
<li><p>Basic settings 滑到底，有個 Channel secret，第四步會需要</p>
<p> <img src="6.png"></p>
</li>
<li><p>Messaging API 滑到底，issue 一個 channel access token，一樣第四步會需要</p>
<p> <img src="7.png"></p>
</li>
<li><p>新增 <code>.env</code>：</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LINE_CHANNEL_SECRET=&lt;channel-secret&gt;</span><br><span class="line">LINE_CHANNEL_ACCESS_TOKEN=&lt;channel-access-token&gt;</span><br><span class="line">PORT=8000</span><br></pre></td></tr></table></figure>

<h3 id="程式主體"><a href="#程式主體" class="headerlink" title="程式主體"></a>程式主體</h3><p>參考官方的 <a href="https://github.com/line/line-bot-sdk-python">line-bot-sdk-python</a>，新增 <code>src/app.py</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, abort</span><br><span class="line"><span class="keyword">from</span> linebot <span class="keyword">import</span> LineBotApi, WebhookParser</span><br><span class="line"><span class="keyword">from</span> linebot.exceptions <span class="keyword">import</span> InvalidSignatureError</span><br><span class="line"><span class="keyword">from</span> linebot.models <span class="keyword">import</span> MessageEvent, TextMessage, TextSendMessage</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"></span><br><span class="line">load_dotenv()</span><br><span class="line">app = Flask(__name__, static_url_path=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get channel_secret and channel_access_token from environment variable</span></span><br><span class="line">channel_access_token = os.getenv(<span class="string">&#x27;LINE_CHANNEL_ACCESS_TOKEN&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">channel_secret = os.getenv(<span class="string">&#x27;LINE_CHANNEL_SECRET&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">line_bot_api = LineBotApi(channel_access_token)</span><br><span class="line">parser = WebhookParser(channel_secret)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/webhook&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">webhook_handler</span>():</span></span><br><span class="line">  signature = request.headers[<span class="string">&quot;X-Line-Signature&quot;</span>]</span><br><span class="line">  <span class="comment"># get request body as text</span></span><br><span class="line">  body = request.get_data(as_text=<span class="literal">True</span>)</span><br><span class="line">  app.logger.info(<span class="string">f&quot;Request body: <span class="subst">&#123;body&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># parse webhook body</span></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    events = parser.parse(body, signature)</span><br><span class="line">  <span class="keyword">except</span> InvalidSignatureError:</span><br><span class="line">    abort(<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> event <span class="keyword">in</span> events:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(event, MessageEvent):</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(event.message, TextMessage):</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(event.message.text, <span class="built_in">str</span>):</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    line_bot_api.reply_message(</span><br><span class="line">      event.reply_token,</span><br><span class="line">      TextSendMessage(text=event.message.text)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  port = os.environ.get(<span class="string">&quot;PORT&quot;</span>, <span class="number">8000</span>)</span><br><span class="line">  app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=port)</span><br></pre></td></tr></table></figure>

<p>提個外話：為何要把 <code>app.py</code> 放進資料夾 <code>src</code> 裡面？因為當你的 project 越長越大，檔案也會跟著越來越多，這麼做的話可以讓程式看起來有條不紊！</p>
<h3 id="ngrok-免部署測試"><a href="#ngrok-免部署測試" class="headerlink" title="ngrok 免部署測試"></a>ngrok 免部署測試</h3><p>（這時候如果用 Heroku 測會失敗，因為我們還沒在 Heroku 上面裝偏底層的套件，待會就會知道什麼意思了）</p>
<ol>
<li><p>運行 Flask server</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python src/app.py</span><br></pre></td></tr></table></figure>

<p> 我這邊出現了</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Running on http://192.168.0.101:8000/</span><br></pre></td></tr></table></figure>

<p> 後面的 <code>8000</code> 是 port number，待會會需要。</p>
</li>
<li><p>終端機開啟新分頁，輸入 <code>ngrok http 8000</code>，最後面的 <code>8000</code> 是剛剛的 port number，會輸出：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ngrok by @inconshreveable                                       (Ctrl+C to quit)</span><br><span class="line"></span><br><span class="line">Session Status                online</span><br><span class="line">Session Expires               1 hour, 59 minutes</span><br><span class="line">Version                       2.3.40</span><br><span class="line">Region                        United States (us)</span><br><span class="line">Web Interface                 http://127.0.0.1:4040</span><br><span class="line">Forwarding                    http://f47ec0b1e3d6.ngrok.io -&gt; http://localhost:8000</span><br><span class="line">Forwarding                    https://f47ec0b1e3d6.ngrok.io -&gt; http://localhost:8000</span><br><span class="line"></span><br><span class="line">Connections                   ttl     opn     rt1     rt5     p50     p90</span><br><span class="line">                              0       0       0.00    0.00    0.00    0.00</span><br></pre></td></tr></table></figure>

<p> 第二個 Forwarding 的網址 <code>https://f47ec0b1e3d6.ngrok.io</code> 待會會需要。<br> （注意：每次網址都不一樣，所以如果關掉重開，LINE 那邊的 Webhook URL 也要跟著改哦）</p>
</li>
<li><p>把剛剛的網址貼進 Webhook URL，別忘了後面還要加上 <code>/webhook</code></p>
<p> <img src="8.png"></p>
</li>
<li><p>Update → Verify → 出現 Success 就代表成功囉！</p>
</li>
</ol>
<h3 id="用-LINE-測試一下"><a href="#用-LINE-測試一下" class="headerlink" title="用 LINE 測試一下"></a>用 LINE 測試一下</h3><p>手機掃 channel 裡面的 QR code，加入好友就能測試囉～<br>試試看，當你隨便輸入一段訊息，Bot 是不是就會回跟你一樣的訊息呢？酷吧！<br>（更酷的在後頭呢。不過我後面不會分享得太細，主要是 share 我在網路上找到的實用資源給大家）</p>
<h2 id="用-FSM-的概念擴增功能"><a href="#用-FSM-的概念擴增功能" class="headerlink" title="用 FSM 的概念擴增功能"></a>用 FSM 的概念擴增功能</h2><p>因為我很喜歡 NBA，所以找到了 <a href="https://github.com/chonyy/daily-nba">daily-nba</a> 這個 repo，也就因此間接學到了用 FSM 做 Bot 的技巧！</p>
<p>我的作法就是仔細研究它每個部分的 code 分別是用來做什麼的，過程中還蠻愉快的，畢竟是自己感興趣的內容（所以說，如果想學某塊技術，找個自己感興趣的 repo 來邊研究邊學吧！）</p>
<p>如果覺得上面那個 repo 有點複雜，可以參考 <a href="https://github.com/NCKU-CCS/TOC-Project-2020">TOC-Project-2020</a> 這一個 repo。<br>（畢竟有很多是 author 自己額外加的功能，跟 FSM 的核心架構沒什麼關係）<br>（後來才發現原來這是成大資工某門課的 homework project，酷斃了！）</p>
<h3 id="程式架構"><a href="#程式架構" class="headerlink" title="程式架構"></a>程式架構</h3><p>以 <a href="https://github.com/chonyy/daily-nba">daily-nba</a> 為例，還是簡單說明一下好了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── .gitignore        <span class="comment"># 讓 git 忽略的檔案們</span></span><br><span class="line">├── .travis.yml       <span class="comment"># Travis CI 的設定，可以不用管它</span></span><br><span class="line">├── Aptfile           <span class="comment"># ***** 待會會介紹 *****</span></span><br><span class="line">├── Pipfile           <span class="comment"># 對我來說，它就像是 npm 的 package.json</span></span><br><span class="line">├── Pipfile.lock      <span class="comment"># 對我來說，它就像是 npm 的 node_modules 資料夾</span></span><br><span class="line">├── Procfile          <span class="comment"># ***** 待會會介紹 *****</span></span><br><span class="line">├── README.md         <span class="comment"># repo 主頁往下滑看到的那些就是這個</span></span><br><span class="line">├── img               <span class="comment"># 作者 demo 用的圖片檔，可以不用管它</span></span><br><span class="line">├── requirements.txt  <span class="comment"># 告訴 Heroku 要裝哪些套件，但其實用 Pipfile、Pipfile.lock 就行</span></span><br><span class="line">└── src               <span class="comment"># ----------- 下面四個是重點 -----------</span></span><br><span class="line">    ├── app.py        <span class="comment"># 1. 接收 webhook events 的主體</span></span><br><span class="line">    ├── machine.py    <span class="comment"># 2. 定義狀態機</span></span><br><span class="line">    ├── fsm.py        <span class="comment"># 3. is_going_to_xxx: 進到 xxx state 的條件</span></span><br><span class="line">    │                 <span class="comment">#       on_enter_xxx: 進到 xxx state 後要做什麼事</span></span><br><span class="line">    └── utils.py      <span class="comment"># 4. 功能實作細節分離出來，讓 code 看起來乾淨些</span></span><br></pre></td></tr></table></figure>

<h3 id="Aptfile"><a href="#Aptfile" class="headerlink" title="Aptfile"></a>Aptfile</h3><p>告訴 Heroku 要在我們部署上去的 server 上裝哪些偏底層的套件。<br>在開始前，先裝 <a href="https://elements.heroku.com/buildpacks/heroku/heroku-buildpack-apt">heroku-buildpack-apt</a> 這個 Buildpack 吧：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">heroku buildpacks:add --index 1 heroku-community/apt</span><br></pre></td></tr></table></figure>

<p>接著，新增一個 <code>Aptfile</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graphviz</span><br><span class="line">libgraphviz-dev</span><br><span class="line">pkg-config</span><br></pre></td></tr></table></figure>

<p>待會部署的時候，Heroku 就會幫我們裝這些套件囉！</p>
<h3 id="Procfile"><a href="#Procfile" class="headerlink" title="Procfile"></a>Procfile</h3><p><a href="https://devcenter.heroku.com/articles/procfile">官方文檔</a>上有清楚的解釋。</p>
<p>以 <code>web: python src/app.py</code> 為例，它的意思是：幫我用 <code>python src/app.py</code> 這個指令開啟 <code>web</code> 這個 type 的 process，也就是像 local 端的開啟 server 啦！</p>
<h3 id="用-Heroku-測試"><a href="#用-Heroku-測試" class="headerlink" title="用 Heroku 測試"></a>用 Heroku 測試</h3><p>（當然用 ngrok 測也行）</p>
<p>如果你 <code>.gitignore</code> 有 <code>.env</code> 的話，Heroku 上面的 server 會讀不到環境變數。<br>所以在部署前，我們可以先在 Heroku 上面手動添加那些環境變數：<br>Settings → Reveal Config Vars</p>
<p><img src="9.png"></p>
<p>照著 <code>.env</code>，把環境變數給填上。</p>
<p><img src="10.png"></p>
<p>環境變數加上去以後，來<a href="https://devcenter.heroku.com/articles/git#deploying-code">部署</a>吧！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;make it better&quot;</span></span><br><span class="line">git push heroku master</span><br><span class="line"><span class="comment"># git push heroku dev:main         # branch 是 dev 而不是 main 時</span></span><br></pre></td></tr></table></figure>

<p>跑的過程中，會看到 Heroku 在幫我們裝各種套件呢xD<br>部署完後，別忘了把 Webhook URL 改成 <code>https://&lt;app-name&gt;.herokuapp.com/webhook</code>！<br>再用 LINE 測試 😎</p>
<br>
今天的分享就到這邊，我們下篇文見吧 😃]]></content>
      <tags>
        <tag>Python</tag>
        <tag>黑客松</tag>
        <tag>交大</tag>
        <tag>教學</tag>
        <tag>LINE</tag>
        <tag>Bot</tag>
        <tag>Heroku</tag>
        <tag>ngrok</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>黑客松 LINE Bot 賽前補帖</title>
    <url>/2021/07/hackathon-line-hint/</url>
    <content><![CDATA[<p><a href="/2021/07/hackathon-line-hint"><img src="https://images.unsplash.com/photo-1512314889357-e157c22f938d?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1502&q=80" style="width:50vw;" /></a></p>
<!-- <img src="0.jpeg" style="width:50vw;" /> -->

<p>簡單和大家分享適合搭配黑客松 LINE Bot 的相關技術～</p>
<span id="more"></span>

<p>2021 升大四的暑假 (7/1~7/3)，和 Justin、Frank、Jennie、Henry 參加了由<a href="https://oia.nctu.edu.tw/">交大國際事務處</a>主辦的「<a href="https://event.oia.nycu.edu.tw/">NYCU Global Design &amp; Innovation Competition</a>」黑客松競賽，有不少收穫！<br>（這場黑客松很特別，因為疫情的關係，原本是實體的，改採線上競賽）</p>
<hr>
<h1 id="我那場黑客松"><a href="#我那場黑客松" class="headerlink" title="我那場黑客松"></a>我那場黑客松</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p>How to use Open Data combined with LINE Bot to improve medical and health care<br>（以 LINE 的聊天機器人結合 Open Data，在醫療、照護、健康領域進行創意發想）</p>
<h2 id="Presentation-Video"><a href="#Presentation-Video" class="headerlink" title="Presentation Video"></a>Presentation Video</h2><p><a href="https://www.youtube.com/watch?v=djUoMO8IMcU">https://www.youtube.com/watch?v=djUoMO8IMcU</a></p>
<h2 id="System-Design"><a href="#System-Design" class="headerlink" title="System Design"></a>System Design</h2><p><img src="1.jpg"></p>
<ul>
<li>我們用 Flask 後端及 FSM model 當作 LINE Bot 的基本架構<ul>
<li>之所以選擇用 FSM model 而不是簡單的 if else 是因為，我們認為和 Bot 對話的情境就像是一個 FSM，所以用 FSM model 去描述再適合不過了！</li>
</ul>
</li>
<li>用 Firebase Firestore 做資料庫的讀寫</li>
<li>用 Firebase Storage 做圖片的上傳及 URL 生成</li>
<li>用 Heroku 部署 LINE Bot server</li>
<li>用 Algorithmia 平台部署我們的 ML model 和一個 function<ul>
<li>為何不和 LINE Bot server 一起部署？因為這麼做不但能減輕 server 的負擔，也不必安裝 ML 相關的套件，減少空間的使用</li>
</ul>
</li>
<li>用 GitHub Pages 部署 LIFF 頁面</li>
</ul>
<h2 id="FSM-狀態圖"><a href="#FSM-狀態圖" class="headerlink" title="FSM 狀態圖"></a>FSM 狀態圖</h2><p><img src="2.jpg"></p>
<ul>
<li>在開始打 code 前，我們用 FSM 狀態圖設計了整個 project 功能的架構</li>
<li>有了這個狀態圖，掌握整個 project 的輪廓，打 code 的過程就比較不會那麼雜亂！</li>
</ul>
<hr>
<h1 id="實用技術分享"><a href="#實用技術分享" class="headerlink" title="實用技術分享"></a>實用技術分享</h1><h2 id="LINE-Bot-本體"><a href="#LINE-Bot-本體" class="headerlink" title="LINE Bot 本體"></a>LINE Bot 本體</h2><!-- 可以參考我「[用 FSM 及 LINE Messaging API 做一個聊天機器人](https://kanido386.github.io/2021/07/fsm-line-bot/)」這一篇文。 -->
<p>可以參考我「<a href="https://kanido386.github.io/2021/07/fsm-line-bot/" target="_blank">用 FSM 及 LINE Messaging API 做一個聊天機器人</a>」這一篇文。<br>我將會帶大家用 <a href="https://developers.line.biz/zh-hant/">LINE Developers</a>、<a href="https://pypi.org/project/pipenv/">Pipenv</a> 及 <a href="https://zh.wikipedia.org/wiki/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA">FSM (有限狀態機)</a> 的概念，做一個簡單的 LINE Bot。<br>並用 <a href="https://www.heroku.com/about">Heroku</a> 及 <a href="https://ngrok.com/">ngrok</a> 部署程式碼以測試我們的 LINE Bot！</p>
<h2 id="Messaging-API"><a href="#Messaging-API" class="headerlink" title="Messaging API"></a>Messaging API</h2><p>待會我會簡單帶一下 quick reply、flex message、carousel template、rich menu，<br>其他還有很多很酷的功能詳見<a href="https://developers.line.biz/en/docs/messaging-api/">官方文檔</a>～</p>
<h3 id="Quick-Reply"><a href="#Quick-Reply" class="headerlink" title="Quick Reply"></a>Quick Reply</h3><p><img src="3.png"></p>
<p><strong>官方文檔：<a href="https://developers.line.biz/en/docs/messaging-api/using-quick-reply/">Using quick replies</a></strong></p>
<p>你可能會很好奇，該怎麼把官方文檔上的 <a href="https://developers.line.biz/en/docs/messaging-api/using-quick-reply/#set-quick-reply-buttons">JSON</a> 轉換成 Python code 呢？</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;Select your favorite food category or send me your location!&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;quickReply&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;items&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;action&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;imageUrl&quot;</span>: <span class="string">&quot;https://example.com/sushi.png&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;action&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;message&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Sushi&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;Sushi&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;action&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;imageUrl&quot;</span>: <span class="string">&quot;https://example.com/tempura.png&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;action&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;message&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Tempura&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;Tempura&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;action&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;action&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;location&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Send location&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我是這麼做的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> linebot <span class="keyword">import</span> LineBotApi</span><br><span class="line"><span class="keyword">from</span> linebot.models <span class="keyword">import</span> (</span><br><span class="line">  TextSendMessage, QuickReply, QuickReplyButton,</span><br><span class="line">  MessageAction, LocationAction</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">access_token = os.getenv(<span class="string">&quot;LINE_CHANNEL_ACCESS_TOKEN&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">line_bot_api = LineBotApi(access_token)</span><br><span class="line"></span><br><span class="line">user_id = event.source.user_id</span><br><span class="line"></span><br><span class="line">message = TextSendMessage(</span><br><span class="line">  text=<span class="string">&#x27;Select your favorite food category or send me your location!&#x27;</span>,</span><br><span class="line">  quick_reply=QuickReply(</span><br><span class="line">    items=[</span><br><span class="line">      QuickReplyButton(</span><br><span class="line">        image_url=<span class="string">&#x27;https://example.com/sushi.png&#x27;</span>,</span><br><span class="line">        action=MessageAction(label=<span class="string">&quot;Sushi&quot;</span>, text=<span class="string">&quot;Sushi&quot;</span>)</span><br><span class="line">      ),</span><br><span class="line">      QuickReplyButton(</span><br><span class="line">        image_url=<span class="string">&#x27;https://example.com/tempura.png&#x27;</span>,</span><br><span class="line">        action=MessageAction(label=<span class="string">&quot;Tempura&quot;</span>, text=<span class="string">&quot;Tempura&quot;</span>)</span><br><span class="line">      ),</span><br><span class="line">      QuickReplyButton(</span><br><span class="line">        action=LocationAction(label=<span class="string">&quot;Send location&quot;</span>)</span><br><span class="line">      ),</span><br><span class="line">    ]</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">line_bot_api.push_message(user_id, message)</span><br></pre></td></tr></table></figure>

<p>還有很多 <a href="https://developers.line.biz/en/docs/messaging-api/actions/">Actions</a> 可以用呢！其他 Actions 的寫法以此類推～</p>
<p>跟大家分享個小技巧：<br>如果不確定某個部份該怎麼用，像是 <code>LocationAction</code>，可以直接去看 <a href="https://github.com/line/line-bot-sdk-python/blob/master/linebot/models/actions.py#L253">source code</a> 哦！</p>
<h3 id="Flex-Message"><a href="#Flex-Message" class="headerlink" title="Flex Message"></a>Flex Message</h3><p><strong>官方文檔：<a href="https://developers.line.biz/en/docs/messaging-api/using-flex-messages/">Sending Flex Messages</a></strong></p>
<p>可以先用 <a href="https://developers.line.biz/flex-simulator/">Flex Message Simulator</a> 做出自己滿意的樣子，再把 JSON 貼到 Python code 裡面去。<br>問題來了，該怎麼弄呢？我來教你！</p>
<ol>
<li><p>先用一個 string 存 JSON</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flex_message_json_string = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;Flex Message Simulator 做好的 JSON 貼到這邊&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>轉成 <code>dict</code> 後，包成 <code>FlexSendMessage</code> 就行囉（需要但不是重點的我把它註解掉了）</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># from linebot import LineBotApi</span></span><br><span class="line"><span class="comment"># from linebot.models import FlexSendMessage</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># access_token = os.getenv(&quot;LINE_CHANNEL_ACCESS_TOKEN&quot;, None)</span></span><br><span class="line"><span class="comment"># line_bot_api = LineBotApi(access_token)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># user_id = event.source.user_id</span></span><br><span class="line"></span><br><span class="line">flex_message_json_dict = json.loads(flex_message_json_string)</span><br><span class="line">message = FlexSendMessage(</span><br><span class="line">  alt_text=<span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">  contents=flex_message_json_dict</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不推 push_message，因為有額度限制</span></span><br><span class="line">line_bot_api.push_message(user_id, message)</span><br></pre></td></tr></table></figure></li>
</ol>
<p>想看看做出來的效果如何？<br>Flex Message Simulator 右上角有個 <code>Send...</code> button，可以用那個測試哦！</p>
<h3 id="Carousel-Template"><a href="#Carousel-Template" class="headerlink" title="Carousel Template"></a>Carousel Template</h3><p><strong>官方文檔：<a href="https://developers.line.biz/en/docs/messaging-api/message-types/#carousel-template">Carousel template</a></strong></p>
<p>可以直接參考「<a href="https://github.com/line/line-bot-sdk-python#templatesendmessage---carouseltemplate">LINE Messaging API SDK for Python</a>」來做。<br>不知道某個部份怎麼用？以 <code>CarouselColumn</code> 為例，一樣去翻 <a href="https://github.com/line/line-bot-sdk-python/blob/master/linebot/models/template.py#L215">source code</a> 吧！<br>再隨便舉個例子，若是 <code>CameraAction</code> 呢？一樣直接去洽詢 <a href="https://github.com/line/line-bot-sdk-python/blob/master/linebot/models/actions.py#L209">source code</a>。</p>
<h2 id="Rich-Menu"><a href="#Rich-Menu" class="headerlink" title="Rich Menu"></a>Rich Menu</h2><p><strong>官方文檔：<a href="https://developers.line.biz/en/reference/messaging-api/#rich-menu">Rich menu</a></strong></p>
<p>有兩種方式做這部分：</p>
<ol>
<li><p>直接用官方後台做簡單的圖文選單<br> （<a href="https://manager.line.biz/">LINE Official Account Manager</a> → 選帳號 → 左側欄滑到底 → 聊天室相關 → 圖文選單）</p>
</li>
<li><p>用 code 來做圖文選單</p>
</li>
</ol>
<p>我等等簡單介紹一下第二種方式，先給大家兩個不錯的參考資源：</p>
<ul>
<li><a href="https://github.com/line/line-bot-sdk-python/blob/master/README.rst#get_rich_menuself-rich_menu_id-timeoutnone">line-bot-sdk-python</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10229397">[Day06] 如何建立 LINE Bot 的圖文選單 - Rich Menu</a></li>
</ul>
<h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> linebot <span class="keyword">import</span> LineBotApi</span><br><span class="line"><span class="keyword">from</span> linebot.models <span class="keyword">import</span> (</span><br><span class="line">  RichMenu, RichMenuSize, RichMenuArea, RichMenuBounds,</span><br><span class="line">  URIAction, PostbackAction</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">channel_access_token = <span class="string">&#x27;&lt;your channel access token&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">line_bot_api = LineBotApi(channel_access_token)</span><br></pre></td></tr></table></figure>

<h3 id="描述圖文選單"><a href="#描述圖文選單" class="headerlink" title="描述圖文選單"></a>描述圖文選單</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rich_menu_to_create = RichMenu(</span><br><span class="line">  size=RichMenuSize(width=<span class="number">2500</span>, height=<span class="number">843</span>),</span><br><span class="line">  selected=<span class="literal">True</span>,</span><br><span class="line">  name=<span class="string">&quot;Menu&quot;</span>,</span><br><span class="line">  chat_bar_text=<span class="string">&quot;Menu&quot;</span>,</span><br><span class="line">  areas=[</span><br><span class="line">    RichMenuArea(</span><br><span class="line">    bounds=RichMenuBounds(x=<span class="number">0</span>, y=<span class="number">0</span>, width=<span class="number">833</span>, height=<span class="number">843</span>),</span><br><span class="line">    action=PostbackAction(label=<span class="string">&#x27;Record Taker&#x27;</span>, data=<span class="string">&#x27;menu0&#x27;</span>, text=<span class="string">&#x27;Record Taker&#x27;</span>)),</span><br><span class="line">    RichMenuArea(</span><br><span class="line">    bounds=RichMenuBounds(x=<span class="number">833</span>, y=<span class="number">0</span>, width=<span class="number">833</span>, height=<span class="number">843</span>),</span><br><span class="line">    action=PostbackAction(label=<span class="string">&#x27;Cheer-up Buddy&#x27;</span>, data=<span class="string">&#x27;menu1&#x27;</span>, text=<span class="string">&#x27;Cheer-up Buddy&#x27;</span>)),</span><br><span class="line">    RichMenuArea(</span><br><span class="line">    bounds=RichMenuBounds(x=<span class="number">1666</span>, y=<span class="number">0</span>, width=<span class="number">833</span>, height=<span class="number">843</span>),</span><br><span class="line">    action=PostbackAction(label=<span class="string">&#x27;Health Assistant&#x27;</span>, data=<span class="string">&#x27;menu2&#x27;</span>, text=<span class="string">&#x27;Health Assistant&#x27;</span>)),</span><br><span class="line">  ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>如果有地方不確定怎麼用該怎麼辦？<br>應該已經聽到很厭煩了吧，沒錯，以 <code>RichMenuArea</code> 為例，去找 <a href="https://github.com/line/line-bot-sdk-python/blob/master/linebot/models/rich_menu.py#L85">source code</a>！</p>
<h3 id="創建圖文選單"><a href="#創建圖文選單" class="headerlink" title="創建圖文選單"></a>創建圖文選單</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rich_menu_id = line_bot_api.create_rich_menu(rich_menu=rich_menu_to_create)</span><br><span class="line"><span class="built_in">print</span>(rich_menu_id)</span><br></pre></td></tr></table></figure>

<h3 id="為圖文選單設圖"><a href="#為圖文選單設圖" class="headerlink" title="為圖文選單設圖"></a>為圖文選單設圖</h3><p>圖片的長寬大小要照前面的設定去製作哦！<br>以前面的描述為例，圖片尺寸必須要是 2500 × 843，像是：</p>
<p><img src="4.png"></p>
<p>（實用技巧：如果不擅長美工，可以用官方後台做完以後再下載下來，像我一樣xD）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;richmenu.png&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  line_bot_api.set_rich_menu_image(rich_menu_id, <span class="string">&#x27;image/png&#x27;</span>, f)</span><br></pre></td></tr></table></figure>

<h3 id="綁定圖文選單"><a href="#綁定圖文選單" class="headerlink" title="綁定圖文選單"></a>綁定圖文選單</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">line_bot_api.set_default_rich_menu(rich_menu_id)</span><br></pre></td></tr></table></figure>

<p>其他操作詳見 <a href="https://github.com/line/line-bot-sdk-python/blob/master/README.rst#get_rich_menuself-rich_menu_id-timeoutnone">line-bot-sdk-python</a>。</p>
<h2 id="LIFF"><a href="#LIFF" class="headerlink" title="LIFF"></a>LIFF</h2><p><strong>官方文檔：<a href="https://developers.line.biz/en/docs/liff/overview/">LINE Front-end Framework</a></strong></p>
<p>把它想成是一般的網頁，只是是開在 LINE 裡面。<br>（注意：<a href="https://developers.line.biz/en/news/2019/11/11/liff-cannot-be-used-with-messaging-api-channels/">Messaging API channel 不能添加 LIFF</a>，不過因為我是創 Blockchain Service 的 channel，所以不受影響。想了解更多關於 LINE Blockchain？我後面會介紹到，期待一下～）<br>（上面的問題，如果仍舊想創 Messaging API channel，可以再創個 Login channel 解決）</p>
<h3 id="製作教學"><a href="#製作教學" class="headerlink" title="製作教學"></a>製作教學</h3><ol>
<li><p>先寫好網頁的部分（HTML、CSS、JavaScript）</p>
</li>
<li><p>HTML 檔的 <code>&lt;body&gt; &lt;/body&gt;</code> 裡面加上</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://static.line-scdn.net/liff/edge/2.1/sdk.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>HTML 檔的 <code>&lt;script&gt; &lt;/script&gt;</code> 或 JS 檔裡面加上</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initializeLiff</span>(<span class="params">myLiffId</span>) </span>&#123;</span><br><span class="line">  liff.init(&#123;</span><br><span class="line">    <span class="attr">liffId</span>: myLiffId</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// start to use LIFF&#x27;s api</span></span><br><span class="line">    initializeApp();</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">initializeLiff(<span class="string">&#x27;&lt;LIFF ID&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p> 以初始化</p>
</li>
<li><p>發送訊息到 LINE 聊天室＆關閉頁面（其他功能請參見 <a href="https://developers.line.biz/en/reference/liff/">LIFF v2 API reference</a>）</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">liff.sendMessages([&#123;</span><br><span class="line">  <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;text&#x27;</span>: <span class="string">&#x27;要傳到聊天室的文字&#x27;</span></span><br><span class="line">&#125;])</span><br><span class="line">liff.closeWindow();</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="生成-Endpoint-URL"><a href="#生成-Endpoint-URL" class="headerlink" title="生成 Endpoint URL"></a>生成 Endpoint URL</h3><p>這個 URL 要提供給 LIFF。</p>
<p>我目前有試過兩種方法：</p>
<ol>
<li>用 GitHub 的 gh-pages 分支部署，可參考<a href="https://medium.com/%E9%80%B2%E6%93%8A%E7%9A%84-git-git-git/%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B-%E7%94%A8github-pages-%E4%B8%8A%E5%82%B3%E9%9D%9C%E6%85%8B%E7%B6%B2%E7%AB%99-fa2ae83e6276">這一篇</a>，建議從「建立其他專案Repository」開始讀。完成後，就會拿到 <code>https://&lt;account&gt;.github.io/&lt;repo&gt;/&lt;folder&gt;</code> 這樣的 URL， <code>index.html</code>、<code>main.js</code> 這些靜態檔案要放在 <code>&lt;repo&gt;/&lt;folder&gt;/</code> 底下哦！</li>
<li>用 ngrok，完成後會拿到 <code>https://xxxxxxxxxxxx.ngrok.io</code> 這樣的 URL</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --global http-server  <span class="comment"># 裝 http-server</span></span><br><span class="line">brew install --cask ngrok         <span class="comment"># 裝 ngrok</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 開始前，先 cd 到 index.html 的目錄下</span></span><br><span class="line">http-server                       <span class="comment"># 開啟 http-server</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 開新的終端機輸入</span></span><br><span class="line">ngrok http 8080                   <span class="comment"># 讓 ngrok 幫我們做 forwarding</span></span><br></pre></td></tr></table></figure>

<h3 id="設定＆測試"><a href="#設定＆測試" class="headerlink" title="設定＆測試"></a>設定＆測試</h3><p>把該填的都填進 LIFF application 裡面吧。<br>LIFF URL 丟進聊天室，點開來，很酷的事情就會發生了xD</p>
<h2 id="LINE-Blockchain"><a href="#LINE-Blockchain" class="headerlink" title="LINE Blockchain"></a>LINE Blockchain</h2><!-- 可以參考我「[當 Python 遇上了 LINE Blockchain](https://kanido386.github.io/2021/07/python-line-blockchain/)」這一篇文。 -->
<p>可以參考我「<a href="https://kanido386.github.io/2021/07/python-line-blockchain/" target="_blank">當 Python 遇上了 LINE Blockchain</a>」這一篇文。<br>我將會帶大家介紹 <a href="https://docs-blockchain.line.biz/overview/">LINE Blockchain</a> 的啟用以及設定，並用 Python 撰寫相關的 code。</p>
<h2 id="Firebase"><a href="#Firebase" class="headerlink" title="Firebase"></a>Firebase</h2><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipenv install firebase-admin</span><br></pre></td></tr></table></figure>

<h3 id="產生私密金鑰"><a href="#產生私密金鑰" class="headerlink" title="產生私密金鑰"></a>產生私密金鑰</h3><p>專案總覽旁邊的⚙️ → 專案設定 → 服務帳戶 → 產生新的私密金鑰</p>
<h3 id="讀寫資料庫"><a href="#讀寫資料庫" class="headerlink" title="讀寫資料庫"></a>讀寫資料庫</h3><p>可以用 Firebase 的 Cloud Firestore，詳見<a href="https://firebase.google.com/docs/firestore/quickstart">官方文檔</a>。</p>
<p><strong>初始化</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> firebase_admin</span><br><span class="line"><span class="keyword">from</span> firebase_admin <span class="keyword">import</span> credentials</span><br><span class="line"><span class="keyword">from</span> firebase_admin <span class="keyword">import</span> firestore</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引用私密金鑰</span></span><br><span class="line">cred = credentials.Certificate(<span class="string">&quot;path/to/serviceAccountKey.json&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 firebase，注意不能重複初始化</span></span><br><span class="line">firebase_admin.initialize_app(credential=cred)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 firestore</span></span><br><span class="line">db = firestore.client()</span><br></pre></td></tr></table></figure>

<p><strong>寫入資料庫</strong>（user_id 不用理它）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_db</span>(<span class="params">user_id, key, value</span>):</span></span><br><span class="line">  user_doc_ref = db.collection(<span class="string">&#x27;users&#x27;</span>).document(user_id)</span><br><span class="line">  user_doc = user_doc_ref.get().to_dict()</span><br><span class="line">  user_doc[key] = value</span><br><span class="line">  user_doc_ref.<span class="built_in">set</span>(user_doc)</span><br></pre></td></tr></table></figure>

<p><strong>讀取資料庫</strong>（user_id 不用理它）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_from_db</span>(<span class="params">user_id, key</span>):</span></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    user_doc_ref = db.collection(<span class="string">&#x27;users&#x27;</span>).document(user_id)</span><br><span class="line">    user_doc = user_doc_ref.get().to_dict()</span><br><span class="line">    value = user_doc[key]</span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure>

<p>上面那些 code 僅供參考，應該會有更好的寫法！</p>
<h3 id="儲存圖片"><a href="#儲存圖片" class="headerlink" title="儲存圖片"></a>儲存圖片</h3><p>可以用 Firebase 的 Storage，詳見<a href="https://firebase.google.com/docs/storage/admin/start#python">官方文檔</a>。</p>
<p><strong>初始化</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> firebase_admin</span><br><span class="line"><span class="keyword">from</span> firebase_admin <span class="keyword">import</span> credentials</span><br><span class="line"><span class="keyword">from</span> firebase_admin <span class="keyword">import</span> storage</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引用私密金鑰</span></span><br><span class="line">cred = credentials.Certificate(<span class="string">&quot;path/to/serviceAccountKey.json&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 firebase，注意不能重複初始化</span></span><br><span class="line">firebase_admin.initialize_app(credential=cred, options=&#123;<span class="string">&quot;storageBucket&quot;</span>: <span class="string">&quot;&lt;project&gt;.appspot.com&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 storage</span></span><br><span class="line">bucket = storage.bucket()</span><br></pre></td></tr></table></figure>

<p><strong>從 LINE 上傳圖片</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_skin_image</span>(<span class="params">user_id, message_id, file_name</span>):</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 下載使用者傳的圖片到 server 上</span></span><br><span class="line">  message_content = line_bot_api.get_message_content(message_id)</span><br><span class="line">  temp_file_path = user_id</span><br><span class="line">  <span class="keyword">with</span> <span class="built_in">open</span>(temp_file_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fd:</span><br><span class="line">    <span class="keyword">for</span> chunk <span class="keyword">in</span> message_content.iter_content():</span><br><span class="line">      fd.write(chunk)</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 設定 blob 資訊</span></span><br><span class="line">  saving_path = <span class="string">f&#x27;<span class="subst">&#123;user_id&#125;</span>/<span class="subst">&#123;file_name&#125;</span>&#x27;</span></span><br><span class="line">  blob = bucket.blob(saving_path)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 上傳到 Firebase Storage</span></span><br><span class="line">  <span class="keyword">with</span> <span class="built_in">open</span>(temp_file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> photo:</span><br><span class="line">    blob.upload_from_file(photo)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 從 server 上移除</span></span><br><span class="line">  os.remove(temp_file_path)</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 檔案名稱寫到 db 上，方便之後取用</span></span><br><span class="line">  user_doc_ref = db.collection(<span class="string">&#x27;users&#x27;</span>).document(user_id)</span><br><span class="line">  user_doc = user_doc_ref.get().to_dict()</span><br><span class="line">  user_doc[<span class="string">&#x27;skin_image&#x27;</span>] = saving_path</span><br><span class="line">  user_doc_ref.<span class="built_in">set</span>(user_doc)</span><br></pre></td></tr></table></figure>

<p><strong>拿圖片的 URL</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_skin_image_url</span>(<span class="params">user_id</span>):</span></span><br><span class="line">  user_doc_ref = db.collection(<span class="string">&#x27;users&#x27;</span>).document(user_id)</span><br><span class="line">  user_doc = user_doc_ref.get().to_dict()</span><br><span class="line">  image = user_doc[<span class="string">&#x27;skin_image&#x27;</span>]</span><br><span class="line">  blob = bucket.blob(image)</span><br><span class="line">  img_url = blob.generate_signed_url(datetime.timedelta(seconds=<span class="number">300</span>), method=<span class="string">&#x27;GET&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> img_url</span><br></pre></td></tr></table></figure>

<p>一樣，上面那些 code 僅供參考，應該會有更好的寫法！</p>
<h2 id="部署-ML-Models"><a href="#部署-ML-Models" class="headerlink" title="部署 ML Models"></a>部署 ML Models</h2><!-- 可以參考我「[用 Algorithmia 部署 ML Models](https://kanido386.github.io/2021/07/algorithmia-ml-models/)」這一篇文。 -->
<p>可以參考我「<a href="https://kanido386.github.io/2021/07/algorithmia-ml-models/" target="_blank">用 Algorithmia 部署 ML Models</a>」這一篇文。<br>我將會帶大家用 Algorithmia 這個平台，把自己寫好的 ML model 包成 API，供其他 client 使用。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="LINE-Bot-專屬-URL"><a href="#LINE-Bot-專屬-URL" class="headerlink" title="LINE Bot 專屬 URL"></a>LINE Bot 專屬 URL</h3><p>可以用點連結的方式進頻道，詳見 <a href="https://developers.line.biz/en/docs/messaging-api/using-line-url-scheme/#sharing-line-official-account">Sharing a LINE Official Account</a>。</p>
<h3 id="主動傳訊息"><a href="#主動傳訊息" class="headerlink" title="主動傳訊息"></a>主動傳訊息</h3><p>不需要 reply token，就能夠主動推訊息給使用者，詳見 <a href="https://developers.line.biz/en/reference/messaging-api/#send-push-message">Send push message</a>。<br>（注意：有使用上限額度，除非升級帳戶！我黑客松時，因為沒注意到這一點，讓我得重新註冊一個新的 channel，搞得我有點煩躁xD）</p>
<br>
希望讀完這篇文章的您能夠有所收穫，我們下篇文見啦 😃]]></content>
      <tags>
        <tag>Python</tag>
        <tag>黑客松</tag>
        <tag>交大</tag>
        <tag>教學</tag>
        <tag>LINE</tag>
        <tag>Bot</tag>
        <tag>Firebase</tag>
      </tags>
  </entry>
  <entry>
    <title>【學習筆記】人機互動概論 - 1</title>
    <url>/2022/08/hci-note-1/</url>
    <content><![CDATA[<p>面試的時候，面試官推薦我去了解有關於「人機互動」的領域，加上覺得未來工作很可能會派上用場，因此決定找資源學習這一塊。</p>
<p>後來在 YouTube 找到了「<a href="https://www.youtube.com/playlist?list=PLQn99bzkJv9xK8KR9foKdNC3dLyL77u3Y">人機互動概論：探索人與科技交會的新思維</a>」這個系列影片，邊看邊做了筆記 (幾乎都是影片內容及字幕)，目的是希望之後只要讀筆記就能快速回憶起影片的內容。</p>
<span id="more"></span>

<br>
廢話不多說，讓我們直接進到筆記的部分吧！

<h3 id="關於人機互動這件事"><a href="#關於人機互動這件事" class="headerlink" title="關於人機互動這件事"></a><a href="https://www.youtube.com/watch?v=pR-kh31zIUo&list=PLQn99bzkJv9xK8KR9foKdNC3dLyL77u3Y&index=1">關於人機互動這件事</a></h3><ul>
<li>科技始終來自於人性</li>
<li>「人機互動」的研究者所好奇的主題：科技的發展還有設計，到底怎樣被人性影響？而我們的人性，怎麼樣反過來被科技影響？</li>
</ul>
<h3 id="人機互動到底是什麼？能吃嗎？"><a href="#人機互動到底是什麼？能吃嗎？" class="headerlink" title="人機互動到底是什麼？能吃嗎？"></a><a href="https://www.youtube.com/watch?v=_qIFvuHo6qk&list=PLQn99bzkJv9xK8KR9foKdNC3dLyL77u3Y&index=2">人機互動到底是什麼？能吃嗎？</a></h3><ul>
<li>人機互動 (<strong>H</strong>uman-<strong>C</strong>omputer <strong>I</strong>nteraction，簡稱 HCI)：探討使用者 (Human) 與電腦 (Computer) 之間彼此感知並作出回應 (互動) 的過程<ul>
<li>舉例：瀏覽網頁時廣告突然跳出來 → 使用者會感知到「有個廣告跳出來」 → 也許對廣告感興趣 or 不感興趣 → 使用者感知而用滑鼠對廣告作出回應 → 電腦透過感知工具 (像是滑鼠、鍵盤) 感知使用者的行為 → 像是使用者關掉廣告 → 電腦會依據這個感知做出相對應的回應</li>
<li>因此就在使用者感知電腦、電腦感知使用者這樣互相感知之下，就會形成了一種互動，也就是 interaction</li>
</ul>
</li>
<li>在探討互動的時候，電腦部份，我們可以探討「整體的電腦系統」，也可以把它限縮到「小部分的零件按鈕」，比方說鍵盤的排列設計 or 警告訊息的顏色設計，這些都是人機互動的議題！</li>
<li>computer 不僅限於筆電、桌電，其實也可以代表車子、手機、智慧手錶等等，這些裝置也都是 computer 的一種。所以說，跟這些不同的裝置也會有不同的互動方式，如何做互動，也是人機互動在探討的。</li>
<li>思考一下：「早上」用電腦跟「晚上」用電腦做的事情會一樣嗎？還是不一樣呢？<ul>
<li>我們在不同時間 / 環境 / 脈絡 (context)，這些因素都會影響我們怎麼樣跟這些機器做互動</li>
</ul>
</li>
<li>除了外在的脈絡、外在的環境，我們人的內在環境 (像是情緒狀態) 也是會影響到我們怎麼跟機器還有系統做互動<ul>
<li>今天很開心：看別人分享很蠢的笑話 → 覺得好笑 → 按讚</li>
<li>今天覺得諸事不順：看別人分享很蠢的笑話 → 反而覺得更生氣 → 按怒</li>
<li>以上可以體現出：使用者的內在狀態，也會大大影響使用者怎麼樣跟「同一個」東西、同一個資訊做互動</li>
</ul>
</li>
<li>剛剛都只是比較侷限在「我自己」使用者跟電腦的互動，然而，人機互動還可以再進一步延伸到：我們使用者如何透過電腦或是系統作為媒介，與「其他人」溝通或者是互動<ul>
<li>舉例：遠端跟別人開會，視訊、音訊都開 vs 只開音訊，感覺是很不一樣的！</li>
</ul>
</li>
<li>「跨領域」的人機互動<ul>
<li>「機」器方面：computer science，知道怎麼做出一個電腦、電腦系統、網路系統，還有可以能讓使用者遠端溝通的通訊科學</li>
<li>人：社會學、行為學、認知神經科學、認知科學。以「認知科學」為例，可以幫助我們了解，為什麼人腦在感知到某些刺激以後，會有這樣的行為；為什麼總是會被特定的事物去吸引住注意力</li>
<li>人因工程：像是警鈴要多大聲大家才聽得到、椅子要怎麼設計才會符合人體工學</li>
<li>還有更多領域都會被應用在人機互動的研究當中，像是 AI 等等，太廣了！</li>
</ul>
</li>
<li>人機互動好像只有看電腦、看網頁、動手操作網頁、聽到一些影片的聲音，只有看、聽、摸？其實還可以「吃」！<ul>
<li>有篇 paper：Communication by Changes in Taste，探討「利用電流刺激」改變味覺，以及改變味覺可以如何促進人之間的交流</li>
</ul>
</li>
</ul>
<h3 id="人機互動的發展歷史"><a href="#人機互動的發展歷史" class="headerlink" title="人機互動的發展歷史"></a><a href="https://www.youtube.com/watch?v=LUPDpNqjmzI&list=PLQn99bzkJv9xK8KR9foKdNC3dLyL77u3Y&index=3">人機互動的發展歷史</a></h3><ul>
<li>今天一打開電腦，就可以看到桌面有很多 icon 代表不同的軟體，然後我們可以用滑鼠去點這些軟體。這些我們感覺很平常的事情，在過去很多年前，其實都是天馬行空的想像跟發明！</li>
<li>HCI 早期承先啟後的重要研究：圖形使用者介面、文字編輯系統<ul>
<li>圖形使用者介面：採用圖形方式顯示的電腦操作使用者介面（例如：網頁視窗、按鈕、鼠標等等）</li>
<li>文字編輯系統：主要用於用來編寫和檢視文字檔案</li>
</ul>
</li>
<li>其他的創意研究：視窗、電腦輔助設計軟體、虛擬實境與擴增實境</li>
<li>這些不同領域的專家學者，願意結合他們的專長以及發揮對未來科技還有社會的想像，我們才會有這麼多令人驚豔的研究跟產品在我們的日常生活當中！</li>
</ul>
<h3 id="日常生活中的好設計"><a href="#日常生活中的好設計" class="headerlink" title="日常生活中的好設計"></a><a href="https://www.youtube.com/watch?v=mkqnA9hWedg&list=PLQn99bzkJv9xK8KR9foKdNC3dLyL77u3Y&index=4">日常生活中的好設計</a></h3><ul>
<li>這些人機互動的小觀念跟知識，都會大大影響我們在日常生活中的便利性</li>
<li>對於人機互動有更多想要了解的話，非常推薦去看 Don Norman 的《The Design of Everyday Things》</li>
<li>「門」這麼簡單的裝置，跟聽起來很複雜、很玄的「人機互動」有什麼關係？<ul>
<li>有沒有類似經驗<ul>
<li>開門時，怎麼推都推不開，想說是不是有人鎖門了？後來才發現門是要拉開的⋯⋯</li>
<li>門怎麼拉推都打不開，後來才發現要往右滑開</li>
</ul>
</li>
<li>若是在設計這麼簡單的東西，都沒有考慮使用者，會如何從這個東西原本設計的形體中直接理解它的使用方式，若沒考慮到這件事，就會遇到很多類似剛剛的狀況</li>
<li>同樣形狀的門有不同的表現方式 → 屬於不好的設計  <img src="1.png"></li>
<li>一個設計良好的門，應該要讓使用者可以直接從外觀上知道到底要如何去使用（中間會牽扯到許多人機互動裡面會提到的設計要素）</li>
<li>什麼門是好設計？<ul>
<li>外型設計要相當直覺</li>
<li>逃生門  <img src="2.png"></li>
<li>車子的門  <img src="3.png"></li>
</ul>
</li>
</ul>
</li>
<li>日常生活中的好設計：符合人機互動的<strong>好設計</strong>，是要<strong>很直覺</strong>地讓使用者知道使用方法</li>
<li>為何以「門」來當做例子？因為光是「門」平常都會碰到又這麼簡單的裝置，就已經牽扯到許多與人機互動有關的知識和議題！</li>
</ul>
<br>
未完待續，stay tuned!]]></content>
  </entry>
  <entry>
    <title>【學習筆記】人機互動概論 - 2</title>
    <url>/2022/10/hci-note-2/</url>
    <content><![CDATA[<p>「<a href="https://www.youtube.com/playlist?list=PLQn99bzkJv9xK8KR9foKdNC3dLyL77u3Y">人機互動概論：探索人與科技交會的新思維</a>」系列影片，筆記第二彈～</p>
<span id="more"></span>

<h2 id="影響物品設計好壞的-5-大要素"><a href="#影響物品設計好壞的-5-大要素" class="headerlink" title="影響物品設計好壞的 5 大要素"></a>影響物品設計好壞的 5 大要素</h2><h3 id="Discoverability-可見性"><a href="#Discoverability-可見性" class="headerlink" title="Discoverability (可見性)"></a><a href="https://www.youtube.com/watch?v=vagbsPQSdc4&list=PLQn99bzkJv9xK8KR9foKdNC3dLyL77u3Y&index=5">Discoverability (可見性)</a></h3><ul>
<li>當我們在<strong>看到</strong>互動物體時，是否可以了解到：<ul>
<li>我們可以執行哪些行為？</li>
<li>如何在這個物體上執行這些行為來達到我們預期的效果？</li>
</ul>
</li>
<li>以「門」為例  <img src="1.png"></li>
<li>除了上述的例子，很多設計物，它其實也都利用了「可見性」這個要素，讓這些設計物在我們日常生活中變得更方便去使用！<ul>
<li>馬克杯的把手也是「可見性」的展示，告訴我們要靠手去抓握拿起來</li>
<li>飯店房卡＆房間門長長細細的洞 → 讓使用者發現到需要做的動作，是可以把房卡往這個洞裡面放，來開房間門</li>
</ul>
</li>
<li>以上這些例子都是我們在日常生活中，都會遇到的各種不同物品，它們利用「可見性」這個要素，來自然地與使用者溝通它應該怎麼被使用</li>
</ul>
<h3 id="Affordance"><a href="#Affordance" class="headerlink" title="Affordance"></a><a href="https://www.youtube.com/watch?v=A_Qkrjb4xUY&list=PLQn99bzkJv9xK8KR9foKdNC3dLyL77u3Y&index=6">Affordance</a></h3><ul>
<li>網路上能找到的翻譯：承擔特質／直觀功能／示能性／預設用途（但很難精準地用中文去翻）</li>
<li>定義：物體的<strong>實質特性</strong> (形狀, 材質, 大小, 高低, 機械結構等等) 或<strong>物體所處的環境條件</strong> (像是被擺放在很高的地方, 一個有斜坡的地方) 讓使用者可以自然且直覺地了解怎麼使用物體，並且達到他預期想要的效果</li>
<li>平面：具有支撐的性質（具有支撐的 Affordance）<ul>
<li>因此當看到一張椅子的時候，可以從椅子它的座椅那邊有平面，知道說這個座椅的平面有承載、支撐的 Affordance，因此會知道我要坐在平面的座椅上，而不是把椅子翻過來坐在椅子的腳上，也不是坐在旁邊尖尖的扶手上</li>
<li>椅子利用「座椅平面」這個 Affordance 去讓使用者知道如何去跟椅子做互動</li>
</ul>
</li>
<li>手機座：如圖片所示，此為手機架所具備 Affordance 的性質，因此這個手機架不需要特別再寫個標籤，寫說「請把手機放在這個凹槽」，它只要呈現它原本的樣子，就足夠傳達這樣的意思給使用者了  <img src="2.png"></li>
<li>電腦桌面：本身就是依據 Affordance 這樣的設計要素被製造的！<ul>
<li>大家一定都有用過 (實體的) 桌面，我們會在桌面上擺上一份份的文件、垃圾桶可以丟點小東西，因此在虛擬的電腦裡，他們就把「桌面」這個具體實際物件搬到虛擬電腦中，這樣使用者可以了解到，我可以隨時回到這個桌面上，而在桌面上，可以把我虛擬的一些文件放在桌面上，當我不需要某文件的時候，就用滑鼠去點文件 (就像是用手去拿起文件)，並且將它拖曳到「垃圾桶」的 icon，就可以丟掉了！</li>
<li>就像真實世界的桌面，我們可以把文件、文件夾跟垃圾桶放到桌面上，把這個概念應用在電腦世界的虛擬資料上</li>
<li>利用我們日常生活、我們之前的經驗中具有的一些性質，把這個 Affordance 放在一個虛擬的電腦環境裡面</li>
</ul>
</li>
<li>Affordance 指的其實不只是物體本身的性質 or 這個環境它自己本身的條件，而是物體的性質以及環境所在的條件所傳達出來的意象，怎麼被使用者感知到之後，使用者知道有哪些可能的動作，可以去應用在這個物體以及環境上（該物體與使用者之間的關係）</li>
<li>Affordance：物體與環境承載的特質如何被使用者感知與理解</li>
<li>Is there a difference between affordance and discovery?<ul>
<li>Affordance is related to the object itself. Eg: A button looks clickable. Discoverability is related to the product/solution. Eg: An image-manipulation toolbar shows all features it is possible to use when you want to work with an image.</li>
</ul>
</li>
</ul>
<h3 id="Signifiers-能指、所指"><a href="#Signifiers-能指、所指" class="headerlink" title="Signifiers (能指、所指)"></a><a href="https://www.youtube.com/watch?v=5NZp2VleG-Q&list=PLQn99bzkJv9xK8KR9foKdNC3dLyL77u3Y&index=7">Signifiers (能指、所指)</a></h3><ul>
<li>用英文比較可以準確地傳達這個要素的定義</li>
<li>定義：向使用者<strong>「傳遞訊號」</strong>在物體的哪個部分要執行這些操作</li>
<li>使用者在第一次接觸一項新物品的時候，第一時間會先從物品的表面、形狀、材質、大小、高低、機械結構等等，去探索可能可以怎麼樣去操控這個物品</li>
<li>一個設計良好的物品，是能夠用各種方式向使用者傳達，可以怎麼使用、怎麼樣去對我做哪些動作的「訊號」，也就是「signifiers」</li>
<li>舉例：鍵盤。<ul>
<li>每個按鍵都有英文和注音符號的標示，這些標示就是在告訴使用者，如果你想要打出特定的字母或是特定的中文字時，你應該要按哪些特定的按鍵，才能達到你的目的。</li>
<li>形狀不一樣的按鍵，也直接向使用者傳達說，假設你要按字母的話，是按這種形狀的按鍵，你要按 Enter 鍵的話，你要去找某種特定形狀的按鍵，所以物品的 signifier 也可以用物品的形狀來表達</li>
<li>鍵盤按鍵的佈局配置 (主鍵盤區、數字鍵區、特殊功能鍵區) 也是一種 signifier</li>
<li>鍵盤是利用<strong>「視覺」</strong>的 signifiers 向使用者傳遞要在哪個部分執行操作</li>
</ul>
</li>
<li>不僅限於「視覺」，signifiers 有許多不同的表達方式，像是聽覺、觸覺、味覺、體感回饋等等</li>
<li>舉例：聽覺的 signifiers<ul>
<li>救護車「喔咿喔咿」的聲音</li>
<li>救護車是利用「聽覺」的 signifiers，較為急促、高頻地傳達緊急狀況</li>
</ul>
</li>
</ul>
<h3 id="Feedback-回饋性"><a href="#Feedback-回饋性" class="headerlink" title="Feedback (回饋性)"></a><a href="https://www.youtube.com/watch?v=eA_r19WYzCk&list=PLQn99bzkJv9xK8KR9foKdNC3dLyL77u3Y&index=8">Feedback (回饋性)</a></h3><ul>
<li>定義：讓使用者可以知道，裝置跟系統有依照使用者的需求在運作</li>
<li>裝置可以透過使用者的<strong>「各種感官」</strong>給予回饋，像是亮燈提示、發出小小的提示音</li>
<li>公車下車鈴可以有「聲音提示」，或者是有「閃爍燈號」來回饋給乘客，如此一來，可以讓使用者更好地知道，剛剛做了「按按鈕」的行為，是不是有成功引起這個裝置應該要有的結果</li>
<li>要注意的地方：這些回饋必須在動作結束之後立刻發生，並且必須要正確的傳達行為所造成的結果</li>
<li>發生錯誤的回饋性可能因素：沒有立即給予反饋 (按了下車鈴很久才有回饋音效)、給予誤導的反饋 (給的是不恰當的提示音像是答錯的音效)</li>
</ul>
<h3 id="Mapping-映射、對應性"><a href="#Mapping-映射、對應性" class="headerlink" title="Mapping (映射、對應性)"></a><a href="https://www.youtube.com/watch?v=zH-o3UjrXo4&list=PLQn99bzkJv9xK8KR9foKdNC3dLyL77u3Y&index=9">Mapping (映射、對應性)</a></h3><ul>
<li>描述的是一種對應關係</li>
<li>解釋：Mapping 主要是借用數學裡面名詞而來，主要講述的是「不同集合的元素之間互相映射」的關係</li>
<li>把「對應性」放在人機互動的框架下＋白話的方式，「對應性」指的是：我們如何把 (1) 裝置的運作、(2) 使用者對裝置做的操作、(3) 裝置產生的效果，聯繫在一起。<ul>
<li>如果這三者之間的聯繫，可以很自然、很直覺被使用者察覺到、學習起來並且記憶起來的話，我們就會說，這個裝置的設計有很好的對應性</li>
</ul>
</li>
<li>「對應性」有很多種種類<ul>
<li>「行為」上的相似性所產生的對應性：像是自動筆與筆芯。因為我往下按 (操作裝置的方向) 跟筆芯跑出來的行為 (產生效果的行為)，這個方向是一致的，反映了行為上的對應性，所以對我們來說，這種往下按就會跑出筆芯的設計就會非常好理解和被記得</li>
<li>「意義」上的相似性所產生的對應性：像是開關燈。手勢往上有增強加大的意義、手勢往下有減弱縮小的意義 → 通常把開關往下按就是把電燈關起來，開關往上按就是電燈打開<ul>
<li>虛擬的電腦世界也可以看到這樣子對應性的設計：像是 volume slide bar，往上就是音量調大，往下則是音量調小</li>
</ul>
</li>
</ul>
</li>
<li>缺少對應性會造成問題的例子：教室一堆的電燈開關。「開關面板的設計」與「電燈的位置」並沒有使用對應性，對使用者來說，很難從開關設計去理解、去學習，到底我要關前排燈要按哪個開關<ul>
<li>如果要改善，我們可以想想看，如何讓開關的位置與對應電燈的位置有所關聯，像是前排電燈的開關在上排，後排電燈在下排</li>
<li>像是這樣做一點點簡單的設計調整，其實都可以大大去改善這個缺乏對應性所造成的問題</li>
</ul>
</li>
</ul>
<h2 id="其他影響好設計要素的原因"><a href="#其他影響好設計要素的原因" class="headerlink" title="其他影響好設計要素的原因"></a><a href="https://www.youtube.com/watch?v=4kG18j201SU&list=PLQn99bzkJv9xK8KR9foKdNC3dLyL77u3Y&index=10">其他影響好設計要素的原因</a></h2><ul>
<li>很多好設計都會同時具備一個以上的要素，而一些不好的設計也都同時缺少多個要素</li>
<li>通常一個讓我們覺得用起來很順手的設計，背後隱藏了很多設計師，還有開發人員的心血與巧思，這些巧思與心血，讓這些設計可以同時具備了多個好的要素，因此使用者在使用的時候，才會覺得這個東西怎麼那麼好用 → 類似「一日之所需，百工斯為備」</li>
<li>不好的設計，加上其他設計好要素，可以獲得好的改善<ul>
<li>Signifiers：向使用者「傳遞訊號」，在物體的哪個部分要執行這些操作</li>
</ul>
  <img src="3.png"></li>
<li>好設計的要素改善，會帶給我們什麼影響？消費者的喜好、安全性 (像是駕駛飛機時) 等等。</li>
<li>不同文化的使用者，對於物品如何呈現這些要素的需求都會不一樣  <img src="4.png"></li>
<li>因此，要做出好設計的裝置或系統，除了要考慮上述的好設計要素之外，我們也要把一些因素同時納入考量，才可以達到我們所要達到的效果</li>
</ul>
<h2 id="新世代與電腦的互動裝置"><a href="#新世代與電腦的互動裝置" class="headerlink" title="新世代與電腦的互動裝置"></a><a href="https://www.youtube.com/watch?v=VoYZJOkg4VM&list=PLQn99bzkJv9xK8KR9foKdNC3dLyL77u3Y&index=11">新世代與電腦的互動裝置</a></h2><ul>
<li>思考一下，還有沒有更酷或是更科幻的與電腦互動方式呢？<ul>
<li>滑鼠、鍵盤 → 觸控螢幕 → ???</li>
<li>鋼鐵人電影裡面的操作方式：Holographic User Interfaces、Gesture-based User Interfaces、in-air gesture</li>
<li>鐘點站裡面的倒數計時：on-skin interfaces、touch interaction</li>
</ul>
</li>
<li>Air+Touch: Interweaving Touch &amp; In-Air Gestures<ul>
<li>在一個智慧型手機的上方加上一個深度的攝影機，透過深度的攝影機，它可以知道現在這個手指跟螢幕之間還有上下的距離，把這些距離的資訊再利用電腦做分析，就可以去偵測手指的位置、可能是什麼樣的手勢</li>
</ul>
</li>
<li>Air+Touch 用了哪些好設計的要素？<ul>
<li>Mapping 對應性：螢幕上空的位置較遠，觸控螢幕的圓圈較大</li>
<li>另一個 Mapping 對應性：點擊之後，使用者可以在空中轉圈圈，就像 (音量) 旋鈕一樣，去微調在螢幕上地圖的大小</li>
</ul>
</li>
</ul>
<br>
未完待續，stay tuned!]]></content>
  </entry>
  <entry>
    <title>【職涯路上】85，不想徒具形式</title>
    <url>/2022/03/freshman-career-85/</url>
    <content><![CDATA[<p>之後【職涯路上】系列文，改成一週一篇好了，我目前的做法，讓我覺得，我好像每天都一定要在職涯方面做點什麼才可以⋯⋯</p>
<p>不給自己喘息空間，然後又一直在這邊發沒什麼營養的廢文，有點捨本逐末了！</p>
<p>畢竟休息時間也是很重要的，不斷低等勤奮，實在沒什麼意義。</p>
<p>（不想再看到自己為了發文章而發文章，而是真的有什麼體悟或收穫，再來這邊做分享）</p>
]]></content>
  </entry>
  <entry>
    <title>【學習筆記】人機互動概論 - 3</title>
    <url>/2022/11/hci-note-3/</url>
    <content><![CDATA[<p>「<a href="https://www.youtube.com/playlist?list=PLQn99bzkJv9xK8KR9foKdNC3dLyL77u3Y">人機互動概論：探索人與科技交會的新思維</a>」系列影片，筆記第三彈～</p>
<span id="more"></span>

<h3 id="從影視作品聊聊人工智慧"><a href="#從影視作品聊聊人工智慧" class="headerlink" title="從影視作品聊聊人工智慧"></a><a href="https://www.youtube.com/watch?v=jTbPJLOrMt0&list=PLQn99bzkJv9xK8KR9foKdNC3dLyL77u3Y&index=13">從影視作品聊聊人工智慧</a></h3><ul>
<li>會不會我們未來人類都找不到工作，因為人工智慧太厲害都取代我們的工作了？</li>
<li>人工智慧已融入到我們的生活裡面，許多我們覺得很方便的事情，其實都已經離不開人工智慧了<ul>
<li>你還可以不依賴 Google Map 到一個陌生不熟悉的地方嗎？</li>
<li>掃地機器人</li>
</ul>
</li>
</ul>
<h3 id="那些隱藏在我們生活中的機器人"><a href="#那些隱藏在我們生活中的機器人" class="headerlink" title="那些隱藏在我們生活中的機器人"></a><a href="https://www.youtube.com/watch?v=Tmyc6T2Fk0c&list=PLQn99bzkJv9xK8KR9foKdNC3dLyL77u3Y&index=14">那些隱藏在我們生活中的機器人</a></h3><ul>
<li>人與機器人之間的互動是非常多樣化的</li>
<li>機器人的溝通方式相當擬人化，用肢體動作甚至是情緒來表達自己的狀態</li>
<li>在這個人工智慧還有智慧家電以及機器人越來越多的年代，我們跟這些設計物的互動，除了變得更加即時以及多元之外，同時也變得更加複雜了</li>
</ul>
<h3 id="人工智慧與人類的共生關係"><a href="#人工智慧與人類的共生關係" class="headerlink" title="人工智慧與人類的共生關係"></a><a href="https://www.youtube.com/watch?v=EUKRZ7gZUAE&list=PLQn99bzkJv9xK8KR9foKdNC3dLyL77u3Y&index=15">人工智慧與人類的共生關係</a></h3><ul>
<li>為什麼有些人工智慧或智慧系統，我們覺得很好用，而有些我們卻覺得沒有那麼好用？<ul>
<li>其實就跟設計一些裝置或是物體一樣，設計這些人工智慧系統，其實也牽扯到許多人類心理學以及設計法則！</li>
</ul>
</li>
<li>推薦書籍《設計與未來生活》（The Design of Future Things）<ul>
<li>雖然這是 2008 年出版的書籍，但是在 AI 大爆炸的時代，裡面提到的許多設計準則及概念，都還是可以很好地被應用在現在許多人工智慧系統上面</li>
<li>這代表人類與智慧機器溝通的需求以及期待的方式其實一直都沒有改變</li>
</ul>
</li>
<li>機器如果能達成我們希望他們做的，那是好的。但是如果機器失敗了，或是導致本來很有生產力、創造性的人變成機器的僕人，而這些僕人隨時都在監控修理或維護機器，那就是不好的設計。<ul>
<li>因此，當我們給機器更多的自發性、更多的智慧和更多情緒還有個性的時候，我們就需要考慮如何跟這些更有智慧的機器做互動。</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>助你行動</title>
    <url>/2022/01/help-you-take-action/</url>
    <content><![CDATA[<p>平日蒐集一些讓我很有感觸的句子，把它們彙整起來分享給大家～</p>
<span id="more"></span>

<h2 id="前導"><a href="#前導" class="headerlink" title="前導"></a>前導</h2><blockquote>
<p><span style="color:blue;">短期怕做了什麼而後悔，<br>長期怕沒做什麼而後悔。<br></span></p>
</blockquote>
<p>真的！<br>如果那個決定無傷大雅，那為何不去嘗試看看？等之後再來後悔，真的會很漚！</p>
<blockquote>
<p><span style="color:blue;">瞎忙是一種懶惰，<br>是思維上的懶惰，<br>是行動上的盲目。<br><br>瞎忙大多是一種掩飾，<br>掩飾自己在逃避少數討厭的當務之急。<br></span></p>
</blockquote>
<p>有時候可以停下腳步，思考一下現在的自己到底是不是在「戰術上的拖延」。</p>
<blockquote>
<p><span style="color:blue;">滿腦子錯誤的想法，<br>然後根據錯誤的想法做出糟糕的決定，<br>而不是經過深思之後提出不同的意見，<br>乃是人生最大的悲劇之一。<br></span></p>
</blockquote>
<p>所以定期更新個「個人系統」吧！可以透過閱讀、反思、與人互動等方法來做到。</p>
<blockquote>
<p><span style="color:blue;">注意你的思想，它們會變為言語。<br>注意你的言語，它們會變為行動。<br>注意你的行動，它們會變為習慣。<br>注意你的習慣，它們會變為性格。<br>注意你的性格，它會變為你的命運。<br></span></p>
</blockquote>
<p>這跟「習慣 → 思考模式、行為舉止 → 類似蝴蝶效應進而引發後續的種種」的道理很像。</p>
<blockquote>
<p><span style="color:blue;">飲食與健康課，牛玉珍老師：<br>「覺察才會帶來改變。」<br>「痠痛才貼布，治標不治本！」<br></span></p>
</blockquote>
<p>覺察以後，才會真正開始思考該如何去處理，繼而讓自己能夠有所改變。</p>
<hr>
<h2 id="做自己"><a href="#做自己" class="headerlink" title="做自己"></a>做自己</h2><blockquote>
<p><span style="color:#009A17;">多數人傾向的選擇，<br>不代表就是最好或是最正確的選擇。<br></span></p>
</blockquote>
<p>可能比較「安全」是沒錯啦，但某些選擇或許⋯⋯有意想不到的驚喜也說不定🤔</p>
<blockquote>
<p><span style="color:#009A17;">你之所以焦慮，<br>是因為你急於過「標配」的人生<br></span></p>
</blockquote>
<p>從小我們被教育應該要怎樣怎樣，但人生沒有標準答案啊！</p>
<blockquote>
<p><span style="color:#009A17;">我們總以為青春是永駐的，<br>多麼理所當然的想法。<br><br>可今天我們畢業了，<br>如同這四年短暫的高中時光，<br>生命的價值，<br>也恰恰在於它並非永垂不朽，<br>生命因其有限而可貴。<br><br>現在的我深有體會，<br>我之所以在這兒今天說這些，<br>是想提醒大家 time is luck。<br><br>你不要浪費生命為別人而活，<br>要活出你自己的意義，<br>為你珍惜的事物奮鬥，<br>心無旁騖，<br>即便不能如願，<br>至少我們也曾經精彩的活過。<br><br>出自【蜘蛛人驚奇再起2：電光之戰】關的畢業演講<br></span></p>
</blockquote>
<p>時間有限，為自己的人生鮮艷上色！</p>
<blockquote>
<p><span style="color:#009A17;">生活本來就是自由選擇。<br></span></p>
</blockquote>
<p>別完全被「應該怎樣」束縛住啦！</p>
<hr>
<h2 id="有目標"><a href="#有目標" class="headerlink" title="有目標"></a>有目標</h2><blockquote>
<p><span style="color:blue;">一個人能夠踐行一個好的生活或是學習習慣，<br>一定是內心深處有一個十分堅定的目標的人。<br><br>很多成功的人，<br>也許只是比我們目標更清晰，<br>計劃更科學，<br>毅力更堅強，<br>而這些我們都可以通過刻意練習習得，<br>關鍵在於你是否能下定決心。<br></span></p>
</blockquote>
<p>讓自己在混亂中整理出一點頭緒。</p>
<blockquote>
<p><span style="color:blue;">You know basketball for me<br>was the most important thing<br>So everything I saw<br>whether is TV shows<br>whether it was books I read<br>People I talked to<br>Everything was done<br>to try to learn how to become a better basketball player<br>Everything<br>Everything<br>and so when you have that point of view<br>then literally the world becomes your library<br>to help you to become better at your craft<br><br>出自 <a href="https://youtu.be/98N9kQjCTEc?t=168">KOBE BRYANT Inspiration Interview</a><br></span></p>
</blockquote>
<p>當你真心想做一件事，全世界都會幫你。</p>
<blockquote>
<p><span style="color:blue;">If you don’t know what you’re aiming for,<br>how will you measure your progress?<br></span></p>
</blockquote>
<p>有個方向會比較知道自己在做什麼，不然很可能會覺得自己都在瞎忙。</p>
<blockquote>
<p><span style="color:blue;">He who has a “why” to live can bear almost any “how”<br></span></p>
</blockquote>
<p>有個底層「why」驅動，上層的 how、what 將呼之欲出。</p>
<hr>
<h2 id="計畫"><a href="#計畫" class="headerlink" title="計畫"></a>計畫</h2><p><img src="1.png"></p>
<p>這圖片足以說明一切xD<br>「處理」前一團混亂令人畏懼，「處理」後較清楚明瞭讓人比較好一一去解決。</p>
<hr>
<h2 id="開始行動"><a href="#開始行動" class="headerlink" title="開始行動"></a>開始行動</h2><blockquote>
<p><span style="color:#009A17;">你不需要很厲害才能開始，<br>但你需要開始才會很厲害！<br></span></p>
</blockquote>
<p>剛開始看起來蠢就蠢吧，會漸入佳境的！</p>
<blockquote>
<p><span style="color:#009A17;">想做的事情，<br>需要的不是等到有時間，<br>而是立即可推進的一小步行動！<br><br>實現想做的事情，<br>不是因為我有大把時間，<br>而是累積一點一點微小時間的結果。<br><br>有時間做想做的事情，<br>不是動力的問題，<br>不是時間的問題，<br>而是工作流程的問題。<br></span></p>
</blockquote>
<p>可以找個時間思考一下該怎麼優化自己的「系統」，讓自己即使沒有很多完整的時間，對於想做的事情，也能運用自己系統的「演算法」去逐步推進進度！</p>
<blockquote>
<p><span style="color:#009A17;">行動才是開始，<br>想法不是！<br></span></p>
</blockquote>
<p>這還蠻恐怖的！<br>常常腦中有某個想法就會以為「已經達成了」而鬆懈，然後就遲遲不行動，因為大腦已經覺得自己做到了啊，何必急著展開行動呢？<br>這真的很可怕啊！</p>
<hr>
<h2 id="過程可能不輕鬆但也要享受其中"><a href="#過程可能不輕鬆但也要享受其中" class="headerlink" title="過程可能不輕鬆但也要享受其中"></a>過程可能不輕鬆但也要享受其中</h2><blockquote>
<p><span style="color:blue;">People who are focused on the present moment are calm and perform best.<br>Because when fully engaged in their task,<br>there is no room for worry about the outcome.<br><br>People who perform at their peak such as being in the zone<br>don’t describe stress about the future outcome<br>but are deeply engaged in the present process.<br><br>Paradoxically, they achieve the outcome far better.<br></span></p>
</blockquote>
<p>專注當下。</p>
<blockquote>
<p><span style="color:blue;">Happiness comes from noticing and enjoying the little things in life.<br></span></p>
</blockquote>
<p>一定要成為誰、達到什麼成就才幸福快樂？<br>不不不，多注意周遭那些平時習以為常的美好小事物吧！<br>藝術大師羅丹說：「美，到處都有，對於我們的眼睛，不是缺少美，而是缺少發現。」<br>生活中的美俯拾即是，幸福散布在每個角落。</p>
<hr>
<h2 id="激勵人心"><a href="#激勵人心" class="headerlink" title="激勵人心"></a>激勵人心</h2><blockquote>
<p><span style="color:#009A17;">本集金句：<br>１ 好的習慣會引起連鎖效應，慢慢把生活變得越來越好。<br>２ 突破瓶頸的瞬間往往都是來自於之前的許多行動所累積的，直到可以釋放出重大的改變。<br>３ 在生活上每一天、每一刻，我們都是有選擇的，每一次正確的選擇，都會讓我們更靠近我們想要成為的那一種人。<br><br>兩個要點：<br>１ 每天進步一點點，1％就夠。<br>２ 改變自己的身份認同。<br><br>出自「<a href="https://www.youtube.com/watch?v=vQsTC15YXm4">這部影片</a>」底下的留言<br></span></p>
</blockquote>
<p>好的微小習慣 → 經過時間一點一滴累積的複利效應 → 巨大的影響</p>
<blockquote>
<p><span style="color:#009A17;">說是「<a href="https://www.youtube.com/watch?v=Kdjj4uTONfc">非激勵影片</a>」但很激勵人心：<br>Why not you?<br>為什麼不能是你？<br></span></p>
</blockquote>
<p>有很多理由和藉口？一一提出來質疑一番吧！<br>對呀，為何不能是你呢？</p>
<br>
希望這篇文章能助你一臂之力💪]]></content>
  </entry>
  <entry>
    <title>用 Hexo 及 GitHub Pages 打造部落格</title>
    <url>/2021/06/hexo-github-pages-blog/</url>
    <content><![CDATA[<p><a href="/2021/06/hexo-github-pages-blog"><img src="https://images.unsplash.com/photo-1600585154340-be6161a56a0c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1500&q=80" style="width:50vw;" /></a></p>
<!-- <img src="0.jpeg" style="width:50vw;" /> -->

<p>此篇教學文仿寫自「<a href="https://yogapan.github.io/">小蛇蛇的筆記</a>」的「<a href="https://yogapan.github.io/2017/08/11/%E7%94%A8Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/">用Hexo + Github Pages搭建個人部落格</a>」</p>
<p>除了是為了學習怎麼用 Hexo 及 GitHub Pages 打造屬於自己的部落格之外，也希望在過程中看看別人是怎樣寫技術文章的，並從中得到收穫。</p>
<span id="more"></span>

<h2 id="用-npm-安裝-Hexo"><a href="#用-npm-安裝-Hexo" class="headerlink" title="用 npm 安裝 Hexo"></a>用 npm 安裝 Hexo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<h2 id="裝完來測試一下"><a href="#裝完來測試一下" class="headerlink" title="裝完來測試一下"></a>裝完來測試一下</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>居然噴出錯誤 <code>TypeError: line.matchAll is not a function</code></p>
<p>google「<code>上面的錯誤訊息</code> hexo」找到了<a href="https://stackoverflow.com/questions/67516168/i-just-installed-hexo-static-site-generator-on-debian-and-ran-hexo-server-to-see">這篇</a><br>原來是因為 <code>12.0.0</code> 版以後的 Node.js 才有 <code>String.matchAll()</code> 這個 function 啊！<br>那就來更新 Node.js 吧！</p>
<h2 id="更新-Node-js"><a href="#更新-Node-js" class="headerlink" title="更新 Node.js"></a>更新 Node.js</h2><p>google「update nodejs」找到了<a href="https://stackoverflow.com/questions/10075990/upgrading-node-js-to-latest-version">這篇</a>，他是這麼做的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install n -g  <span class="comment"># n: Interactively Manage Your Node.js Versions</span></span><br><span class="line">n stable          <span class="comment"># upgrade Node.js to the latest stable version</span></span><br><span class="line">n latest          <span class="comment"># upgrade Node.js to the latest version</span></span><br></pre></td></tr></table></figure>

<h2 id="更新-Node-js-後再次測試"><a href="#更新-Node-js-後再次測試" class="headerlink" title="更新 Node.js 後再次測試"></a>更新 Node.js 後再次測試</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>出現下面的訊息就代表成功囉！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>

<p>打開瀏覽器，輸入 <code>localhost:4000</code></p>
<p><img src="1.png"></p>
<p>讚啦！我們的部落格誕生啦！</p>
<h2 id="看一下-blog-裡面的目錄結構"><a href="#看一下-blog-裡面的目錄結構" class="headerlink" title="看一下 blog 裡面的目錄結構"></a>看一下 blog 裡面的目錄結構</h2><p>用 <code>tree -C -I node_modules</code> 這個指令印一下它的結構：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.landscape.yml</span><br><span class="line">├── _config.yml</span><br><span class="line">├── db.json</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">│   ├── draft.md</span><br><span class="line">│   ├── page.md</span><br><span class="line">│   └── post.md</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">│   └── _posts</span><br><span class="line">│       └── hello-world.md</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<p>不懂欸怎麼辦？不用怕！<a href="https://hexo.io/docs/setup">官方文檔</a>寫得超清楚，設定的時候有不懂的地方再去查就行囉！</p>
<p>補充說明：</p>
<ul>
<li><code>-C</code> 是為了讓印出來的內容有顏色做區別，看起來更清楚明瞭</li>
<li><code>-I &lt;pattern&gt;</code> 則是為了排除不想要印出來的部分</li>
<li>tree 還有很多種 options 可以設定，詳細可以用 <code>man tree</code> 這個指令去了解</li>
</ul>
<h2 id="更換主題"><a href="#更換主題" class="headerlink" title="更換主題"></a>更換主題</h2><p>到<a href="https://hexo.io/themes/">這裡</a>挑選喜歡的主題吧！</p>
<p><img src="2.png"></p>
<p>右上方有個「Search」欄位，輸入 keyword 以後可以快速找到目標主題哦！<br>如下：</p>
<p><img src="3.png"></p>
<p>接下來就依照選定主題的文檔進行安裝啦！<br>（不見得每個主題都有清楚的安裝教學，可能要自己研究一下）<br>如果跟我一樣是選「<a href="https://theme-next.js.org/docs/getting-started/">NexT</a>」這個主題，可以照下面的步驟安裝～</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>修改一下 <code>_config.yml</code> 這個檔案 Extensions 的部分，把 theme 改成新主題：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<p>再用 <code>hexo server</code> 測試看看。</p>
<p><img src="4.png"></p>
<p>哇嗚～<br>成功了！We did it!</p>
<p>主題更換完畢～</p>
<h2 id="更多關於-NexT-的設定"><a href="#更多關於-NexT-的設定" class="headerlink" title="更多關於 NexT 的設定"></a>更多關於 NexT 的設定</h2><p>到 <code>themes/next/_config.yml</code> 去做設定吧！</p>
<h3 id="更改其他樣式"><a href="#更改其他樣式" class="headerlink" title="更改其他樣式"></a>更改其他樣式</h3><p><a href="https://github.com/theme-next/awesome-next#live-preview">這裡</a>有 live preview 可以參考。<br>喜歡哪一款，去掉那一行的註解就行囉！</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>

<h3 id="code-highlight-樣式"><a href="#code-highlight-樣式" class="headerlink" title="code highlight 樣式"></a>code highlight 樣式</h3><p>為什要有 code highlight？<br>因為有了 code highlight，在文章上面分享 code 就可以被美美地呈現😀<br>我個人是比較喜歡 normal 啦～</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Code Highlight theme</span></span><br><span class="line"><span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line"><span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line"><span class="attr">highlight_theme:</span> <span class="string">normal</span></span><br></pre></td></tr></table></figure>

<h3 id="其他設定"><a href="#其他設定" class="headerlink" title="其他設定"></a>其他設定</h3><p><code>themes/next/_config.yml</code> 裡面其實有蠻多註解可以協助我們做設定。<br>如果再有不清楚的地方，相信丟給 google 大神應該都可以順利解決～</p>
<h2 id="設定作者相關資訊"><a href="#設定作者相關資訊" class="headerlink" title="設定作者相關資訊"></a>設定作者相關資訊</h2><h3 id="設置頭像"><a href="#設置頭像" class="headerlink" title="設置頭像"></a>設置頭像</h3><ol>
<li><code>mkdir source/images</code></li>
<li>頭像照片放進去</li>
<li>到 <code>themes/next/_config.yml</code>（以下稱為 theme 的 config 檔）設定 avatar 的路徑，如下：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.jpg</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>這樣就完成頭像的設置囉！</p>
<h3 id="更改網站資訊"><a href="#更改網站資訊" class="headerlink" title="更改網站資訊"></a>更改網站資訊</h3><p>修改 <code>_config.yml</code>（跟 theme 的 config 是不一樣的檔案哦，以下稱為 site 的 config 檔）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">卡尼多隨筆</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;認識自我 • 感受世界 • 創造價值&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">卡尼多</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-tw</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/Taipei&#x27;</span>   <span class="comment"># 不是 TW 哦！</span></span><br></pre></td></tr></table></figure>

<p>每個 setting 分別代表什麼意思可以參閱 Hexo 的<a href="https://hexo.io/docs/configuration.html">官方文檔</a>。</p>
<h3 id="開啟社群帳號連結"><a href="#開啟社群帳號連結" class="headerlink" title="開啟社群帳號連結"></a>開啟社群帳號連結</h3><p>到 theme 的 config 檔做設定，把想要開啟的連結都去掉註解吧！<br>（或是照著格式自己新增其他連結）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/kanido386</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:kanido386@gmail.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br></pre></td></tr></table></figure>

<h3 id="新增「關於我」的頁面"><a href="#新增「關於我」的頁面" class="headerlink" title="新增「關於我」的頁面"></a>新增「關於我」的頁面</h3><ol>
<li><p><code>hexo new page &quot;about&quot;</code></p>
</li>
<li><p>修改 theme 的 config 檔，去掉 menu 底下 about 那一行的註解：</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br></pre></td></tr></table></figure></li>
<li><p>編輯 <code>source/about/index.md</code></p>
</li>
<li><p>用 <code>hexo server</code> 測試看看</p>
</li>
</ol>
<p>如果噴出 <code>TypeError: Cannot read property &#39;utcOffset&#39; of null</code> 這個錯誤，代表說上面在填時區的時候可能有填錯，像我原本是把時區填成 <code>TW</code> 😂</p>
<h2 id="發表文章"><a href="#發表文章" class="headerlink" title="發表文章"></a>發表文章</h2><h3 id="新增一篇文章"><a href="#新增一篇文章" class="headerlink" title="新增一篇文章"></a>新增一篇文章</h3><ol>
<li><p>先到 site 的 config 檔做個設定：</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p> 如此一來，每當新增一個 post 的時候，Hexo 會自動幫你在 <code>source/_posts/</code> 底下新增一個跟 post 同名的 <a href="https://hexo.io/docs/asset-folders">asset folder</a>！<br> 這樣放圖片之類的靜態檔案會比較方便，看起來也會比較有條理。</p>
</li>
<li><p>輸入 <code>hexo new post &quot;&lt;title&gt;&quot;</code> 並編輯</p>
</li>
<li><p>加圖片進文章裡面</p>
<ol>
<li>先把圖片放進 <code>source/_posts/&lt;title&gt;/</code> 裡</li>
<li>post 裡面加上 <code>&#123;% asset_img (img_name) %&#125;</code> 或是用其他像是 <code>![](img_name)</code> 的方式（<code>img_name</code> 包含副檔名哦）</li>
</ol>
</li>
<li><p>這樣文章裡面就有圖片囉 🎉</p>
</li>
</ol>
<h3 id="替文章加上標籤"><a href="#替文章加上標籤" class="headerlink" title="替文章加上標籤"></a>替文章加上標籤</h3><p>如果之前已經建了 tags 頁面，就直接跳到步驟 4. 吧！</p>
<ol>
<li><p><code>hexo new page &quot;tags&quot;</code></p>
</li>
<li><p>編輯 <code>source/tags/index.md</code>，記得加上 <code>type: &quot;tags&quot;</code>：</p>
 <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 所有標籤</span><br><span class="line">date: 2021-06-04 17:29:23</span><br><span class="line"><span class="section">type: &quot;tags&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改 theme 的 config 檔，去掉 menu 底下 tags 那一行的註解：</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br></pre></td></tr></table></figure></li>
<li><p>替剛剛新增的文章加上標籤</p>
 <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&lt;!-- 只有一個 tag 時 --&gt;</span><br><span class="line">tags: tag</span><br><span class="line"></span><br><span class="line">&lt;!-- 有多個 tag 時 --&gt;</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">  -</span> tag1</span><br><span class="line"><span class="bullet">  -</span> tag2</span><br><span class="line"><span class="bullet">  -</span> tag3</span><br></pre></td></tr></table></figure></li>
<li><p>用 <code>hexo server</code> 測試看看</p>
</li>
</ol>
<h3 id="設定文章網址格式"><a href="#設定文章網址格式" class="headerlink" title="設定文章網址格式"></a>設定文章網址格式</h3><p>修改 site 的 config 檔：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:title/</span></span><br></pre></td></tr></table></figure>

<p>還有很多種設定方式呢！詳見<a href="https://hexo.io/docs/permalinks">官方文檔</a>～</p>
<h2 id="為部落格加上搜尋功能"><a href="#為部落格加上搜尋功能" class="headerlink" title="為部落格加上搜尋功能"></a>為部落格加上搜尋功能</h2><ol>
<li><p>裝 plugin：<code>npm install hexo-generator-searchdb</code></p>
</li>
<li><p>修改 theme 的 config 檔，開啟 local search 的功能：</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>左上方的 menu 就多了個 Search 囉！</p>
</li>
</ol>
<p><img src="5.png"></p>
<p>就是這麼簡單。</p>
<h2 id="部署到-GitHub-Pages"><a href="#部署到-GitHub-Pages" class="headerlink" title="部署到 GitHub Pages"></a>部署到 GitHub Pages</h2><p><code>hexo server</code> 以後，看到部落格美美呈現在瀏覽器上就算完成了嗎？還沒呢！</p>
<p>記得嗎？我們測試時輸入的網址可是 <code>localhost:4000</code>，這代表說只有本機端才能看得到。<br>所以如果想要讓網路上的大家能找到自己美美的部落格，首先必須要把部落格部署在某個地方。<br>其中一種很簡單的方式就是用 GitHub Pages 來部署哦！</p>
<p>＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝</p>
<p>如果之前已經設定過了，就直接跳到步驟 5. 吧！</p>
<ol>
<li><p>還沒有 GitHub 帳戶的話先去註冊一個</p>
</li>
<li><p>創建一個名為 <code>&lt;username&gt;.github.io</code> 的 repository，其中 <code>&lt;username&gt;</code> 就是你 GitHub 帳戶的 username（交叉比對<a href="https://ithelp.ithome.com.tw/articles/10199169">這篇</a>和<a href="https://hexo.io/docs/one-command-deployment#Git">官方文檔</a>，疑似任何 repo name 都行，不過用前面說的 name 就能直接用 <code>&lt;username&gt;.github.io</code> 這個網址進到部落格，比較簡單也比較直覺）</p>
</li>
<li><p>裝 plugin：<code>npm install hexo-deployer-git --save</code></p>
</li>
<li><p>修改 site 的 config 檔，設定網站 URL＆部署資訊：</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://&lt;username&gt;.github.io</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==============================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/&lt;username&gt;/&lt;username&gt;.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p> 詳細的設定可以參閱<a href="https://hexo.io/docs/one-command-deployment">官方文檔</a>，還有其他種部署方式的教學呢！</p>
</li>
<li><p>清空 public 裡面的東西（如果有的話）：<code>hexo clean</code></p>
</li>
<li><p>產生靜態檔案＆部署到 GitHub Pages：<code>hexo generate &amp; hexo deploy</code><br> （注意：第一次使用時，如果原本 <code>&lt;username&gt;.github.io</code>  裡面有東西的話都會被吃掉，就連之前的 commit 也都會不見 😱）</p>
</li>
<li><p>打開瀏覽器，輸入 <code>&lt;username&gt;.github.io</code> 就可以看到自己的部落格囉！</p>
</li>
</ol>
<p><img src="6.png"></p>
<p>酷斃了！</p>
<h2 id="加上「繼續閱讀」"><a href="#加上「繼續閱讀」" class="headerlink" title="加上「繼續閱讀」"></a>加上「繼續閱讀」</h2><p>非常簡單，只要在文章裡面加上 <code>&lt;!-- more --&gt;</code> 就行了！</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">預覽看得到我</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">預覽看不到我</span><br></pre></td></tr></table></figure>

<p>用 <code>hexo server</code> 去查看，沒錯，多了一個「Read more」繼續閱讀的按鈕了 🎉</p>
<p><img src="7.png"></p>
<p>Nice!</p>
<h2 id="顯示文章閱讀次數"><a href="#顯示文章閱讀次數" class="headerlink" title="顯示文章閱讀次數"></a>顯示文章閱讀次數</h2><p>我是參考<a href="https://www.larrynote.com/website-service/15/">這篇文章</a>弄的。<br>（注意：文章標題中不能含有 <code>/</code> 斜槓符號，不然會出問題！）</p>
<h3 id="建立-Firebase-專案"><a href="#建立-Firebase-專案" class="headerlink" title="建立 Firebase 專案"></a>建立 Firebase 專案</h3><ol>
<li><p>想要啟用這個功能，可以使用 Firebase 的 Firestore 服務，因此，先到<a href="https://firebase.google.com/">官網</a>註冊一下 Firebase 吧！</p>
</li>
<li><p>新增專案</p>
<p> <img src="8.png"></p>
</li>
<li><p>照著步驟走，即可建立一個 Firebase 專案！</p>
</li>
</ol>
<h3 id="產生網路-API-金鑰"><a href="#產生網路-API-金鑰" class="headerlink" title="產生網路 API 金鑰"></a>產生網路 API 金鑰</h3><ol>
<li><p>進到專案裡頭，左上方有個「Authentication」，點一下，再點「開始使用」，跑完以後，金鑰就生成囉！</p>
<p> <img src="9.png"></p>
</li>
<li><p>進到「專案設定」的「一般設定」查看一下～</p>
<p> <img src="10.png"></p>
<p> 真的有了欸！</p>
<p> <img src="11.png"></p>
</li>
</ol>
<h3 id="設定-Firestore"><a href="#設定-Firestore" class="headerlink" title="設定 Firestore"></a>設定 Firestore</h3><ol>
<li><p>Firestore Database → 建立資料庫</p>
<p> <img src="12.png"></p>
</li>
<li><p>以測試模式啟動 → 繼續 → Cloud Firestore 位置選比較近的 → 啟用</p>
<p> <img src="13.png"></p>
<p> <img src="14.png"></p>
</li>
<li><p>編輯規則，把原本的規則改成下面的 code → 發布</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">service cloud.firestore &#123;</span><br><span class="line">  match /databases/&#123;database&#125;/documents &#123;</span><br><span class="line">    match /articles/&#123;any&#125; &#123;</span><br><span class="line">      allow read: <span class="keyword">if</span> <span class="literal">true</span>;</span><br><span class="line">      allow write: <span class="keyword">if</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <img src="15.png"></p>
</li>
</ol>
<p>這樣 Firestore 的設定就完成囉！</p>
<h3 id="開啟功能"><a href="#開啟功能" class="headerlink" title="開啟功能"></a>開啟功能</h3><p>到 theme 的 config 檔，修改關於 firestore 的設置。<br>除了 <code>enable</code> 改為 <code>true</code> 之外，<code>apiKey</code> 和 <code>projectId</code> 也要設定哦！<br>值要怎麼設定呢？到上面那一張圖的頁面去找找吧～</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">firestore:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">collection:</span> <span class="string">articles</span> <span class="comment"># Required, a string collection name to access firestore database</span></span><br><span class="line">  <span class="attr">apiKey:</span> <span class="string">&lt;網路</span> <span class="string">API</span> <span class="string">金鑰&gt;</span></span><br><span class="line">  <span class="attr">projectId:</span> <span class="string">&lt;專案</span> <span class="string">ID&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h3><ol>
<li><p>清空 public 裡面的東西（如果有的話）：<code>hexo clean</code></p>
</li>
<li><p>產生靜態檔案＆部署最新版的 code 上去：<code>hexo generate &amp; hexo deploy</code><br> （注意：<code>localhost:4000</code> 不能測試哦！因為我們在 site 的 config 檔裡面，url 設的是 <code>https://&lt;username&gt;.github.io</code>）</p>
</li>
<li><p>打開瀏覽器，輸入 <code>&lt;username&gt;.github.io</code>，神奇的事情發生了！</p>
</li>
</ol>
<p>＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝</p>
<p>（點進去文章前）頁面多了個「Views」</p>
<p><img src="16.png"></p>
<p>（點進去文章後）+1 了!!!</p>
<p><img src="17.png"></p>
<p>到 Firestore Database 去看到底發生了什麼事：</p>
<p><img src="18.png"></p>
<p>哇嗚～酷欸！</p>
<h3 id="NexT-是怎麼實作的呢？"><a href="#NexT-是怎麼實作的呢？" class="headerlink" title="NexT 是怎麼實作的呢？"></a>NexT 是怎麼實作的呢？</h3><p>主要用的技術是 Firestore Database + localStorage。</p>
<p>好想知道實作細節哦！怎麼辦？</p>
<p>從檔案裡面找的話，應該能找到那個部分的 source code。<br>果然被我找到了：<code>/themes/next/layout/_third-party/statistics/firestore.swig</code></p>
<p>聽說原本沒有 Firestore 版的「統計閱讀次數」功能，是後來<a href="https://blog.maple3142.net/2017/11/04/hexo-next-readcount/">有人</a>發 PR 上去的。<br>所以或許我們也可以自己加上想要的功能，然後發 PR，造福自己，也造福大家！</p>
<h2 id="加入-Disqus-留言板"><a href="#加入-Disqus-留言板" class="headerlink" title="加入 Disqus 留言板"></a>加入 Disqus 留言板</h2><h3 id="加入留言板"><a href="#加入留言板" class="headerlink" title="加入留言板"></a>加入留言板</h3><ol>
<li><p>註冊 <a href="https://disqus.com/">Disqus</a> 帳戶</p>
</li>
<li><p>選 <code>I want to install Disqus on my site</code></p>
<p> <img src="19.png"></p>
</li>
<li><p>把該填的填一填，其中圈起來的部分下一步會用到<br> （可以點按 <code>Customize Your URL</code> 來分別設定 <code>Website Name</code> 和 <code>Shortname</code>）</p>
<p> <img src="20.png"></p>
</li>
<li><p>修改 theme 的 config 檔，enable 之後，把 shortname 給加上去：</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Disqus</span></span><br><span class="line"><span class="attr">disqus:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">shortname:</span> <span class="string">&lt;shortname&gt;</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>用 <code>hexo server</code> 去查看，酷， 文章底下有留言板囉！</p>
</li>
</ol>
<p><img src="21.png"></p>
<h3 id="關掉某篇文的留言板"><a href="#關掉某篇文的留言板" class="headerlink" title="關掉某篇文的留言板"></a>關掉某篇文的留言板</h3><p>預設會在所有文章裡面加入留言板。<br>如果某篇文章不想要有留言板的話，在那篇文 <code>&lt;post&gt;.md</code> 的一開始加上：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">comments: false</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<h2 id="SEO（搜尋引擎最佳化）"><a href="#SEO（搜尋引擎最佳化）" class="headerlink" title="SEO（搜尋引擎最佳化）"></a>SEO（搜尋引擎最佳化）</h2><p>讓自己的部落格更容易被找到！</p>
<h3 id="驗證網站"><a href="#驗證網站" class="headerlink" title="驗證網站"></a>驗證網站</h3><ol>
<li><p>進到 <a href="https://search.google.com/search-console/welcome">Google Search Console</a></p>
</li>
<li><p>在右側「網址前置字元」處，輸入網址 <code>https://&lt;username&gt;.github.io</code> 後，按繼續。</p>
<p> <img src="22.png"></p>
</li>
<li><p>點按「HTML 標記」展開資訊卡，再按「複製」</p>
<p> <img src="23.png"></p>
</li>
<li><p>進到 theme 的 config 檔，把剛剛複製起來 content 裡面的東西加進去</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Google Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://www.google.com/webmasters</span></span><br><span class="line"><span class="attr">google_site_verification:</span> <span class="string">&lt;content&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>清空 public 裡面的東西（如果有的話）：<code>hexo clean</code></p>
</li>
<li><p>產生靜態檔案＆部署最新版的 code 上去：<code>hexo generate &amp; hexo deploy</code></p>
</li>
<li><p>部署最新版以後，就能驗證囉！</p>
<p> <img src="24.png"></p>
</li>
</ol>
<p>驗證完畢 🎉</p>
<p><img src="25.png"></p>
<h3 id="提交-Sitemap"><a href="#提交-Sitemap" class="headerlink" title="提交 Sitemap"></a>提交 Sitemap</h3><ol>
<li><p>裝 plugin：<code>npm install hexo-generator-sitemap --save</code></p>
</li>
<li><p>打開 site 的 config 檔，在最後面貼上：</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br></pre></td></tr></table></figure>

<p> （注意縮排，不要附屬在 deploy 底下）</p>
</li>
<li><p>產生 sitemap.xml ＆部署：<code>hexo generate &amp; hexo deploy</code></p>
</li>
<li><p>回到 Google Search Console，點左側的 Sitemap → 填 <code>sitemap.xml</code> → 提交！</p>
<p> <img src="26.png"></p>
</li>
<li><p>居然無法擷取⋯⋯</p>
<p> <img src="27.png"></p>
</li>
</ol>
<p>後來找到<a href="https://kyiplay.com/2020/04/google-search-console-coudnt-fetch-sitemap/">這篇</a>，結論就是：等一周左右！<br>就等吧。</p>
<p>更新：</p>
<p><img src="28.png"></p>
<p>不需要一個禮拜～</p>
<br>
希望讀完這篇文章的您能夠有所收穫，我們下篇文見啦 😃]]></content>
      <tags>
        <tag>教學</tag>
        <tag>Hexo</tag>
        <tag>GitHub Pages</tag>
        <tag>部落格</tag>
      </tags>
  </entry>
  <entry>
    <title>嘗試看看一種閱讀寫作的方式</title>
    <url>/2022/12/input-output-with-read-write/</url>
    <content><![CDATA[<p>讓自己盡量去習慣輸入和輸出，也在過程當中，連結文章及個人經驗，反思一點東西。</p>
<p>現階段主要是希望自己透過卡尼多隨筆來認識自己多一點，雖然沒有說一定得幾天之內就寫一篇出來，但如果久久沒寫停了下來，要再行動去更新或者是說產生新的內容，那真的頗不容易，而且也很難去進步😅</p>
<span id="more"></span>

<p>關於新點子，簡單來說：</p>
<ul>
<li>利用零碎時間讀文章，分享連結給大家，然後寫出一篇簡單的心得文，慢慢累積（頻率可隨意，主要目的是習慣寫作和進行反思，每次量可不多）</li>
</ul>
<p>具體的流程大概會是這樣：</p>
<ol>
<li>我有用 Feedly 訂閱一些文章來源，像是閱讀前哨站、遠見雜誌、科技報橘等等的。我大概會一個禮拜認真整理一次，挑選出比較想看的文章出來，然後放進 Notion 裡面。不直接透過 Feedly 而是先透過篩選再列進 Notion 的原因是，Feedly 上面的內容頗雜亂的，如果要讀之前還得「做選擇」要讀哪篇文章，光來回切換（篩選、閱讀）就耗費不少寶貴的精力了，更何況還要進行反思！所以我就想說，先篩選，放進 Notion 一個 Page 裡面，有零碎時間想讀文章的時候，直接打開那個 Page 隨機挑一篇讀即可，不會有多餘的選擇障礙。至於 Page 裡面的分類？我目前純粹是簡單照文章來源來分的啦😅</li>
<li>只能讀 Feedly 裡面的文章嗎？當然不是。如果有在其他地方，像是臉書、google 的時候隨意找到的，有挖到想讀的，那一樣可以放進 Notion Page 裡面，等到之後的零碎時間再來閱讀這樣～</li>
<li>到了零碎時間想讀文章的時候就打開 Notion Page 開讀，就是這麼簡單，不必再耗費時間和精力做篩選，可隨機點一篇也就是「隨點即讀」，很方便！</li>
<li>讀完一篇文章，無論讀起來感覺怎麼樣：覺得寫得很好有產生共鳴？讀完其實感覺還好不怎麼感興趣？發現讀到了一篇廢文浪費了時間？都把那篇文章附有超連結的標題移進一個 Notion toggle 裡，為下一步的文字輸出做準備。因為無論文章內容再怎麼糟糕，總是會有一個點讓自己萌生出想法，所以等於是透過文章來導引出自己的想法，至於文章本身怎麼樣就不是這麼重要了。</li>
<li>（還沒開始行動，我目前的下一步）決定要開始寫文章的時候，用 random 的方式從 toggle 裡面挑文章出來。之所以用 random，是因為可以讓自己多嘗試讀和寫不同類型的文章，不然很可能只會挑自己比較想寫的，或是選擇障礙不知道要挑什麼😂</li>
<li>（一樣尚未行動所以不確定成效或感覺如何）寫完文章以後，就清空那個 toggle 裡面的文章，鼓勵自己再去讀新的文章，然後再加進那個 toggle！</li>
</ol>
<p>大概是這樣囉～</p>
]]></content>
  </entry>
  <entry>
    <title>JavaScript ES6 Cheatsheet</title>
    <url>/2020/04/javascript-es6-cheatsheet/</url>
    <content><![CDATA[<p><a href="/2020/04/javascript-es6-cheatsheet"><img src="https://images.unsplash.com/photo-1517694712202-14dd9538aa97?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1500&q=80" style="width:50vw;" /></a></p>
<!-- <img src="1.jpeg" style="width:50vw;" /> -->

<p>之前學 ES6 時整理的筆記😀</p>
<span id="more"></span>

<h2 id="在開始之前"><a href="#在開始之前" class="headerlink" title="在開始之前"></a>在開始之前</h2><p>有位網友 Giana 寄信推薦我一款網頁工具：<a href="https://www.websiteplanet.com/webtools/unminify-js/">JS &amp; CSS Unminifier</a></p>
<blockquote>
<p>This tool does the job: it unminifies, reformats and reforms JavaScript (and CSS) code, making it readable again. (It’s very user-friendly and free! )</p>
</blockquote>
<p>之所以推薦我這個，是因為她在找 unminify 工具的過程當中找到了我這篇文章，她在信中很樂於分享地說：</p>
<blockquote>
<p>I’m sure your readers will appreciate it, especially if they’ve struggled like me.</p>
</blockquote>
<p>所以說，怎能不分享個呢😎（謝謝 Giana！）</p>
<hr>
<p>參考自：<a href="https://peter-chang.medium.com/es6-10-features-javascript-developer-must-know-98b9782bef44">[ES6] Javascript 開發者必須知道的 10 個新功能</a></p>
<h2 id="Default-Parameters"><a href="#Default-Parameters" class="headerlink" title="Default Parameters"></a>Default Parameters</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters">MDN</a>:<br><strong>Default function parameters</strong> allow named parameters to be initialized with default values if no value or <code>undefined</code> is passed.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="function"><span class="keyword">function</span>(<span class="params">height = <span class="number">173</span>, weight = <span class="number">66</span>, college = <span class="string">&#x27;NCTU&#x27;</span></span>) </span>&#123; ... &#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Template-Literals"><a href="#Template-Literals" class="headerlink" title="Template Literals"></a>Template Literals</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals">MDN</a>:<br>Template literals are string literals allowing embedded expressions. You can use multi-line strings and <a href="https://dmitripavlutin.com/string-interpolation-in-javascript/">string interpolation</a> features with them.</p>
<h3 id="Multi-line-Strings"><a href="#Multi-line-Strings" class="headerlink" title="Multi-line Strings"></a>Multi-line Strings</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">let</span> sentence = <span class="string">&#x27;first line\n&#x27;</span></span><br><span class="line">+ <span class="string">&#x27;second line&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> sentence = <span class="string">`first line</span></span><br><span class="line"><span class="string">second line`</span>;</span><br></pre></td></tr></table></figure>

<h3 id="String-Interpolation"><a href="#String-Interpolation" class="headerlink" title="String Interpolation"></a>String Interpolation</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">let</span> sentence = <span class="string">&#x27;My name is &#x27;</span> + first + <span class="string">&#x27; &#x27;</span> + last + <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> sentence = <span class="string">`My name is <span class="subst">$&#123;first&#125;</span> <span class="subst">$&#123;last&#125;</span>.`</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Destructuring-Assignment"><a href="#Destructuring-Assignment" class="headerlink" title="Destructuring Assignment"></a>Destructuring Assignment</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">MDN</a>:<br>The <strong>destructuring assignment</strong> syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> me = &#123; <span class="attr">name</span>: <span class="string">&#x27;Tim&#x27;</span>, <span class="attr">college</span>: <span class="string">&#x27;NCTU&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> moreAboutMe = &#123; me, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> &#125;;</span><br><span class="line"><span class="comment">// &#123; &#123; name: &#x27;Tim&#x27;, college:&#x27;NCTU&#x27; &#125;, gender: &#x27;male&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> moreAboutMe = &#123; ...me, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> &#125;;</span><br><span class="line"><span class="comment">// &#123; name: &#x27;Tim&#x27;, college:&#x27;NCTU&#x27; , gender: &#x27;male&#x27; &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Array-destructuring"><a href="#Array-destructuring" class="headerlink" title="Array destructuring"></a>Array destructuring</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> [red, yellow, green] = foo;</span><br><span class="line"><span class="built_in">console</span>.log(red); <span class="comment">// one</span></span><br><span class="line"><span class="built_in">console</span>.log(yellow); <span class="comment">// two</span></span><br><span class="line"><span class="built_in">console</span>.log(green); <span class="comment">// three</span></span><br></pre></td></tr></table></figure>

<h3 id="Object-destructuring"><a href="#Object-destructuring" class="headerlink" title="Object destructuring"></a>Object destructuring</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> me = &#123; <span class="attr">name</span>: <span class="string">&#x27;Tim&#x27;</span>, <span class="attr">college</span>: <span class="string">&#x27;NCTU&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; name, college &#125; = me;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// Tim</span></span><br><span class="line"><span class="built_in">console</span>.log(college); <span class="comment">// NCTU</span></span><br></pre></td></tr></table></figure>

<h2 id="Object-Literals"><a href="#Object-Literals" class="headerlink" title="Object Literals"></a>Object Literals</h2><p><a href="https://pjchender.blogspot.com/2017/01/es6-object-literal-extension.html">[筆記] JavaScript ES6 中的物件的擴展（object literal extension）</a></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeMachine</span>(<span class="params">name, year, price</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// name: name,</span></span><br><span class="line">    name,</span><br><span class="line">    year,</span><br><span class="line">    <span class="comment">// 也可以覆蓋掉傳進來的值</span></span><br><span class="line">    <span class="attr">price</span>: <span class="number">810000</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ⽅法 methods 也能放進來</span></span><br><span class="line">    <span class="attr">description</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;year&#125;</span> machine <span class="subst">$&#123;name&#125;</span> is <span class="subst">$&#123;price&#125;</span> dollars`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 簡寫</span></span><br><span class="line">    <span class="function"><span class="title">description</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;year&#125;</span> machine <span class="subst">$&#123;name&#125;</span> is <span class="subst">$&#123;price&#125;</span> dollars`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 允許將表達式 expression 作為屬性名稱，以達到動態賦值的效果（包在[]裡⾯）</span></span><br><span class="line">    [year+<span class="string">&#x27;machine&#x27;</span>]: price,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> machine = makeMachine(<span class="string">&#x27;Switch&#x27;</span>, <span class="number">2020</span>, <span class="number">9780</span>);</span><br><span class="line"></span><br><span class="line">machine.description();</span><br><span class="line"><span class="comment">// 2020 machine Switch is 9780 dollars</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(machine.price);</span><br><span class="line"><span class="comment">// 810000</span></span><br></pre></td></tr></table></figure>

<h2 id="Arrow-Functions"><a href="#Arrow-Functions" class="headerlink" title="Arrow Functions"></a>Arrow Functions</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">MDN</a>:<br>An <strong>arrow function expression</strong> is a compact alternative to a traditional <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function">function expression</a>, but is limited and can’t be used in all situations.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多個參數</span></span><br><span class="line">(param1, param2, ..., paramN) =&gt; &#123; statements &#125;;</span><br><span class="line"><span class="function">(<span class="params">param1, param2, ..., paramN</span>) =&gt;</span> &#123; <span class="keyword">return</span> expression; &#125;;</span><br><span class="line"><span class="function">(<span class="params">param1, param2, ..., paramN</span>) =&gt;</span> expression;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ⼀個參數</span></span><br><span class="line"><span class="function">(<span class="params">singleParam</span>) =&gt;</span> &#123; statements &#125;;</span><br><span class="line"><span class="function"><span class="params">singleParam</span> =&gt;</span> &#123; statements &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 沒有參數</span></span><br><span class="line"><span class="function">() =&gt;</span> &#123; statements &#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h2><p><a href="https://andyyou.github.io/2017/06/27/js-promise/">Promise 學習筆記 | DEVLOG of andyyou</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">MDN</a>:<br>The <strong><code>Promise</code></strong> object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.</p>
<h3 id="建⽴-Promise"><a href="#建⽴-Promise" class="headerlink" title="建⽴ Promise"></a>建⽴ Promise</h3><p>把 <code>Promise</code> 想成是⼀個 object！</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">hasEnoughMoney = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pleaseBuyMeSwitch = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (hasEnoughMoney) &#123;</span><br><span class="line">    <span class="keyword">const</span> gift = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Switch&#x27;</span>,</span><br><span class="line">      <span class="attr">price</span>: <span class="number">9780</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    resolve(gift); <span class="comment">// 回傳 gift 這個物件</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> reason = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;I lost my 20000 dollars at the gym!!!&#x27;</span>);</span><br><span class="line">    reject(reason); <span class="comment">// 回傳 reason 這個 Error 物件</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="使⽤-Promise"><a href="#使⽤-Promise" class="headerlink" title="使⽤ Promise"></a>使⽤ Promise</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> askJoeman = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  pleaseBuyMeSwitch</span><br><span class="line">  .then(<span class="function">(<span class="params">fulfilled</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;I got:&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(fulfilled);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error.message);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">askJoeman();</span><br></pre></td></tr></table></figure>

<h3 id="簡化寫法"><a href="#簡化寫法" class="headerlink" title="簡化寫法"></a>簡化寫法</h3><p>若某個 function 沒呼叫 <code>reject</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> showoff = <span class="function"><span class="keyword">function</span>(<span class="params">something</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> message = <span class="string">`Hahaha! I got a new <span class="subst">$&#123;something&#125;</span>!`</span>;</span><br><span class="line">    resolve(message);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>可簡寫成</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> showoff = <span class="function"><span class="keyword">function</span>(<span class="params">something</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> message = <span class="string">`Hahaha! I got a new <span class="subst">$&#123;something&#125;</span>!`</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(message);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="ES7-async-await-⾮同步寫法"><a href="#ES7-async-await-⾮同步寫法" class="headerlink" title="ES7 async/await ⾮同步寫法"></a>ES7 async/await ⾮同步寫法</h3><p>原本的寫法</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> askJoeman = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  pleaseBuyMeSwitch</span><br><span class="line">  .then(<span class="function">(<span class="params">fulfilled</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;I got:&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(fulfilled);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error.message);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>新寫法</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">askJoeman</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> something = <span class="keyword">await</span> pleaseBuyMeSwitch;</span><br><span class="line">    <span class="keyword">let</span> message = <span class="keyword">await</span> showoff(something.name);</span><br><span class="line">    <span class="built_in">console</span>.log(message);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error.message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// await ⼀定要包在 async function 裡⾯才能⽤</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> askJoeman();</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<p>cleaner and more readable!</p>
<h2 id="Let-amp-Const-Block-Scoped"><a href="#Let-amp-Const-Block-Scoped" class="headerlink" title="Let &amp; Const, Block-Scoped"></a>Let &amp; Const, Block-Scoped</h2><p><code>let</code> 僅在當前的 block 內有效，重複定義時會 throw error。<br><code>const</code> 同樣只在當前的 block 內有效，定義時必須 initialize，且不能更改。</p>
<h2 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes">MDN</a>:<br>Classes are a template for creating objects. They encapsulate data with code to work on that data.</p>
<h3 id="Class-Declaration-類別宣告"><a href="#Class-Declaration-類別宣告" class="headerlink" title="Class Declaration 類別宣告"></a>Class Declaration 類別宣告</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Class-Expression-類別敘述"><a href="#Class-Expression-類別敘述" class="headerlink" title="Class Expression 類別敘述"></a>Class Expression 類別敘述</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// unnamed</span></span><br><span class="line"><span class="keyword">let</span> People = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// named</span></span><br><span class="line"><span class="keyword">let</span> People = <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> PG = <span class="keyword">new</span> People(<span class="string">&#x27;Curry&#x27;</span>, <span class="number">32</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Prototype-Methods-原型⽅法"><a href="#Prototype-Methods-原型⽅法" class="headerlink" title="Prototype Methods 原型⽅法"></a>Prototype Methods 原型⽅法</h3><p>可包 getter、setter、method 等等的進到 class 定義裡⾯，詳⾒ <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#prototype_methods">MDN</a>。</p>
<h3 id="Static-methods-靜態⽅法"><a href="#Static-methods-靜態⽅法" class="headerlink" title="Static methods 靜態⽅法"></a>Static methods 靜態⽅法</h3><p>不需要實體化就可以被呼叫，也無法被已實體化的類別物件呼叫。<br>經常被⽤來建⽴給應⽤程式使⽤的⼯具函數。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">greeting</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;name&#125;</span>. I&#x27;m <span class="subst">$&#123;age&#125;</span> years old now.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> SG = <span class="keyword">new</span> People(<span class="string">&#x27;Thompson&#x27;</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">SG.greeting(<span class="string">&#x27;Thompson&#x27;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="comment">// Thrown:</span></span><br><span class="line"><span class="comment">// TypeError: SG.greeting is not a function</span></span><br><span class="line"></span><br><span class="line">People.greeting(<span class="string">&#x27;Green&#x27;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="comment">// My name is Green. I&#x27;m 30 years old now.</span></span><br></pre></td></tr></table></figure>

<h3 id="⽤-extends-建⽴⼦類別-＆-⽤-super-呼叫⽗類別"><a href="#⽤-extends-建⽴⼦類別-＆-⽤-super-呼叫⽗類別" class="headerlink" title="⽤ extends 建⽴⼦類別 ＆ ⽤ super 呼叫⽗類別"></a>⽤ extends 建⽴⼦類別 ＆ ⽤ super 呼叫⽗類別</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="title">introduce</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(`I&#x27;m $&#123;name&#125;.`); name 前⾯沒加上 this 會報錯</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`I&#x27;m <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Star</span> <span class="keyword">extends</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, number, position</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">    <span class="built_in">this</span>.number = number;</span><br><span class="line">    <span class="built_in">this</span>.position = position;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">introduce</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.introduce();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`I wear number <span class="subst">$&#123;<span class="built_in">this</span>.number&#125;</span>. I play <span class="subst">$&#123;<span class="built_in">this</span>.position&#125;</span>!`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> star = <span class="keyword">new</span> Star(<span class="string">&#x27;Antetokounmpo&#x27;</span>, <span class="number">34</span>, <span class="string">&#x27;PF&#x27;</span>);</span><br><span class="line">star.introduce();</span><br><span class="line"><span class="comment">// I&#x27;m Antetokounmpo.</span></span><br><span class="line"><span class="comment">// I wear number 34. I play PF!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 之前幻想字母哥來勇士xD</span></span><br></pre></td></tr></table></figure>

<h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">MDN</a>:<br>providing mechanisms for splitting JavaScript programs up into separate modules that can be imported when needed.</p>
<h3 id="Export"><a href="#Export" class="headerlink" title="Export"></a>Export</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export">MDN</a>:<br>The <code>export</code> statement is used when creating JavaScript modules to export live bindings to functions, objects, or primitive values from the module so they can be used by other programs with the <code>import</code> statement.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> password = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getStatus</span>(<span class="params">id</span>) </span>&#123; ... &#125;;</span><br></pre></td></tr></table></figure>

<h3 id="Import"><a href="#Import" class="headerlink" title="Import"></a>Import</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">MDN</a>:<br>The <strong>static</strong> <code>import</code> statement is used to import read only live bindings which are exported by another module.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; password, getStatus &#125; <span class="keyword">from</span> <span class="string">&#x27;module-name&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(password); <span class="comment">// hello</span></span><br></pre></td></tr></table></figure>

<h3 id="Export-Default"><a href="#Export-Default" class="headerlink" title="Export Default"></a>Export Default</h3><p>可以讓要使⽤ module 的 client，在不知道 module export 了哪些名稱的情況下，能⾃訂名稱取⽤ module 裡⾯定義的東西。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Tim&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">greeting</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hello!&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ================================================== */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> any-name-you-want-to-take <span class="keyword">from</span> <span class="string">&#x27;module-name&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(any-name-you-want-to-take.name);</span><br><span class="line"><span class="comment">// Tim</span></span><br><span class="line"></span><br><span class="line">any-name-you-want-to-take.greeting();</span><br><span class="line"><span class="comment">// Hello!</span></span><br></pre></td></tr></table></figure>

<br>
希望讀完這篇文章的您能夠有所收穫，我們下篇文見啦 😃]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
        <tag>Cheatsheet</tag>
      </tags>
  </entry>
  <entry>
    <title>不完美行動</title>
    <url>/2021/09/just-do-it/</url>
    <content><![CDATA[<p>任何偉大的成果，都是由一連串不完美行動所連接起來的。<br>（節錄自「<a href="https://www.youtube.com/channel/UCu545MWig-4D4TxYhr0UBAA">Ryan Wu</a>」的「<a href="https://www.youtube.com/watch?v=LWNz1pgJftQ">不完美行動</a>」）</p>
<span id="more"></span>
<hr>
<p>時間過得真快，距離上次更新部落格已經有兩個多月的時間了！</p>
<p>我在想之所以會這樣，是不是因為自己都等不到心中所謂的「完美時機」</p>
<p>這有點難去用言語表達，畢竟我國文不好，不過大概的感覺是：<br>「非得讓自己的行動看起來是完美的才肯去行動。」</p>
<p>然而，要等到那個時機來臨並不容易，往往因為這樣，遲遲不展開行動。</p>
<p>我現在寫這篇文其實還蠻不舒服的，內心「追求完美」的那一部份不斷阻撓我，希望我快點停手，不要再繼續寫下去⋯⋯（邊寫，邊在意說語句、文法到底對不對、通不通順，然後就卡住了）</p>
<p>不管了，先不去理會那一部份的我怎樣地批評指責，繼續寫下去吧！（但還是會掙扎）</p>
<hr>
<p>那你可能會想說，既然這樣，為何還要寫這一篇沒什麼意義的文章呢？很間單，因為我希望自己能「展開行動」，就算這個行動再怎樣「不完美」，它能讓我有種前進的感覺之外，也能稍微讓我擺脫「拖延懶惰」的慣性！<br><strong>（牛頓第一運動定律：「靜者恆靜，動者恆作等速度運動」，需要靠名為「行動」的外力方能改變狀態，就算那個行動再怎麼小也行）</strong></p>
<p>試著去分析自己為何兩個多月都遲遲不肯動筆：<br>除了上面提到的「追求完美」之外，咦，好像就是這個原因。但總不能就這樣歸咎於「追求完美」，而當作什麼事都沒發生吧？</p>
<p>我在想會不會是因為我之前每一篇文都會特意去 <a href="https://unsplash.com/">Unsplash</a> 上面找適合的圖片，到後來就會覺得沒放好像又怪怪的，沒有「有始有終」的精神。但其實根本就沒差，誰說之前的自己達到什麼標準，之後的自己都得跟上？</p>
<p>我發現這真的是問題所在欸，當然「之前放圖所以之後都要放圖」只是問題概念的其中一個實體，我真的常常會因為自己一開始做得比想像中好，覺得說之後若做同樣事情也要一樣好甚至更傑出，然而就是因為這個想法，往往導致我裹足不前，「在還沒確定自己會做得更好之前，絕不去破壞那完美的感覺」，但事實上，根本沒有所謂的完美⋯⋯（像我的「<a href="https://www.youtube.com/channel/UCa73p-0ChCqtxubUc4Lq41A">卡尼多玩聲音</a>」YouTube 頻道，到今天仍舊只有兩小段音樂而已，都積灰塵了呢⋯⋯）</p>
<p>但，不去行動，怎麼會有結果呢？</p>
<p>不論結果是好是壞，同樣都會帶來價值，有些時候，那些令自己感到不滿意的結果，反而更能成為進步的養分呢！（這讓我想起《未來小子》這部電影，電影裡面的哲理我很喜歡）</p>
<hr>
<p>「<a href="https://www.youtube.com/channel/UCu545MWig-4D4TxYhr0UBAA">Ryan Wu</a>」的<a href="https://www.youtube.com/watch?v=eVKC1JZ4gDU">這個影片</a>我覺得還不錯，他介紹了他對於「不完美行動」的定義及心法。<br>當然有一點我得再次提醒自己，不要把所有接收到的資訊都當作是真理，也要懂得去做篩選。</p>
<p>有點不知所云了，反正寫這篇主要是希望自己不要侷限於一個框架，「完美」看似美好，但綁手綁腳的感覺實在難受。對於「卡尼多隨筆」，接下來我不再追求「完美」，而是當有什麼東西想和大家分享時，就用我可能語句不通順但是最貼近我的文字去做分享，不要太在意說如果寫了一篇主觀上認為「沒什麼質感」的文章會不會破壞「卡尼多隨筆」的整體(?)或完美性，因為太在意，反而會讓自己停滯不前，以為不行動沒犯錯就 perfect，但這樣子其實只是停留在原點。</p>
<hr>
<p>反正結論就是，接下來想寫什麼就寫什麼囉！<br><br></p>
]]></content>
  </entry>
  <entry>
    <title>卡尼多隨筆？</title>
    <url>/2022/10/keep-moving-forward/</url>
    <content><![CDATA[<p>目前一點都不隨筆，該開始隨筆起來了！<br><a href="https://www.youtube.com/channel/UCVJOQCQI-lK7bTcKVG7ArYw/featured">卡尼多</a>也是，灰塵好像積太多了🤔</p>
]]></content>
  </entry>
  <entry>
    <title>如何解決 Logic Pro Plug-In Compatibility 的問題</title>
    <url>/2021/10/logic-pro-plug-in-compatibility/</url>
    <content><![CDATA[<p>上配樂製作課時，裝完 EastWest 的 Opus 和 Play 之後，在 Plug-In Manager「Compatibility」的欄位上居然不是顯示 <code>successfully validated</code>，卻分別是 <code>couldn&#39;t be opened</code> 和 <code>crashed validation</code>！</p>
<p>這一篇將告訴你：如何用非常簡單的方法解決這個問題。雖然不能百分之百確定這個方法能解決所有類似的問題，但至少我試了以後問題就排除了～</p>
<span id="more"></span>

<h3 id="打開-Plug-in-Manager"><a href="#打開-Plug-in-Manager" class="headerlink" title="打開 Plug-in Manager"></a>打開 Plug-in Manager</h3><p><img src="1.png" alt="1.png"></p>
<h3 id="用名稱搜尋出-Plug-in"><a href="#用名稱搜尋出-Plug-in" class="headerlink" title="用名稱搜尋出 Plug-in"></a>用名稱搜尋出 Plug-in</h3><p>截圖前已解決，所以圖中「Compatibility」顯示的是 <code>successfully validated</code>。</p>
<p><img src="2.png" alt="2.png"></p>
<h3 id="Reset-amp-Rescan-Selection"><a href="#Reset-amp-Rescan-Selection" class="headerlink" title="Reset &amp; Rescan Selection"></a>Reset &amp; Rescan Selection</h3><p>按一下你想修復的 plug-in，然後按 <code>Reset &amp; Rescan Selection</code>。</p>
<p>按完之後會跑出「Audio Unit Validation Result」，我猜是 Logic 給 plug-in 跑一些測試，通過之後，就核發 <code>successfully validated</code> 吧？（蠻像是軟體工程界的 unit test）</p>
<p><img src="3.png" alt="3.png"></p>
<br>
這樣就大功告成囉！（我原本還以為解決過程會很繁瑣呢xD）]]></content>
      <tags>
        <tag>Logic Pro</tag>
      </tags>
  </entry>
  <entry>
    <title>用 STM32 開發板做一台類似投籃機的遊戲機台</title>
    <url>/2021/01/microprocessor-project/</url>
    <content><![CDATA[<p><a href="/2021/01/microprocessor-project"><img src="https://images.unsplash.com/photo-1514031231291-fee925070a61?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=1950&q=80" style="width:50vw;" /></a></p>
<!-- <img src="1.jpeg" style="width:50vw;" /> -->

<p>大三上修「微處理機系統實驗」時所做的期末專題。</p>
<span id="more"></span>

<p>這次僅做簡單的紀錄。</p>
<hr>
<h2 id="開發過程寫的文件"><a href="#開發過程寫的文件" class="headerlink" title="開發過程寫的文件"></a>開發過程寫的文件</h2><h3 id="專題提案"><a href="#專題提案" class="headerlink" title="專題提案"></a>專題提案</h3><p>知道到底要做什麼是首要之務。<br><a href="https://github.com/kanido386/playground/blob/master/microprocessor-project/專題提案.pdf" target="_blank">這是專題提案～</a></p>
<h3 id="實作方向"><a href="#實作方向" class="headerlink" title="實作方向"></a>實作方向</h3><p>開始行動前，如果能先有個大概方向，往往更有利於進度的推進。<br>後來我又列出實作細節，非常 detailed 的那種，這不但讓我克服了拖延，也讓我因為能更容易地各個擊破而產生很大的成就感！<br><a href="https://github.com/kanido386/playground/blob/master/microprocessor-project/實作方向.pdf" target="_blank">這是實作方向～</a></p>
<hr>
<h2 id="用影片來記錄"><a href="#用影片來記錄" class="headerlink" title="用影片來記錄"></a>用影片來記錄</h2><h3 id="前一天測試"><a href="#前一天測試" class="headerlink" title="前一天測試"></a>前一天測試</h3><p>終於花非常多時間弄完有的沒的事情以後，來進行個測試。</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/dAJFhHayooc" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h3 id="demo當天再測試"><a href="#demo當天再測試" class="headerlink" title="demo當天再測試"></a>demo當天再測試</h3><p>在教授和助教們來評分以前，趕快再來測試一番，出了什麼差錯就功虧一簣了！</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/M_ND80FLdWY" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h3 id="機台拆解"><a href="#機台拆解" class="headerlink" title="機台拆解"></a>機台拆解</h3><p>期末展結束以後要把所有器材還給助教，不得不拆解這個花我非常多心思的機台 😢<br>剩下的紙箱、杯子留著也不能做什麼，只好回收掉⋯⋯</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/jmL-ML8BDvc" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<hr>
<h2 id="一些照片"><a href="#一些照片" class="headerlink" title="一些照片"></a>一些照片</h2><figure>
  <!-- <img src="https://i.imgur.com/4S5wvKm.jpg" style="width:30vw;" /> -->
  <img src="2.jpg" style="width:30vw;" />
  <figcaption>來玩機台囉！</figcaption>
</figure>
<figure>
  <!-- <img src="https://i.imgur.com/vXYNK6y.jpg" style="width:30vw;" /> -->
  <img src="3.jpg" style="width:30vw;" />
  <figcaption>挖掉杯子底部，讓球通過</figcaption>
</figure>
<figure>
  <!-- <img src="https://i.imgur.com/qbR9bUC.jpg" style="width:30vw;" /> -->
  <img src="4.jpg" style="width:30vw;" />
  <figcaption>機台是放斜的，這樣可以讓球滾下來</figcaption>
</figure>
<figure>
  <!-- <img src="https://i.imgur.com/jPt5Qn1.jpg" style="width:30vw;" /> -->
  <img src="5.jpg" style="width:30vw;" />
  <figcaption>這就是最麻煩無趣的部分：接線（機台裡面超亂）</figcaption>
</figure>

<hr>
<h2 id="至少程式碼不會和我分開"><a href="#至少程式碼不會和我分開" class="headerlink" title="至少程式碼不會和我分開"></a>至少程式碼不會和我分開</h2><p><a href="https://github.com/kanido386/playground/tree/master/microprocessor-project" target="_blank">這是專案資料夾～</a><br>只需要看 <code>/final-project/src/</code> 裡面的 code 就行囉！<br>（邏輯的部分在 <code>main.c</code> 裡面～）</p>
<p>原本我是用一個叫 SystemWorkbench 的 IDE 來開發，但後來發現，其實用 Visual Studio Code 來寫 code 會比較有效率，能不能同時縮排很多行 code 真的差非常多！<br>（GitHub 上面呈現 code 的縮排看起來有點恐怖，就不要計較了啦 😂）<br><br><br>今天的分享就到這邊，我們下篇文見吧 😃</p>
]]></content>
      <tags>
        <tag>交大</tag>
        <tag>課程</tag>
        <tag>專題</tag>
        <tag>微處理機</tag>
        <tag>STM32</tag>
        <tag>開發板</tag>
        <tag>投籃機</tag>
      </tags>
  </entry>
  <entry>
    <title>【心得】LINE Developers Meetup &amp;#35;16</title>
    <url>/2022/03/line-developers-meetup-16/</url>
    <content><![CDATA[<p><a href="/2022/03/line-developers-meetup-16"><img src="https://i.imgur.com/lQVnBtc.jpg" style="width:50vw;" /></a></p>
<!-- <img src="1.png" style="width:50vw;" /> -->

<p>昨晚參加了 LINE Developers 的實體 Meetup，這也是我參與開發社群活動的初體驗，有不少收穫，在此做分享！</p>
<span id="more"></span>

<h2 id="一開始"><a href="#一開始" class="headerlink" title="一開始"></a>一開始</h2><p>這次的 Meetup 辦在台大體育館二樓的「後台Backstage Café」。</p>
<p>18:30 開放入場，而我也差不多那個時間到，沒想到當我上階梯，一看，哇，怎麼已經那麼多人在排隊了啊！距離活動開始不是還有半小時嗎？</p>
<h3 id="抓住機會"><a href="#抓住機會" class="headerlink" title="抓住機會"></a>抓住機會</h3><p>Anyway，進去了以後，吧台前面的桌上擺滿了吐司三明治和飲料，拿了一份，正準備要進裡面找位子時，聽到 LINE 的 HR 說還有限量十位的「快速面試」名額還沒額滿，於是這讓我沒多思考一秒，快快把東西放好在隨便一個位子上，拿著手機走到報名面試處的附近，深怕錯過了這個難得的機會！</p>
<p>其實好幾天前就已經知道有這個特別活動，原本也打算投履歷來體驗一下快速面試 (哦對了那個面試是在面一個叫做 LINE TECH FRESH 的實習)，也上網查了一下，有找到說好像要投英文履歷錄取的機會比較高，但我目前只有中文履歷，最近嘗試做英文履歷也不太順利 (比想像中難做好幾倍啊)，再加上覺得身為應屆畢業生而且暫時不打算繼續念研究所的我應該會比其他還是在校生的應徵者機會低很多，所以就決定放棄不嘗試了。</p>
<p>時間拉回到昨晚那個 moment，HR 說還有名額，而我的手機也握在手了，我當時似乎沒多思考什麼，什麼根本完全沒準備面試啊、履歷還是用中文而且沒修改啊、我之後不是在校生啊，都拋在腦後了，趕快找那個實習申請的頁面，也快點複製我 CakeResume 履歷的網址，倉促填一填勾一勾申請完以後就趕快找 HR 報名快速面試。</p>
<p>很怕已經沒有名額了，都已經填好資料，錯失嘗試機會我覺得會比面試出糗還讓我後悔好一段時間⋯⋯</p>
<h3 id="第七位"><a href="#第七位" class="headerlink" title="第七位"></a>第七位</h3><p>幸好後來有報成功，HR 還一個一個問報名快速面試的人說這份是不是你的履歷，跟我們做確認，我還趁機瞄到前一位的履歷，哇，是英文的欸，是沒仔細去看，但感覺內容好豐富啊！而當 HR 把她的筆電轉過來秀出我的履歷時，那股羞恥感還不小欸😂</p>
<p>「你是第七位，8.30 先來這邊準備，大概 8.40 開始面試」，我不知道我是誰、我在哪，帶著一股奇妙的感受，回到位子上準備迎接前面的 talk。</p>
<hr>
<h2 id="TECH-FRESH-實習生分享心得"><a href="#TECH-FRESH-實習生分享心得" class="headerlink" title="TECH FRESH 實習生分享心得"></a>TECH FRESH 實習生分享心得</h2><p>一開始是由 LINE TAIWAN 的技術長為我們說明 LINE 的願景之類的，有點忘了，那個時候正享用著活動為我們準備的餐點，還蠻好吃的，但很可惜沒一邊專心邊聽講一邊做筆記😅</p>
<p>接著分別是 LINE TODAY、LINE SHOPPING、LINE SPOT 的三位實習生輪番上陣，和我們分享了產品服務的介紹、架構以及他們透過實習學到了什麼。</p>
<p>雖說不要做無謂的比較，但當知道身邊周遭年紀跟你差不多的同儕比你優秀很多的時候，真的會後悔為什麼當初應該怎樣怎樣或是不要怎樣而我卻怎樣，但畢竟時光一去不復返，人只能向前看，我們應該要做的，是秉持著「成長性思維」讓自己繼續前進，最該比較的是過去的自己，而不是一直拿別人去批評自己！當然，向他人看齊是很好的，能藉此激勵自我讓自己成長，但不要過度，否則陷入情緒漩渦而停滯不前就很可惜了。</p>
<h3 id="分享學到什麼的好架構"><a href="#分享學到什麼的好架構" class="headerlink" title="分享學到什麼的好架構"></a>分享學到什麼的好架構</h3><p>好像有點扯遠了，這個 part 我只有簡短紀錄第二位實習生分享的東西：</p>
<blockquote>
<p>這是什麼：產品的簡介<br>我學到了什麼：程式語言、框架、CI/CD 工具之類的，好像也有軟實力的部分<br>完成/達到了什麼：最後多少人使用、成效如何、對於個人有怎麼樣的啟發(?)</p>
</blockquote>
<p>她用這個架構來闡述她在一個 project 當中具體學到了什麼，我覺得這個架構方式還蠻棒的，之後或許能嘗試看看用這個來架構我的分享🤔，如果有機會做分享的話xD</p>
<p>三位都還有很多不錯的分享，但因為沒做筆記，也忘了差不多，所以這個部分就到這邊吧！<br>（所以真的要做記錄啊，不管是打字或是拍照，這樣方便自己回憶起來，才不會白聽啊OTZ）</p>
<hr>
<h2 id="和-Automation-Engineer-聊聊"><a href="#和-Automation-Engineer-聊聊" class="headerlink" title="和 Automation Engineer 聊聊"></a>和 Automation Engineer 聊聊</h2><p>其實這個 Meetup 不必得一直坐在位子上聽分享，你也可以到處走走然後到處跟別人聊，跟小時候玩神奇寶貝電玩走草叢的概念很像xD</p>
<p>原本我是想找 Evan 聊關於部落格的事情，因為我<a href="http://www.evanlin.com/">就是因為他</a>才開啟<a href="https://kanido386.github.io" target="_blank">我的部落格之路</a>啊！</p>
<p>但看到大家都在問跟 LINE 工作有關的問題，突然問部落格好像有點突兀，所以我就問了 Server-side Engineer 這個職位，然後我也忘了為什麼，不知不覺輾轉提到了 Service QA Engineer，於是 Evan 就帶我引介給一位 Automation Engineer。</p>
<h3 id="Side-Project-建議"><a href="#Side-Project-建議" class="headerlink" title="Side Project 建議"></a>Side Project 建議</h3><p>我有提到說我希望能透過 side project 來幫助我面試正職的工作。</p>
<p>（他說）</p>
<p>做 side project 在深不在廣，要展現出來給面試你的人看的，是你在短時間之內能自學到什麼程度，以及中間的思考流程。最重要的就是展現出自學能力及你對於這方面的熱忱，畢竟剛畢業真正會很多東西、很厲害的人佔少數，你的 potential 如何才是他們最 care 的！</p>
<p>想學什麼？怎麼學？現在網路上學習資源真的非常多，YouTube 各種教學影片，隨便 google 幾乎能找得到各種教學文，所以他又再次提到，最重要的真的就是學習能力，一個能讓你快速上手新知識和技術的學習能力，至於學習的內容本身，我這樣聽下來，反倒是其次，因為新進公司時通常對他們來說你就像是一張白紙，差別在於品質的好壞，也就是 potential 啦，你能快速學習新事物，比你現在會什麼，還要來得重要！（當然通常會越多東西，也會有一定的快速學習能力）</p>
<p>（我反思）</p>
<p>或許之後有做 side project 真的可以寫 blog post 或是錄影片做分享，一方面能 show 給面試官看我的學習能力、熱忱、思考方式，最重要的是讓自己更清楚知道自己在做什麼，被面試官問到的時候才比較不會被問倒QQ（快速面試的體悟，見下面的分享）</p>
<h3 id="關於未來職涯選擇"><a href="#關於未來職涯選擇" class="headerlink" title="關於未來職涯選擇"></a>關於未來職涯選擇</h3><p>我說我職涯初期想先走後端，因為我之前在梅竹黑客松開發部就是在寫後端。</p>
<p>（他說）</p>
<p>不要只因為現在會什麼就決定未來走哪方面，而是自己熱忱的地方在哪，然後再去靠自學補足！</p>
<p>（我反思）</p>
<p>也是，畢竟人生的路還很長，而且網路上資源豐富，想學什麼或是想報名什麼都很方便，不必完全因為之前會什麼而就那樣走下去。當然熱忱不是想找就找得到的，而是在不斷的嘗試當中，逐漸被激發出來的，沒嘗試，永遠不會知道自己對這一塊是不是有熱忱！</p>
<p>所以我職涯初期真的會走後端？或許吧，但如果近期在什麼因緣際會之下接觸到什麼對它產生極大的興趣和熱忱，而決定先往那方面嘗試，那也挺不錯的不是嗎？</p>
<hr>
<h2 id="快速面試"><a href="#快速面試" class="headerlink" title="快速面試"></a>快速面試</h2><p>面試前超級緊張的，腦海裡只有，完蛋，完全沒準備，等等自我介紹該說什麼啊？我是不是不應該貿然報名這個面試的，不應該挖坑給自己跳？我可以強烈感受到我在活著，好久沒這樣了。</p>
<p>一進去，有三位面試官，那感覺是沒想像中恐怖啦。中間的面試官請我簡單的自我介紹，於是我就語無倫次地說我是誰、我讀哪、我職涯初期打算先做後端，然後直接表明我是大四生，應該沒資格報名吧？但他們說剛剛甚至還有高中生來面試呢！所以這不該是理由。而我也再表明我主要是來了解 LINE 相關的工作跟來面試看看，感受一下的，應徵實習不是我的目的。不知道是不是因為這樣，還是其實面試就是這樣，或是因為快速面試只有 15 分鐘，他們就沒讓我繼續自我介紹，而是直接問我履歷上的內容。</p>
<p>中間的過程我就不照時間順序來敘述了，等等也會穿插提到，接下來就來分享我面試完後，透過「自由書寫」的方式寫下來的種種心得和體悟。（當然寫在這邊的內容是有經過整理和潤飾的）</p>
<h3 id="面試官想知道你什麼？"><a href="#面試官想知道你什麼？" class="headerlink" title="面試官想知道你什麼？"></a>面試官想知道你什麼？</h3><p>面試官會希望透過你的自我介紹，知道你的特質、表達能力，以及問你問題時，你能不能夠很快聽懂，並且回答得得體合宜。</p>
<p>這次的快速面試，讓我有著最深的體悟，就是「回答得讓人聽得懂」這一點啊！（這是我最自卑也最想改善的一環…）</p>
<p>面試官真的不那麼 care 面試者現階段會不會很多東西，而是他多有 potential，畢竟進公司以後，很多東西都要從頭學習。</p>
<p>最該展現出來的，就是你是一個資質很好的紙張，你能夠快速學習新事物、溝通表達上ok(QQ)、特質是否符合該職位、甚至可能是企業文化的適配性，當然你會什麼、曾經做過什麼，能用面試官聽得懂的方式表達出來是最好！</p>
<h3 id="對履歷要有著絕對的了解"><a href="#對履歷要有著絕對的了解" class="headerlink" title="對履歷要有著絕對的了解"></a>對履歷要有著絕對的了解</h3><p>今天三位面試官真的都從履歷上面我有列出來的專案來問我問題！</p>
<p>這邊以我為例，去年(2021)暑假的黑客松競賽、交大藝趣節拼貼專案 Android APP、梅竹黑客松開發部。</p>
<p>被問到：</p>
<ol>
<li>開發部開發出來的活動平台一共幾個人使用</li>
<li>因為拼貼專案有提到，請比較 Kotlin、Java 的差別，以及自己覺得寫起來有什麼差別，為什麼要同時用兩種程式語言開發呢？</li>
<li>開發部那邊有列出 Nuxt.js，你能不能簡述它是什麼呢？</li>
<li>去年的黑客松競賽你負責什麼呢？請簡單介紹一下那個聊天機器人。為什麼是用 Flask 呢？上面有列出「串接第三方 API」請問是什麼呢？</li>
</ol>
<p>然而我⋯⋯ 完全不知道自己在回答什麼⋯⋯</p>
<p>關於履歷，不太會補充說明或是那個 part 不是你做的部分，真的就不要列在履歷上面了，不然就是要準備足夠，因為面試官真的都是從履歷上有寫的 project 來問問題！</p>
<h3 id="怎麼練習？"><a href="#怎麼練習？" class="headerlink" title="怎麼練習？"></a>怎麼練習？</h3><p>至於準備方式，我覺得要多練習說說那些東西，最好找不同人練習，對於那些 project 或是你履歷上有提到的，讓他們問他們想問的，真的什麼問題都可以問，重要的就是訓練那個臨場反應，以及確認自己到底懂多少、能否闡述得讓人聽得懂。</p>
<p>對於我個人來說，之後或許可以開 YouTube 直播之類的來練習這一塊，多練習口語表達！</p>
<p>面試的時候連自己都不知道在講什麼了，更何況是面試官😂</p>
<p>真的真的真的要足夠了解自己列出來的所有東西，一開始先掌握這一個最基本的點，熱忱、學習能力的展現可以之後再慢慢加進來。</p>
<h3 id="可以嘗試抱持的心態"><a href="#可以嘗試抱持的心態" class="headerlink" title="可以嘗試抱持的心態"></a>可以嘗試抱持的心態</h3><p>面試的時候其實氣氛挺輕鬆的，不用想得那麼恐怖，面試官人很 nice 的～</p>
<p>大不了就這次面試表現很爛、沒被錄取而已。</p>
<p>去跟面試官聊聊真的會有收穫，可以當成是去成長的，幫自己迭代改進！</p>
<h3 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h3><p>真的就是大量嘗試！</p>
<p>幸好今天有報這個快速面試讓自己被慘電，雖然有點丟臉 (但其實那感覺也還行)，但收穫真的滿滿，才知道自己可以往哪方面去改進！</p>
<p>丟臉只是一時的，然而，那收穫或許可以為自己的人生帶來長遠的效益啊！</p>
<p>有一句話很適合放在這邊：「當一切努力看似無用，我會去看石匠敲打石頭。可能敲了一百下，石頭上連一條裂縫都沒有，但就在第一百零一下，石頭斷裂為兩半。然後我了解到，把石頭劈成兩半的不是最後那一下，而是先前的每一次敲擊。」</p>
<p>加油，路是不會白走的！</p>
<hr>
<h2 id="向-Evan-請教部落格"><a href="#向-Evan-請教部落格" class="headerlink" title="向 Evan 請教部落格"></a>向 Evan 請教部落格</h2><p>之前大三修「正規語言概論」，因為準備考試的需要，讓我無意間找到了 Evan 的<a href="https://www.evanlin.com/moocs-coursera-automata-note1/">相關系列文</a>，也間接讓我知道 Evan，但那個時候還不知道他在 LINE 工作。</p>
<p>2020 梅竹黑客松，因為出題企業有 LINE，沒想到 Evan 居然是評審之一，才知道原來他是 LINE 的開發技術推廣工程師，讓我想抓住機會討教一番，於是乎，活動最後一天找上 Evan 聊聊，向他請教部落格，也就因為這樣，從那個時候到現在，我部落格多誕生了 28 篇文章，其中有些文章感覺有幫助到他人 (從不重複點閱數猜測的啦xD)，能夠更靠近「認識自我 • 感受世界 • 創造價值」的理念，著實讓我很有成就感！</p>
<p>啊，廢話不多說，趕快進到重點好了。</p>
<h3 id="覺得內容沒什麼而不敢寫，怎麼辦？"><a href="#覺得內容沒什麼而不敢寫，怎麼辦？" class="headerlink" title="覺得內容沒什麼而不敢寫，怎麼辦？"></a>覺得內容沒什麼而不敢寫，怎麼辦？</h3><p>寫就對了。</p>
<p>透過寫部落格，對於你不熟悉的東西，你就會去查嘛，然後寫一寫又卡住，那就再去查嘛，久而久之，覺得自己好像不知不覺也學到了什麼，這樣對自己很有幫助不是嗎？最重要的是你透過寫部落格，有怎麼樣的成長，至於別人覺得怎樣，那倒是其次。</p>
<p><strong>如果真的希望自己的文章能幫助到他人呢？</strong></p>
<p>其實不用擔心說自己寫的東西太簡單、跟大神的分享差十萬八千里會不會顯得沒價值什麼的。當你懂的比別人多那麼一點，對方不懂，而你剛好懂，不就是一個可以分享的契機嗎？只要能讓對方收穫到一點什麼，就是一種價值！</p>
<p>像我之前有寫 LINE Bot 的相關文章，除了能幫助想嘗試做 LINE Bot 的朋友，甚至還能造福到之後也要做相關 project 的自己，因為可以直接拿之前的筆記參考來做啊，超方便的xD</p>
<p><strong>怕寫出來的東西內容有錯？</strong></p>
<p>可以試著丟社群分享，如果有錯了，別人說不定會告訴你哪些地方可以修正，多棒的一件事啊！</p>
<p>就是不要怕丟臉，很多時候真的是從「看起來愚蠢」開始慢慢成長的！</p>
<h3 id="如何定期輸出？"><a href="#如何定期輸出？" class="headerlink" title="如何定期輸出？"></a>如何定期輸出？</h3><p>可以試著規定自己，每個禮拜要有固定產出，最重要的就是定期讓自己輸出成長。</p>
<p>不知道寫什麼嗎？</p>
<p>這週有聽到什麼分享覺得還不錯的，或是也可以藉機閱讀來寫東西，抑或是學點新技術然後來分享、再查資料、再分享，不斷迭代下去。真的不要去過度擔心內容很差怎麼樣，那是自己的部落格啊！</p>
<p>可以造福到未來的自己，而且透過這個過程成長，那才是最重要的！</p>
<p>文章看起來廢廢的又怎樣？多輸出、整理思緒、遇到卡住就查資料順便學習。目前不是大神，但一定有人可以向你學習，不斷反覆這個過程，久了，就如同 Evan 說的，說不定也能成為別人眼中的大神，當然那不是目的，而是一個可能伴隨而來的附屬品，再說一次，最重要的是能夠讓自己成長！</p>
<h3 id="口語表達怎麼練呢？"><a href="#口語表達怎麼練呢？" class="headerlink" title="口語表達怎麼練呢？"></a>口語表達怎麼練呢？</h3><p>寫部落格能訓練文字表達能力，那口語表達怎麼辦呢？</p>
<p>可以試著發 YouTube 影片，因為為了錄製影片，你會去想辦法控制表達的時間掌握、口條、聲音、語氣等等的，這些都是很好的練習。</p>
<p>甚至，還可以去參加社群的分享，報名當上台分享的那個人。</p>
<p>不用擔心說自己講的東西是不是太簡單或者是沒什麼價值什麼的，Evan 說，啊就是會有人沒聽過啊，分享了以後可以造福給不知道的人聽，也是一種很棒的分享啊！</p>
<p>最重要的是，也能藉由那個機會訓練自己的口語表達能力，不是很讚嗎？</p>
<h3 id="對讀研究所的看法"><a href="#對讀研究所的看法" class="headerlink" title="對讀研究所的看法"></a>對讀研究所的看法</h3><p>我目前打算先去工作，想聽聽看 Evan 對於讀研究所的看法。</p>
<p>（他說）</p>
<p>研究所是訓練那整個深入研究東西的過程，研究什麼東西倒是其次，最重要的就是那整個做學問的心法！</p>
<p>（我反思）</p>
<p>因為目前真的沒有很想念研究所，怕先念了也只是拿來逃避找工作，這樣子我覺得有點可惜。</p>
<p>或許未來工作一段時間之後再回去讀吧？感覺帶著更正確的心態去讀研究所會更有收獲！</p>
<hr>
<h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>第一次參加社群活動，覺得滿載而歸，會讓我想繼續參加類似的活動！</p>
<p>加油，多方嘗試、比過去的自己更進步、不要怕出糗、多接收外界刺激讓自己體會不一樣的事物，你我都可以越來越來靠近心目中的理想自我的！</p>
]]></content>
  </entry>
  <entry>
    <title>Moleculer CRUD Guide</title>
    <url>/2020/05/moleculer-crud-guide/</url>
    <content><![CDATA[<p><a href="/2020/05/moleculer-crud-guide"><img src="https://images.unsplash.com/photo-1466278313810-9aca9abea861?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1720&q=80" style="width:50vw;" /></a></p>
<!-- <img src="1.jpeg" style="width:50vw;" /> -->

<p>之前在「梅竹黑客松開發部」時整理的 guide。</p>
<span id="more"></span>

<p>因為把其他部分的 code 也貼上來好像不太好，沒有全部放，所以有些地方可能會不知道在表達什麼。<br>但應該還是能從本文中知悉一點大概念～</p>
<blockquote>
<p>以 Server / Build Informations Related Service 為例</p>
</blockquote>
<h1 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h1><p>在 git 上建立新分支並用程式碼編輯器打開 project</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 為了接下來的操作，先切換路徑到 mc-landing-server 的所在位置</span></span><br><span class="line"><span class="built_in">cd</span> path/to/mc-landing-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 這時你可能會發現目前所在的 branch 是 master 或是上次離開前待的 branch，</span></span><br><span class="line"><span class="comment">#    我們要切回 dev 這個分支</span></span><br><span class="line">git checkout dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 可能有新的 code 被 merged 到 dev，在開始之前，我們得先更新 dev</span></span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 建立並切換到新分支，準備開始這次的任務！</span></span><br><span class="line">git checkout -b feature/build-informations-related-service-1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 如果是用 VSCode 當作程式碼編輯器，下下面的指令就能用 VSCode 打開 project</span></span><br><span class="line">code .</span><br></pre></td></tr></table></figure>

<h1 id="開始寫-model-囉"><a href="#開始寫-model-囉" class="headerlink" title="開始寫 model 囉"></a>開始寫 model 囉</h1><ol>
<li><p>先打開 mc-landing API server spec 這個頁面，我們以這個頁面的 schema 定義來寫我們的 model</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">informations: &#123;</span><br><span class="line">  <span class="attr">_id</span>: &lt;ObjectId&gt;,</span><br><span class="line">  user_id: &lt;ObjectId&gt;,</span><br><span class="line">  tag_id: &lt;ObjectId&gt;,</span><br><span class="line">  title: &lt;<span class="built_in">String</span>&gt;,</span><br><span class="line">  content: &lt;<span class="built_in">String</span>&gt;,</span><br><span class="line">  created_at: &lt;<span class="built_in">Number</span>&gt;,</span><br><span class="line">  updated_at: &lt;<span class="built_in">Number</span>&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">Index</span>:</span><br><span class="line">&#123; <span class="attr">title</span>: <span class="string">&#x27;text&#x27;</span> &#125;</span><br><span class="line">&#123; <span class="attr">created_at</span>: -<span class="number">1</span> &#125;</span><br><span class="line">&#123; <span class="attr">updated_at</span>: -<span class="number">1</span> &#125;</span><br><span class="line">&#123; <span class="attr">tag_id</span>: <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">tags</span>: &#123;</span><br><span class="line">  <span class="attr">_id</span>: &lt;ObjectId&gt;,</span><br><span class="line">  name: &lt;<span class="built_in">String</span>&gt;,</span><br><span class="line">  color: &lt;<span class="built_in">Number</span>&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>開好之前定的 schema 以後，我們就準備依樣畫葫蘆囉～ （這就是為什麼我們要分兩階段進行：第一個階段在我們還不需要實際打 code 的時候，專心一意地去想我們的 schema 要怎麼規劃才能符合需求，然後把它寫下來；第二個階段就直接照第一階段寫的，實際去寫成 code。就好像蓋房子的時候：畫藍圖 → 開始動工！）</p>
</li>
<li><p>回到 VSCode，在 models 資料夾底下建一個 informations.js （如果是做 Server / Build Posts Related Service 就建 posts.js，以此類推）</p>
</li>
<li><p><del>複製 users.js 裡面的 code 到 informations.js 裡面，然後開始改</del></p>
</li>
</ol>
<h2 id="正式開始寫-model-的-code"><a href="#正式開始寫-model-的-code" class="headerlink" title="正式開始寫 model 的 code"></a>正式開始寫 model 的 code</h2><ul>
<li>從 mongoose 裡面取用 Schema，準備用 Schema 自定義我們的 schema！</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; Schema &#125; = Mongoose;</span><br></pre></td></tr></table></figure>

<ul>
<li>把我們定義的 schema 命名為 informationsSchema（或 postsSchema）</li>
<li>最下面的 <code>strict: &#39;throw&#39;</code> 是一種 optional 的設定，意思是： 若 insert 一個不符合我們 schema 的新 <a href="https://docs.mongodb.com/manual/core/document/">document</a> 時，會直接 drop 掉也會報出錯誤</li>
<li>灰色被 comment 掉的部分是我們要改的部分！</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> informationsSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  <span class="comment">// username: &#123;</span></span><br><span class="line">  <span class="comment">//   type: String,</span></span><br><span class="line">  <span class="comment">//   required: true</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="comment">// password: &#123;</span></span><br><span class="line">  <span class="comment">//   type: String,</span></span><br><span class="line">  <span class="comment">//   required: true</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">strict</span>: <span class="string">&#x27;throw&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>_id</code> 不用寫上去，mongoose 會幫我們建好～</li>
<li><code>user_id</code>、<code>tag_id</code> 是指外部 schema (users、tags) 的 _id，所以用 <code>Mongoose.Types.ObjectId</code> 當作 type，這就是資料庫裡面常聽到的 relation， 有看過「<a href="https://www.mongodb.com/blog/post/6-rules-of-thumb-for-mongodb-schema-design-part-1">6 Rules of Thumb for MongoDB Schema Design</a>」這篇文章大概就會懂</li>
<li><code>required: true</code> 意思是：insert 新 document 時必須有這個欄位 （像 tag 可以之後再加上去，所以就不用 required 了）</li>
<li>至於有什麼 type 呢？參考 <a href="https://mongoosejs.com/docs/schematypes.html">Mongoose</a> 吧！（我們是用 Mongoose 來建 model）</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> informationsSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  <span class="attr">user_id</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: Mongoose.Types.ObjectId,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">tag_id</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: Mongoose.Types.ObjectId</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">title</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">content</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">created_at</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">updated_at</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">strict</span>: <span class="string">&#x27;throw&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>進行 index 吧！index 是為了方便之後搜尋排序等等的操作。</li>
<li><code>&#39;text&#39;</code> <a href="https://docs.mongodb.com/manual/core/index-text/">Text indexes</a>? To support text search queries on string content.</li>
<li><code>1</code>：由小排到大  <code>-1</code>：由大排到小</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">informationsSchema.index(&#123; <span class="attr">title</span>: <span class="string">&#x27;text&#x27;</span> &#125;);</span><br><span class="line">informationsSchema.index(&#123; <span class="attr">created_at</span>: -<span class="number">1</span> &#125;);</span><br><span class="line">informationsSchema.index(&#123; <span class="attr">updated_at</span>: -<span class="number">1</span> &#125;);</span><br><span class="line">informationsSchema.index(&#123; <span class="attr">tag_id</span>: <span class="number">1</span> &#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>以 informations 這個 name 把我們定義好的 informationsSchema export 出去</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = Mongoose.model(<span class="string">&#x27;informations&#x27;</span>, informationsSchema);</span><br></pre></td></tr></table></figure>

<h1 id="為待會-service-的參數驗證做準備"><a href="#為待會-service-的參數驗證做準備" class="headerlink" title="為待會 service 的參數驗證做準備"></a>為待會 service 的參數驗證做準備</h1><ol>
<li>打開 libs/validates.js</li>
<li>在 users service related 下面，加入新的參數驗證，一樣參考 <a href="https://www.notion.so/mc-landing-API-server-spec-344a5417ba5b40c09a633f1754215931">mc-landing API server spec</a> <br>（type 有哪些？參考 <a href="https://github.com/icebob/fastest-validator">fastest-validator</a>，因為 Moleculer 的參數驗證 based on it）<br>（為什麼不用加入 <code>_id</code>、<code>user_id</code>、<code>tag_id</code> 呢？因為第八行已經寫好 _id 類的了xD）</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// users service related</span></span><br><span class="line"><span class="attr">users</span>: &#123;</span><br><span class="line">  <span class="attr">username</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">password</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">    <span class="attr">min</span>: <span class="number">6</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// informations service related</span></span><br><span class="line"><span class="attr">informations</span>: &#123;</span><br><span class="line">  <span class="attr">title</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">content</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">created_at</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;number&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">updated_at</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;number&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h1 id="重頭戲：API-本體（service）"><a href="#重頭戲：API-本體（service）" class="headerlink" title="重頭戲：API 本體（service）"></a>重頭戲：API 本體（service）</h1><ol>
<li>在 services 資料夾底下新增 informations.service.js（posts.service.js）</li>
<li>直接複製貼上 users.service.js 的 code 吧！（實在不少行xD 當然自己打過印象會更深刻）</li>
<li>來改 code 吧！<br>（細節上次開會的時候講過了，如果忘記的話，可以上網查或是直接來問我們～）</li>
</ol>
<ul>
<li>第 4 行改 model 的名字（左右都要改哦～）</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> InformationsModel = <span class="built_in">require</span>(<span class="string">&#x27;../models/informations&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>第 9 行改 name</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">name: <span class="string">&#x27;informations&#x27;</span>,</span><br></pre></td></tr></table></figure>

<ul>
<li>第 21 行改 model name</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">model: InformationsModel,</span><br></pre></td></tr></table></figure>

<h2 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h2><h3 id="addInformation"><a href="#addInformation" class="headerlink" title="addInformation"></a>addInformation</h3><ul>
<li>從 addUser 改的，以下以此類推</li>
<li>params 裡面的東西就是 schema 的那些</li>
<li>為什麼沒 created_at、updated_at？它們由系統生成！</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">addInformation: &#123;</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">user_id</span>: &#123;</span><br><span class="line">      ...ValidateType._id</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">tag_id</span>: &#123;</span><br><span class="line">      ...ValidateType._id</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">      ...ValidateType.informations.title</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">content</span>: &#123;</span><br><span class="line">      ...ValidateType.informations.content</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">handler</span>(<span class="params">ctx</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.create(ctx.params);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="getInformation"><a href="#getInformation" class="headerlink" title="getInformation"></a>getInformation</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">getInformation: &#123;</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">_id</span>: &#123;</span><br><span class="line">      ...ValidateType._id</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">handler</span>(<span class="params">ctx</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; _id &#125; = ctx.params;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.findOne(&#123; _id &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="getInformations"><a href="#getInformations" class="headerlink" title="getInformations"></a>getInformations</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">getInformations: &#123;</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">filter</span>: &#123;</span><br><span class="line">      ...ValidateType.filter</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">limit</span>: &#123;</span><br><span class="line">      ...ValidateType.limit</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">skip</span>: &#123;</span><br><span class="line">      ...ValidateType.skip</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">sort</span>: &#123;</span><br><span class="line">      ...ValidateType.sort</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">handler</span>(<span class="params">ctx</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.findAll(ctx.params);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="modifyInformation"><a href="#modifyInformation" class="headerlink" title="modifyInformation"></a>modifyInformation</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">modifyInformation: &#123;</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">_id</span>: &#123;</span><br><span class="line">      ...ValidateType._id</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">tag_id</span>: &#123;</span><br><span class="line">      ...ValidateType._id</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">      ...ValidateType.informations.title</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">content</span>: &#123;</span><br><span class="line">      ...ValidateType.informations.content</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">user_id</span>: &#123; <span class="attr">type</span>: <span class="string">&#x27;forbidden&#x27;</span> &#125;, <span class="comment">// 創立者不會變</span></span><br><span class="line">    <span class="attr">created_at</span>: &#123; <span class="attr">type</span>: <span class="string">&#x27;forbidden&#x27;</span> &#125;, <span class="comment">// 創立時間不會變</span></span><br><span class="line">    <span class="attr">updated_at</span>: &#123; <span class="attr">type</span>: <span class="string">&#x27;forbidden&#x27;</span> &#125; <span class="comment">// 由系統生成</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">handler</span>(<span class="params">ctx</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.updateOne(ctx.params);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="removeInformation"><a href="#removeInformation" class="headerlink" title="removeInformation"></a>removeInformation</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">removeInformation: &#123;</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">_id</span>: &#123;</span><br><span class="line">      ...ValidateType._id</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">handler</span>(<span class="params">ctx</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; _id &#125; = ctx.params;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.deleteOne(&#123; _id &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h2><h3 id="create"><a href="#create" class="headerlink" title="create"></a>create</h3><ul>
<li>中間那一塊就是所謂的「系統生成」啦～</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">create</span>(<span class="params">params</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; adapter, logger &#125; = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; model &#125; = adapter;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> timestamp = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="comment">/* eslint-disable no-param-reassign */</span></span><br><span class="line">  params.created_at = timestamp;</span><br><span class="line">  params.updated_at = timestamp;</span><br><span class="line">  <span class="comment">/* eslint-enable no-param-reassign */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> model.create(params); <span class="comment">// Return Promise</span></span><br><span class="line">    logger.info(<span class="string">&#x27;Create information successfully&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    logger.error(error);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ErrorRes(<span class="number">1000</span>, <span class="string">&#x27;Failed to create information to database&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="findOne"><a href="#findOne" class="headerlink" title="findOne"></a>findOne</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">findOne</span>(<span class="params">filter</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; adapter, logger &#125; = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; model &#125; = adapter;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> model.findOne(filter).lean();</span><br><span class="line">    logger.info(<span class="string">&#x27;Find information successfully&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    logger.error(error);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ErrorRes(<span class="number">1001</span>, <span class="string">&#x27;Failed to find information in database&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="findAll"><a href="#findAll" class="headerlink" title="findAll"></a>findAll</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">findAll</span>(<span class="params">params</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; filter, limit, skip, sort &#125; = params;</span><br><span class="line">  <span class="keyword">const</span> &#123; adapter, logger &#125; = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; model &#125; = adapter;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> total = <span class="keyword">await</span> model.countDocuments(filter).lean();</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> model.find(filter, <span class="literal">null</span>, &#123; limit, skip, sort &#125;).lean();</span><br><span class="line">    logger.info(<span class="string">&#x27;Find informations successfully&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123; total, data &#125;;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    logger.error(error);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ErrorRes(<span class="number">1001</span>, <span class="string">&#x27;Failed to find informations in database&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="updateOne"><a href="#updateOne" class="headerlink" title="updateOne"></a>updateOne</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">updateOne</span>(<span class="params">params</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; adapter, logger &#125; = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; model &#125; = adapter;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; _id &#125; = params;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> timestamp = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="comment">/* eslint-disable no-param-reassign */</span></span><br><span class="line">  params.updated_at = timestamp;</span><br><span class="line">  <span class="comment">/* eslint-enable no-param-reassign */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> model.updateOne(&#123; _id &#125;, params).lean();</span><br><span class="line">    logger.info(<span class="string">&#x27;Update information successfully&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> result.n &gt; <span class="number">0</span> ? &#123; <span class="attr">success</span>: <span class="literal">true</span> &#125; : &#123;&#125;;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    logger.error(error);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ErrorRes(<span class="number">1002</span>, <span class="string">&#x27;Failed to update information to database&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="deleteOne"><a href="#deleteOne" class="headerlink" title="deleteOne"></a>deleteOne</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">deleteOne</span>(<span class="params">filter</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; adapter, logger &#125; = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; model &#125; = adapter;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> model.deleteOne(filter).lean();</span><br><span class="line">    logger.info(<span class="string">&#x27;Delete information successfully&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> result.n &gt; <span class="number">0</span> ? &#123; <span class="attr">success</span>: <span class="literal">true</span> &#125; : &#123;&#125;;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    logger.error(error);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ErrorRes(<span class="number">1003</span>, <span class="string">&#x27;Failed to remove information to database&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="把-API-加進-api-service-js"><a href="#把-API-加進-api-service-js" class="headerlink" title="把 API 加進 api.service.js"></a>把 API 加進 api.service.js</h1><ul>
<li>直接看第 99 行 ～ 第 125 行那邊</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// No authentication, authorization needed</span></span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/api&#x27;</span>,</span><br><span class="line">  <span class="attr">aliases</span>: &#123;</span><br><span class="line">    <span class="comment">// users</span></span><br><span class="line">    <span class="string">&#x27;POST /users/addUser&#x27;</span>: <span class="string">&#x27;v1.users.addUser&#x27;</span>,</span><br><span class="line">    <span class="comment">// informations</span></span><br><span class="line">    <span class="string">&#x27;POST /informations/getInformation&#x27;</span>: <span class="string">&#x27;v1.informations.getInformation&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST /informations/getInformations&#x27;</span>: <span class="string">&#x27;v1.informations.getInformations&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mappingPolicy</span>: <span class="string">&#x27;restrict&#x27;</span>,</span><br><span class="line">  <span class="attr">bodyParsers</span>: &#123;</span><br><span class="line">    <span class="attr">json</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> Authentication, Authorization</span></span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/admin&#x27;</span>,</span><br><span class="line">  <span class="attr">aliases</span>: &#123;</span><br><span class="line">    <span class="comment">// users</span></span><br><span class="line">    <span class="string">&#x27;POST /users/getUser&#x27;</span>: <span class="string">&#x27;v1.users.getUser&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST /users/getUsers&#x27;</span>: <span class="string">&#x27;v1.users.getUsers&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST /users/modifyUser&#x27;</span>: <span class="string">&#x27;v1.users.modifyUser&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST /users/removeUser&#x27;</span>: <span class="string">&#x27;v1.users.removeUser&#x27;</span>,</span><br><span class="line">    <span class="comment">// informations</span></span><br><span class="line">    <span class="string">&#x27;POST /informations/addInformation&#x27;</span>: <span class="string">&#x27;v1.informations.addInformation&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST /informations/getInformation&#x27;</span>: <span class="string">&#x27;v1.informations.getInformation&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST /informations/getInformations&#x27;</span>: <span class="string">&#x27;v1.informations.getInformations&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST /informations/modifyInformation&#x27;</span>: <span class="string">&#x27;v1.informations.modifyInformation&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST /informations/removeInformation&#x27;</span>: <span class="string">&#x27;v1.informations.removeInformation&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mappingPolicy</span>: <span class="string">&#x27;restrict&#x27;</span>,</span><br><span class="line">  <span class="attr">bodyParsers</span>: &#123;</span><br><span class="line">    <span class="attr">json</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如此一來， <code>npm run dev</code> 後就能夠使用 API 了！</p>
<blockquote>
<p>用 Postman 測試的時候，tags_id 隨便給一個值就好（只要是 string 都行）</p>
</blockquote>
<h1 id="一些-Q＆A"><a href="#一些-Q＆A" class="headerlink" title="一些 Q＆A"></a>一些 Q＆A</h1><h2 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h2><p><strong>Ｑ：關於 services/student.service.js 裡⾯第 16 ⾏的 adapter 是什麼東西？我 google 不太到我想要的資訊。</strong></p>
<p>我先 google「adapter 中⽂」，得到了「適配器」這個答案，那因為我不知道「適配器」到底是什麼東西，所有我就改⽤「圖⽚」來搜尋，（欣賞 adapter），欣賞了好幾張以後我猜測它應該就是類似「轉接頭」的東西吧？</p>
<p>「轉接頭」跟「開發」到底有什麼關係啊？我⼼中萌⽣了這個疑問。</p>
<p>後來我再回去看 students.service.js，裡⾯第 19 ⾏有個叫「MongooseAdapter」的 keyword，想說這詞結合了我們開發⽤的「mongoose」⼜有個「adapter」，也許 google 它會有我們想得到的資訊吧？</p>
<p>搜尋「MongooseAdapter」得到了很雜的資訊，改搜尋「database adapter」，上⾯的⽂字敘述看了還是沒很清楚，就⼜改⽤「圖⽚」，找到了這張：</p>
<p><img src="2.png"></p>
<p>再結合剛剛猜測的「轉接頭」，我就認為說「adapter」就是⼀個讓使⽤者更好操作 DB 的「轉接頭」，我們只要專注在別⼈幫我們包好、⽐較好寫、不必擔⼼語⾔障礙的「這⼀端」就好，「另外⼀端」就讓 adapter 去跟 DB 做交涉。</p>
<h2 id="JavaScript-解構"><a href="#JavaScript-解構" class="headerlink" title="JavaScript 解構"></a>JavaScript 解構</h2><p><strong>Ｑ：還有想簡單問⼀下 StudentModel 裡⾯的 param 為什麼 ValidateTypes 前⾯要加「…」？ （services/students.service.js 的 addStudent 的 params)</strong></p>
<p>那個是 JS 的「解構」語法。</p>
<p>我下的關鍵字是「js …」，google 會推薦我搜尋「js …args」，於是我找到了「<a href="https://stackoverflow.com/questions/42184674/what-is-the-meaning-of-args-three-dots-in-a-function-definition">What is the meaning of “…args” (three dots) in a function definition?</a>」，⼜間接找到了「Spread syntax」，看⼀看裡⾯的範例就⼤概知道那是⽤來做什麼的了。</p>
<p>舉個例⼦，有個 object 定義為 <code>me = &#123; name: &#39;Tim&#39;, college: &#39;NCTU&#39; &#125;</code></p>
<p>當我要定義另外⼀個 object 但沒加上 <code>...</code> 時：</p>
<p><code>moreAboutMe = &#123; me, gender: &#39;male&#39; &#125;</code> 它會是 <code>&#123; &#123; name: &#39;Tim&#39;, college: &#39;NCTU&#39; &#125;, gender: &#39;male&#39; &#125;</code></p>
<p>另外⼀種也就是有加上 <code>...</code> 的版本：</p>
<p><code>moreAboutMe = &#123; ...me, gender: &#39;male&#39; &#125;</code> 它就會是 <code>&#123; name: &#39;Tim&#39;, college: &#39;NCTU&#39;, gender: &#39;male&#39; &#125;</code></p>
<p>從上⾯的例⼦可以看出它發揮「解構」的功⽤了！</p>
<h2 id="Validator"><a href="#Validator" class="headerlink" title="Validator"></a>Validator</h2><p><strong>Ｑ：validator 那邊，你給的⽂檔只有 validateBeforeSave 跟 validateSync ⽽已，沒有看到類似validator 的寫法。可以說是在哪⼀段有嗎？我是有看到 mongoDB 有 validate 這個 commend 跟這個有關係嗎？</strong></p>
<p>後來我在左側欄位「Guides」底下有個叫「Validation」的那邊有看到〜 <a href="https://mongoosejs.com/docs/validation.html#custom-validators">Custom Validators</a></p>
<h2 id="type-forbidden"><a href="#type-forbidden" class="headerlink" title="type forbidden"></a>type forbidden</h2><p><strong>Ｑ：然後最後⾯有⼀個 key 是⽤來寄推薦信的驗證碼的，這裡 type <code>forbidden</code> 這個是你訂的嗎？ 因為我去 mongoDB 查沒有這個 type，這個意思是說使⽤者不能輸⼊的意思嗎？所以打這樣電腦會⾃動⽣ key？</strong></p>
<p>可能是為了防⽌ client 在 addStudent 的時候也⾃⼰指定了 key 的值，所以⽤「forbidden」把它擋下來。</p>
<p>我猜 key 可能是讓 account service 來⽣成，因為那邊有個「TODO{ create password to accounts service」</p>
<p>等等……好像真的找不到 forbidden 的 type 誒XD</p>
<h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><p><strong>Ｑ：第 38 ⾏的 handler 是哪裡的？ mongoDB mongoose？ 不太理解 handler 的意思🤔🤔</strong></p>
<p>我覺得它的作⽤應該就像 eggjs「controller 調⽤ service」那樣，所以應該是屬於「Moleculer」的，也許可以把「handler」想成像是 addStudent 的 function 本體，上⾯的 params 就僅僅是定義參數的規則。</p>
<br>
今天的分享就到這邊，我們下篇文見吧 😃]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>Moleculer</tag>
        <tag>CRUD</tag>
      </tags>
  </entry>
  <entry>
    <title>專注當下</title>
    <url>/2021/12/live-in-the-moment/</url>
    <content><![CDATA[<p>過去的就讓它過去，未來如何由自己創造。</p>
<p>2021年12月12日 星期日 18:00 開始，專注每個當下，期許自己！</p>
]]></content>
  </entry>
  <entry>
    <title>【閱讀筆記】下個10000小時，你打算怎樣過？</title>
    <url>/2021/11/next-10000-hours/</url>
    <content><![CDATA[<p>給正在思索未來的你～</p>
<span id="more"></span>

<br>
（本篇由書中引起我共鳴的句子集結而成）

<h3 id="輸在起點的人，未來在哪裡"><a href="#輸在起點的人，未來在哪裡" class="headerlink" title="輸在起點的人，未來在哪裡"></a>輸在起點的人，未來在哪裡</h3><ul>
<li>如果你不滿現狀卻不去改變方向，那麼你將沿著現有的方向一直走下去，不會更好，只會更壞。</li>
<li>你越早規劃你的人生越好，因為這樣你就知道自己的方向，你要做什麼，朝哪些方面努力。</li>
<li>員工：「我有十年工作經驗。」老闆：「你沒有十年的經驗，你只是同一個經驗用了十年。」</li>
<li>假如你是一個女孩子，你願意嫁給現在的自己嗎？假如今天你是公司老闆，你是否願意聘用現在的你呢？</li>
<li>今天你值不值錢，是由以往決定的。而未來你值不值錢，由現在決定。</li>
<li>才30多歲，就覺得人生已經沒有辦法再改變了，這樣的人，我想就算是讓他們從頭再來，也是會和現在一樣原地踏步吧。</li>
<li>明天會怎樣 (像是產業)，其實不用恐慌。如果明天的我比今天更強，我就可以無所畏懼。</li>
<li>從今天開始，答應自己，別說你不行，如果你還沒開始做。</li>
</ul>
<h3 id="10000個小時後，成為你想成為的人"><a href="#10000個小時後，成為你想成為的人" class="headerlink" title="10000個小時後，成為你想成為的人"></a>10000個小時後，成為你想成為的人</h3><ul>
<li>人生是一個不斷累積的過程，你所有的經歷都會成為日後的財富。</li>
<li>你打算花十年時間去修建屬於自己的管道讓水源源不斷地流進來，還是打算花十年時間去每天提著桶裝水回來？</li>
<li>絕大多數人，都在提桶，在忙碌的工作中，以戰術上的勤奮來掩蓋戰略上的懶惰。</li>
<li>選擇比努力重要！</li>
<li>今天的生活現狀，是昨天思考和選擇的結果。</li>
<li>未來十年的時間裡，你是願意繼續幹一天的工作拿一天的錢，還是建設管道為自己帶來真正的保障？或者找個正在「建管道」的公司，然後等待某一天與它共同分享成功的喜悅？選擇的權利，在你自己手裡。</li>
<li>你的願景是否足夠清晰明確，對其是否能夠實現有重要影響。</li>
</ul>
<h3 id="你缺的不是時間，而是時間管理"><a href="#你缺的不是時間，而是時間管理" class="headerlink" title="你缺的不是時間，而是時間管理"></a>你缺的不是時間，而是時間管理</h3><ul>
<li>很多人為了節省時間，一拿到事情馬上就動手去做，一頭栽進去，雖然努力了，可是由於計畫不周，往往缺乏條理，從而效率不彰。</li>
<li>平時我們的工作也是一樣的，在收到一項任務的時候，首先要分析一下，先做什麼，後做什麼，思路清晰之後再去動手做，你會發現這樣會事半功倍。</li>
</ul>
<h3 id="當你變「strong」了，你就不會那麼「low」了"><a href="#當你變「strong」了，你就不會那麼「low」了" class="headerlink" title="當你變「strong」了，你就不會那麼「low」了"></a>當你變「strong」了，你就不會那麼「low」了</h3><ul>
<li>如果你還沒能過上自己喜歡的生活，那你恐怕只能反省自己，因為思路決定出路。</li>
<li>窮困不怕，怕的是窮的心態。</li>
<li>艱難的不是困境本身，而是改變現狀。只要你有在困難中做出改變的決心，總會想到打破困境的方法。走出困境沒有你想像的那麼艱難，你需要做的就是一點點地去改變，一旦量變成為質變，你就會獲得完全不同的結局。</li>
</ul>
<h3 id="多認識點人，多充點電，一定不會錯"><a href="#多認識點人，多充點電，一定不會錯" class="headerlink" title="多認識點人，多充點電，一定不會錯"></a>多認識點人，多充點電，一定不會錯</h3><ul>
<li>沒有計劃未來的人生，永遠沒有未來。高質量的人生，要透過規劃獲得。</li>
<li>經營人脈，是一件與提升自己工作能力相輔相成的事，是為了讓更多的人知道自己的價值，從而獲得最大限度發揮自己才能的機會。強大的人脈和強大的能力結合在一起才是成功，缺任何一個都不能實現最終的成功。</li>
<li>一天比別人多出一兩個小時，長年累月，其差距是可想而知的。</li>
<li>那些現在看起來沒有用的事情，也許恰恰是你未來的依靠。將來，你需要它脫穎而出。</li>
</ul>
<h3 id="改變你的格局，人生才會逆襲"><a href="#改變你的格局，人生才會逆襲" class="headerlink" title="改變你的格局，人生才會逆襲"></a>改變你的格局，人生才會逆襲</h3><ul>
<li>人生的路上如果總是鮮花和掌聲，反而會蒙蔽我們的心靈，遮住我們的眼睛。或許正是這些「傷」，讓我們更早知道了我們的短處。</li>
<li>只要平靜下來，你就能體會到人生的樂趣，而沒有必要在浮躁的世界中去追求那些不切實際的東西。</li>
<li>那些能夠忍受寂寞，在寂寞的過程中注重自身能力的積累，厚積薄發的人，一旦時機來臨，成功自然會水到渠成。</li>
<li>什麼是成功？我思索了很多以後發現，成功不是財源廣進，也不是位高權重。用一句話總結成功，那就是能夠按照自己的方式快樂地生活。</li>
<li>生活方式沒有高低貴賤之分，適合自己的，能讓自己快樂的才是最好的。歸根究底，生活就是人的存在形式，生活方式便是人的生活習慣。</li>
<li>羨慕或許是一種難以避免的情緒，那就把它轉化為珍惜今天的力量。站在當前，就要活出當前的精彩，那樣生命才沒有遺憾。</li>
<li>我們一定要清楚地知道自己想要什麼，結合自己的實際情況，為自己量身打造一套在現代環境下最適合自己的幸福計劃。</li>
<li>生活的壓力可能讓你過得很累，適當抽一點時間放鬆心情，選擇一種讓自己愉快的方法，慰勞自己疲憊的身心。適當地休息，才能走更長遠的路。</li>
</ul>
<br>
希望書中的這些句子，能對你在人生方面的思考上有所幫助 😀]]></content>
      <tags>
        <tag>閱讀</tag>
      </tags>
  </entry>
  <entry>
    <title>【技術筆記】NoSQL、Data Replica、Sharding</title>
    <url>/2022/05/nosql-introduction/</url>
    <content><![CDATA[<p>上台 Presentation 前做的筆記，在這邊記錄一下～</p>
<span id="more"></span>

<h1 id="開場"><a href="#開場" class="headerlink" title="開場"></a>開場</h1><p>嗨大家好，我們這組要介紹的呢，是 NoSQL Database 以及 Database Management，主要會是用 MongoDB 這個 NoSQL database 來做介紹。</p>
<p>待會我會先簡介 NoSQL，接著分享 Data Replica 和 Sharding 的概念，最後會實際 demo 給大家看 NoSQL 的資料與結構，以及，怎麼用 MongoDB 做到 Data Replica。</p>
<hr>
<h1 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h1><h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><p>什麼是 NoSQL 呢？</p>
<p>它是一種不需要 schema 的資料庫，也就是不用像 MySQL 一樣，還要預先設計好 table 的欄位和關聯。</p>
<p>它是以 Key-Value 的方式來儲存資料的，可以把它簡單想像成它就是把資料存成 JSON，裡面存的東西可以是非常自由的。</p>
<p>然後它除了能垂直擴增，也具有水平擴增這個強項。</p>
<p>那麼什麼是垂直擴增？什麼是水平擴增呢？</p>
<h2 id="Scale-vertically-vs-Scale-horizontally"><a href="#Scale-vertically-vs-Scale-horizontally" class="headerlink" title="Scale vertically   vs   Scale horizontally"></a>Scale vertically   vs   Scale horizontally</h2><p><img src="1.png"></p>
<p>垂直擴增可以把它想成，它就是一間工廠在升級設備和招募新的員工，技術上來說就是提升一台機器的 RAM 和 CPU，但終究會有個上限。</p>
<p>而水平擴增就像是開分店，也就是開很多台機器來共同支撐起整個任務，同樣也能達到升級的效果，除此之外還有一些好處，後面會在 Data Replica 的地方介紹到。</p>
<h2 id="對照表"><a href="#對照表" class="headerlink" title="對照表"></a>對照表</h2><p><img src="2.png"></p>
<p>這是 MySQL 和 MongoDB 的簡單對照。</p>
<p>MySQL 裡面的 table，類似 MongoDB 的 collection；而 MySQL 裡面的 record，也就是一筆資料，類似 MongoDB 的 document。</p>
<hr>
<h1 id="Data-Replica"><a href="#Data-Replica" class="headerlink" title="Data Replica"></a>Data Replica</h1><h2 id="Replica-Sets"><a href="#Replica-Sets" class="headerlink" title="Replica Sets"></a>Replica Sets</h2><p><img src="3.png"></p>
<p>首先先介紹什麼是 Replica Sets。</p>
<p>它是由一群 mongod 程序組合而成的，可以把 mongod 程序想成是一台機器，所以 Replica Sets 就是會有一群機器這樣，每個 mongod 程序會 maintain 相同的 data，保持同步。</p>
<p>那你可能會好奇說，用 Replica Sets 有什麼好處呢？像 MySQL 開一台不就好了？</p>
<p>因為 Replica Sets 能提供 redundancy，也就是一台壞掉了，還有其他台可以提供資料，這樣能降低遺失資料的風險。</p>
<p>除此之外，還有 high availability 這個特性，它能排除 single points of failure 的問題，也就是一台壞掉了，整個資料庫的運作就崩潰了，它不會，它能確保整個資料庫的持續運作，一台壞掉了，會有其他台來 cover。</p>
<p>最後還可以達到 load balancing 的效果，也就是像上圖一樣，write 的話是由 primary node 來負責，而 read 則是由 B 和 C 這兩個 secondary node，可能依照某種方法來分配處理，這麼做就能緩解各 database server 的負擔。</p>
<h2 id="架構與角色"><a href="#架構與角色" class="headerlink" title="架構與角色"></a>架構與角色</h2><p><img src="4.png"></p>
<p>整體大概是怎麼運作的呢？</p>
<p>任何 write 會由 primary node 來處理，並將所有操作記錄在 oplog 的檔案裡面，所以 secondary node 只要重現 oplog 裡面的操作，就能達到複製的效果。</p>
<p>而上面的右圖是在描述，當 primary node 掛掉的時候，會由所有 secondary node 透過某種方式來選拔，繼而取代原本的，然後升級成 primary node。</p>
<p>以圖來說明的話，就是 A 掛掉了，由 B 來接管 primary node 的位置，這樣整體就能夠照常運作，不受 A 掛掉而有太大影響。</p>
<h2 id="oplog-文件"><a href="#oplog-文件" class="headerlink" title="oplog 文件"></a>oplog 文件</h2><p>這邊快速簡介什麼是 oplog 文件。</p>
<p>它是 MongoDB 實現 replica set 的關鍵資料結構。</p>
<p>簡單來說，就是 primary node 的操作會記錄在 oplog，secondary node 就能透過 oplog 來更新，確保整個 replica set 的成員有一致的資料。</p>
<h2 id="讀取操作"><a href="#讀取操作" class="headerlink" title="讀取操作"></a>讀取操作</h2><p>關於 MongoDB 的讀取，是透過 read preference 來設定的，一共會有五種 mode：</p>
<ol>
<li><code>primary</code>：這是預設的，也就是如果要從 replica sets 讀取資料，都是透過 primary node 來進行操作</li>
<li><code>primaryPreferred</code>：也就是大部分情況下都是透過 primary node，若 primary node 發生狀況才從 secondary node 讀取</li>
<li><code>secondary</code>：全部都是從 secondary node 讀取</li>
<li><code>secondaryPreferred</code>：其實跟剛剛 primaryPreferred 差不多，只是主要是從 secondary node 來讀取</li>
<li><code>nearest</code>：這個就沒有分 primary node、secondary node，而是根據一個特定的 latency threshold (由 localThresholdMS、maxStalenessSeconds 等參數計算出來)，隨機從 replica sets member 當中挑一個來讀取</li>
</ol>
<hr>
<h1 id="Sharding"><a href="#Sharding" class="headerlink" title="Sharding"></a>Sharding</h1><p>透過 sharding，可以將資料分散在不同的機器上，提高資料的存取效率，是一種水平擴增的方式。</p>
<p>然後 shard 這個英文單字其實還蠻少見的，所以看到 sharding 可能會不知道它在幹嘛，其實可以把它看成它就是一種 partition，只是是透過開多台機器，也就是水平擴增的方式來分 part。</p>
<h2 id="架構與角色-1"><a href="#架構與角色-1" class="headerlink" title="架構與角色"></a>架構與角色</h2><p><img src="5.png"></p>
<p>整個流程大概是這樣：</p>
<p>一個 shard 就是一個 replica sets，也就是各自的 shard 會有所謂的 primary node 和 secondary node。</p>
<p>mongos，是一個提供 client 端存取 shard 的介面。</p>
<p>而 config server 儲存一些 metadata 和設定檔，像是告訴 mongos 當前的資料該存到哪一個 shard，或是要從哪一個 shard 去要資料，這個運作機制待會會提到。</p>
<h2 id="Chunk"><a href="#Chunk" class="headerlink" title="Chunk"></a>Chunk</h2><p><img src="6.png"></p>
<p>chunk 其實就是一堆 document，為了將資料分散儲存，就必須找一個方法來管理，所以 NoSQL 的做法就是將 document 的某一個欄位定義為 shard key，以上圖為例的話，就是 age 年齡。</p>
<p>至於怎麼去分配呢？可以透過 range-based sharding 或是 hash-based sharding 的方法去做分配！</p>
<h2 id="Range-Based-Sharding"><a href="#Range-Based-Sharding" class="headerlink" title="Range-Based Sharding"></a>Range-Based Sharding</h2><p>Range-based sharding 就是將 document shard key 欄位的值，透過 range 的範圍進行分配。</p>
<p>像上圖就是 range-based sharding，看 age 也就是 document shard key 來決定該分配到哪個 chunk。</p>
<h2 id="Hash-Based-Sharding"><a href="#Hash-Based-Sharding" class="headerlink" title="Hash-Based Sharding"></a>Hash-Based Sharding</h2><p>Hash-based sharding，顧名思義，就是透過一個 hash function，將我們所指定的 shard key 欄位進行雜湊。</p>
<p>以年齡的例子來舉例的話，如果是「16 歲」就會被 hash 到「青少年」，而「65 歲」就會被 hash 到「老年」。</p>
<p>透過這樣的方式將資料分散到各個 chunk 當中。</p>
<h2 id="Balancing"><a href="#Balancing" class="headerlink" title="Balancing"></a>Balancing</h2><p><img src="7.png"></p>
<p>這邊有個 Balancing 的機制，如果 shard 之間的 chunk total size 差異過大，就會做 migration，也就是 shard 移轉某個 chunk 的責任給另外一個 shard，確保數據分配的平衡，也就是所謂的 load balancing。</p>
<h1 id="小比較"><a href="#小比較" class="headerlink" title="小比較"></a>小比較</h1><p><img src="8.png"></p>
<p><a href="https://www.youtube.com/watch?v=gChzfhVGqp8">Setup MongoDB for Production deployment - Replica Sets cluster</a></p>
<p>好，這是我們理論分享的部分，接著要來 demo 給大家看怎麼用 MongoDB 做 Data Replica～</p>
<hr>
<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><p>資料庫總要有個地⽅放資料，所以我們先建資料夾來當作它存放資料的地⽅。</p>
<p>因為要 demo 有⼀個 primary node 和兩個 secondary node 的 replica sets，所以我建三個：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/mongos/db4</span><br><span class="line">mkdir -p ~/mongos/db5</span><br><span class="line">mkdir -p ~/mongos/db6</span><br></pre></td></tr></table></figure>

<p><img src="1.gif" alt="1.gif"></p>
<p>接下來⽤ mongod 來啟動 MongoDB process，參數分別是你要開在哪個 port、選⽤哪個資料夾來存放資料，以及 replica sets 的名稱，可以隨便命名，那我⼀次開：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongod --port 2747 --dbpath ~/mongos/db4 --replSet anotherReplicaSet</span><br><span class="line">mongod --port 2757 --dbpath ~/mongos/db5 --replSet anotherReplicaSet</span><br><span class="line">mongod --port 2767 --dbpath ~/mongos/db6 --replSet anotherReplicaSet</span><br></pre></td></tr></table></figure>

<p><img src="2.gif" alt="2.gif"></p>
<h2 id="（小插曲：tmux）"><a href="#（小插曲：tmux）" class="headerlink" title="（小插曲：tmux）"></a>（小插曲：tmux）</h2><p>這樣就不用開很多 Tab 了！</p>
<p>操作小筆記：</p>
<ul>
<li>進行水平分割：<code>&lt;Ctrl+b&gt; + &quot;</code></li>
<li>進行垂直分割：<code>&lt;Ctrl+b&gt; + %</code></li>
<li>移動到其他 pane：<code>&lt;Ctrl+b&gt; + &lt;方向鍵&gt;</code>（或是參考<a href="https://stackoverflow.com/questions/11832199/tmux-set-g-mouse-mode-on-doesnt-work">這個</a>就可以用滑鼠來操作～）</li>
<li>關閉目前的 pane：<code>&lt;Ctrl+b&gt; + x</code></li>
</ul>
<h2 id="設定-replica-sets"><a href="#設定-replica-sets" class="headerlink" title="設定 replica sets"></a>設定 replica sets</h2><p>接著⽤ mongo 連進去你想要讓它當 primary node 的 process，然後做⼀些設定。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo mongodb://localhost:2747</span><br></pre></td></tr></table></figure>

<p>先初始化，然後把另外兩個也加進來，它們就會是 secondary node。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rs.initiate()</span><br><span class="line">rs.add(<span class="string">&quot;localhost:2757&quot;</span>)</span><br><span class="line">rs.add(<span class="string">&quot;localhost:2767&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>透過這個指令，可以看到 replica sets 中有哪些 member：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rs.status()</span><br></pre></td></tr></table></figure>

<p><img src="3.gif" alt="3.gif"></p>
<h2 id="模擬-Primary-發生問題"><a href="#模擬-Primary-發生問題" class="headerlink" title="模擬 Primary 發生問題"></a>模擬 Primary 發生問題</h2><p>我現在來模擬⼀下，如果 primary node 因為⼀些問題掛掉了，看看會發⽣什麼事情：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo mongodb://localhost:2757</span><br></pre></td></tr></table></figure>

<p>你看！它現在已經變成了 primary，這個時候我們再透過 <code>rs.status()</code> 這個指令來看⼀下整體狀況：</p>
<p><img src="4.gif" alt="4.gif"></p>
<p>把 Primary 的關掉，可以注意一下其他 Node 的 <code>stateStr</code> 變化：<br>1: not reachable/healthy<br>2: PRIMARY<br>3: SECONDARY</p>
<p>重新啟動 Primary 以後：<br>1: SECONDARY<br>2: PRIMARY<br>3: SECONDARY</p>
<p>這就是剛剛所提到的，當⼀台壞掉了，會有其他台來 cover，這樣就能夠確保整個資料庫的持續運作！</p>
<h2 id="讓-Secondary-讀得到-Primary"><a href="#讓-Secondary-讀得到-Primary" class="headerlink" title="讓 Secondary 讀得到 Primary"></a>讓 Secondary 讀得到 Primary</h2><p>好，我現在來 demo 怎麼讓 secondary 讀到 primary 的資料。</p>
<p>我先在 primary 裡⾯加點東⻄：</p>
<p><img src="5.gif" alt="5.gif"></p>
<p>試著用第三台去看：</p>
<p><img src="6.gif" alt="6.gif"></p>
<p>重啟第一台試試：</p>
<p><img src="7.gif" alt="7.gif"></p>
<p>來看⼀下整體狀況：</p>
<p><img src="8.gif" alt="8.gif"></p>
<h2 id="MongoDB-裡面的資料"><a href="#MongoDB-裡面的資料" class="headerlink" title="MongoDB 裡面的資料"></a>MongoDB 裡面的資料</h2><p>最後給⼤家看⼀下 MongoDB 的資料和結構：</p>
<p><img src="9.png"></p>
<p>推薦大家這個方便操作＆查看 MongoDB 的圖形化介面：<a href="https://www.mongodb.com/products/compass">MongoDB Compass</a><br>（Easily explore and manipulate your database with Compass, the GUI for MongoDB.）</p>
<br>
希望讀完這篇文章的您能夠有所收穫，我們下篇文見啦 😃]]></content>
  </entry>
  <entry>
    <title>實用 Linux 指令</title>
    <url>/2022/10/linux-command-note/</url>
    <content><![CDATA[<p>記錄一些指令，方便之後快速回憶！</p>
<span id="more"></span>

<ul>
<li><code>man</code> command → manual page<ul>
<li><code>h</code> - 秀出快捷鍵，像是要在視窗內 moving、searching、jumping，可以怎麼下</li>
<li><code>/pattern</code> - 往下找符合 pattern 的字串<ul>
<li><code>n</code> - 跳到下一個符合 pattern 的字串</li>
<li><code>N</code> - 跳到上一個符合 pattern 的字串</li>
</ul>
</li>
<li><code>Enter</code> - 往下移動一行</li>
<li><code>Space</code> - 往下移動一頁</li>
<li><code>g</code> - 移動到 manual page 的最上方</li>
<li><code>G</code> - 移動到 manual page 的最下方</li>
<li><code>q</code> - 離開 manual page</li>
</ul>
</li>
<li><code>which python3 → /opt/homebrew/bin/python3</code><ul>
<li><code>which</code> - locate a program file in the user’s path</li>
</ul>
</li>
<li><code>mkdir -p newdir/product/reviews</code><ul>
<li><code>-p</code> - Create intermediate directories as required.</li>
</ul>
</li>
<li><code>chmod u=rwx,g+x,o= sales.data</code><ul>
<li>(1) <code>ugoa</code> - u for user, g for group, o for other, a for all.</li>
<li>(2) <code>+-=</code> (3) <code>rwx</code></li>
</ul>
</li>
<li><code>chmod 754 file</code><ul>
<li>U → rwx → 111 → 7</li>
<li>G → r-x → 101 → 5</li>
<li>O → r– → 100 → 4</li>
</ul>
</li>
<li><code>umask</code> - a command that determines the settings of a mask that controls how file permissions are set for newly created files.</li>
<li><code>find [path...] [expression]</code> - Recursively finds files in path that match expression.<ul>
<li><code>find . -name &quot;Screen*&quot;</code> (<code>-iname</code> 會忽略大小寫)</li>
<li><code>find . -ls</code> - 對找到的檔案們進行 <code>ls</code></li>
<li><code>find . -mtime num_days</code> - 找出所有 <code>num_days</code>-old 的檔案<ul>
<li><code>find . -mtime +10 -mtime -13</code> - more than 10 days old, but less than 13 days old</li>
</ul>
</li>
<li><code>find . -size +500k -size -10M</code></li>
<li><code>find . -newer file</code></li>
<li><code>find . -exec command &#123;&#125; \;</code> - Run command against all the files that are found.<ul>
<li><code>find root_path -name &#39;*.ext&#39; -exec wc -l &#123;&#125; \;</code> - Run a command for each file (use {} within the command to access the filename)</li>
</ul>
</li>
<li><code>find . -type d -newer b.txt</code> - find directories that are newer than a given file</li>
</ul>
</li>
<li><code>locate pattern</code> - List files that match pattern.<ul>
<li>When you run locate it is simply querying the index or database created by updatedb and not looking at each file on the system.</li>
<li>This is really, really fast.</li>
<li>The down side is that the data is not in real time.</li>
</ul>
</li>
<li>除了 <code>diff</code> 也有 <code>sdiff</code> 及 <code>vimdiff</code></li>
<li><code>grep -v pattern file</code> - Selected lines are those not matching any of the specified patterns.<ul>
<li>-v, –invert-match</li>
</ul>
</li>
<li>The pipe (<code>|</code>) means take the standard output from the preceding command and pass it as the standard input to the following command.</li>
<li>Pipe Output to a Pager<ul>
<li><code>strings ~/Documents/test.mp3 | less</code></li>
</ul>
</li>
<li>Redirection<ul>
<li>standard input → stdin → 0</li>
<li>standard output → stdout → 1</li>
<li>standard error → stderr → 2</li>
<li><code>&gt;</code> - Redirects standard output to a file, overwriting (truncating) any existing contents of the file. If no file exists, it creates one. <code>ls -lF /opt/apache &gt; files.txt</code> same as <code>ls -lF /opt/apache 1&gt; files.txt</code></li>
<li><code>&gt;&gt;</code> - Redirects standard output to a file and appends to any existing contents. If no file exists, it creates one. <code>ls -lF /opt/apache &gt;&gt; files.txt</code></li>
<li><code>&lt;</code> - Redirects input from a file to the command preceding the less-than sign. <code>sort &lt; files.txt</code> same as <code>sort 0&lt; files.txt</code></li>
<li><code>sort &lt; files.txt &gt; sorted_files.txt</code> - The output of the sort command is then redirected to the sorted_files.txt file.</li>
<li><code>&amp;</code> - Used with redirection to signal that a file descriptor is being used instead of a file name.</li>
<li><code>2&gt;&amp;1</code> - Combine standard error and standard output.</li>
<li><code>2&gt; file</code> - Redirect standard error to a file.</li>
<li><code>ls here not-here 1&gt; out 2&gt; out.err</code><ul>
<li><code>cat out</code> → here</li>
<li><code>cat out.err</code> → ls: not-here: No such file or directory</li>
</ul>
</li>
<li><code>ls here not-here &gt; out.both 2&gt;&amp;1</code><ul>
<li><code>cat out.both</code> → ls: not-here: No such file or directory \n here</li>
</ul>
</li>
<li><code>ls here not-here &gt; /dev/null 2&gt;&amp;1</code> - Redirect output to nowhere.</li>
</ul>
</li>
<li><code>scp source destination</code> - Copy source to destination.<ul>
<li><code>scp test.txt linuxsvr1:~/</code></li>
</ul>
</li>
<li><code>echo &#39;export xxx=&quot;ooo&quot;&#39; &gt;&gt; ~/.bash_profile</code> - To make your <code>xxx</code> persist between logins, add the value to your personal initialization files.</li>
<li><code>alias ll=&#39;ls -l&#39;</code> (add them to one of your personal initialization files, like <code>.zshrc</code>, to make them persist between sessions)<ul>
<li>You could create these shortcuts to help you feel more at home.</li>
</ul>
</li>
<li><code>.zshrc</code> 編輯完後可 <code>source .zshrc</code>，就不用得重開一個新的 terminal 才會有新的設定</li>
<li><code>history</code> (可設定環境變數 <code>HISTSIZE</code>，值越大，保存越多 command history)</li>
<li>Tab Completion</li>
<li>Dealing with Long Shell Commands: The backslash (<code>\</code>) is the line continuation character.</li>
<li><code>printenv</code> – print out the environment variables (<code>env</code> 也可以)</li>
<li><code>crontab</code> - Schedule cron jobs to run on a time interval for the current user.</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>用 PlantUML 畫 Sequence Diagram</title>
    <url>/2022/10/plantuml-sequence-diagram/</url>
    <content><![CDATA[<p>簡單好用！</p>
<span id="more"></span>

<h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>剛好工作需要畫 Sequence Diagram，加上幾天前忘記從哪挖到「<a href="https://blog.wu-boy.com/2022/09/three-tools-design-system-architecture-and-flow/">三款好用的繪圖工具來解決系統架構或流程圖</a>」這篇文章，決定試試看，發現挺不錯的！</p>
<h3 id="行動"><a href="#行動" class="headerlink" title="行動"></a>行動</h3><p>於是乎，我就在 VS Code 上裝「<a href="https://marketplace.visualstudio.com/items?itemName=jebbs.plantuml">PlantUML</a>」這個 Extension，當我要 <code>Preview Current Diagram</code> 時，居然噴錯，原來是沒有裝 Java⋯⋯</p>
<p>因為我筆電是 M1 晶片，所以就參考「<a href="https://code2care.org/q/install-native-java-jdk-jre-on-apple-silicon-m1-mac">Install Native Java JDK JRE on Apple Silicon M1 Mac</a>」這篇文章裝 Java，裝完以後，就能 preview 了，Nice！</p>
<p>（是也有線上的 editor 啦，但在 VS Code 上寫比較舒服～要註解掉也比較方便）</p>
<h3 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h3><p>搭配<a href="https://plantuml.com/en/sequence-diagram">官方文檔</a>及<a href="https://blog.wu-boy.com/2022/09/three-tools-design-system-architecture-and-flow/">那篇文章的程式碼</a>，很好理解可以怎麼畫，會覺得，哇，真的很方便！</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>話說，<a href="https://blog.wu-boy.com/2022/09/three-tools-design-system-architecture-and-flow/">文章</a>裡面提到的「<a href="https://excalidraw.com/">Excalidraw</a>」這套繪製流程圖的線上軟體，感覺也是挺有意思的，風格看起來很像是在手繪😂</p>
]]></content>
  </entry>
  <entry>
    <title>用 Python 操作 Android 手機</title>
    <url>/2021/07/python-android-phone/</url>
    <content><![CDATA[<p><a href="/2021/07/python-android-phone"><img src="https://images.unsplash.com/photo-1607252650355-f7fd0460ccdb?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1500&q=80" style="width:50vw;" /></a></p>
<!-- <img src="0.jpeg" style="width:50vw;" /> -->

<p>玩遊戲有些時候，常常需要一直點、一直點、一直點，實在有夠浪費時間⋯⋯</p>
<span id="more"></span>

<p>像我玩 NBA LIVE 的時候，每次拍賣過期的物品都要一個一個去關閉，而且每個點完還需要再等大概 3 秒才能再點下一個！</p>
<p>試算一下，如圖，我還有 96 個還沒關閉，一個以 3 秒來計算，96 * 3 = 288 秒，我得花快 5 分鐘才能全部點完，而且是要一直手點哦！</p>
<p><img src="1.png"></p>
<p>幸好，無意間在網路上找到了「<a href="https://itnext.io/how-you-can-control-your-android-device-with-python-45c3ab15e260">How you can Control your Android Device with Python</a>」這篇文，解救了我的時間，也讓我大開眼界～</p>
<hr>
<h2 id="裝-adb"><a href="#裝-adb" class="headerlink" title="裝 adb"></a>裝 adb</h2><h3 id="adb-是什麼呢？"><a href="#adb-是什麼呢？" class="headerlink" title="adb 是什麼呢？"></a>adb 是什麼呢？</h3><p><a href="https://developer.android.com/studio/command-line/adb">官方文檔</a>上是這樣寫的：<br>Android Debug Bridge (adb) is a versatile command-line tool that lets you communicate with a device.</p>
<h3 id="用-Homebrew-裝"><a href="#用-Homebrew-裝" class="headerlink" title="用 Homebrew 裝"></a>用 Homebrew 裝</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install android-platform-tools</span><br></pre></td></tr></table></figure>

<p>當你在終端機輸入 <code>adb</code> 有秀出東西就代表裝成功了！<br>（其他安裝方式可以參考<a href="https://stackoverflow.com/questions/17901692/set-up-adb-on-mac-os-x">這一篇</a>）</p>
<hr>
<h2 id="裝-pure-python-adb"><a href="#裝-pure-python-adb" class="headerlink" title="裝 pure-python-adb"></a>裝 pure-python-adb</h2><h3 id="它是什麼？"><a href="#它是什麼？" class="headerlink" title="它是什麼？"></a>它是什麼？</h3><p>可以把它想成，這個套件可以讓我們透過 Python，用更簡單地方式來和 adb 做溝通。<br>也就是能用更高階的 interface，去操作底層的東西。</p>
<h3 id="用-pip-裝"><a href="#用-pip-裝" class="headerlink" title="用 pip 裝"></a>用 pip 裝</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pure-python-adb</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="手機端的設置"><a href="#手機端的設置" class="headerlink" title="手機端的設置"></a>手機端的設置</h2><h3 id="啟用開發人員選項"><a href="#啟用開發人員選項" class="headerlink" title="啟用開發人員選項"></a>啟用開發人員選項</h3><p>以我的 HTC U11 plus 為例：<br>設定 → 系統 → 關於手機 → 軟體資訊 → 更多 → <strong>連續點 7 下「版本號碼」</strong></p>
<h3 id="允許連接-USB-時進入偵錯模式"><a href="#允許連接-USB-時進入偵錯模式" class="headerlink" title="允許連接 USB 時進入偵錯模式"></a>允許連接 USB 時進入偵錯模式</h3><p>設定 → 系統 → 開發人員選項 → 開啟「USB 偵錯」</p>
<hr>
<h2 id="手機連電腦"><a href="#手機連電腦" class="headerlink" title="手機連電腦"></a>手機連電腦</h2><p>手機用 USB 接上電腦後，就可以來試驗囉！</p>
<h3 id="啟動-adb-server"><a href="#啟動-adb-server" class="headerlink" title="啟動 adb server"></a>啟動 adb server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb start-server</span><br></pre></td></tr></table></figure>

<p>此時，手機畫面上會出現「允許 USB 偵錯嗎？」，按確定就行了。</p>
<hr>
<h2 id="寫-code-解決問題"><a href="#寫-code-解決問題" class="headerlink" title="寫 code 解決問題"></a>寫 code 解決問題</h2><h3 id="找出螢幕某一點的位置"><a href="#找出螢幕某一點的位置" class="headerlink" title="找出螢幕某一點的位置"></a>找出螢幕某一點的位置</h3><p>如果想用 pure-python-adb 點螢幕，就必須要給它座標。<br>該怎麼找呢？設定 → 系統 → 開發人員選項 → 打開「輸入」底下的「指標位置」<br>如此一來，點螢幕的時候，螢幕最上面就看得到座標了！</p>
<h3 id="寫程式"><a href="#寫程式" class="headerlink" title="寫程式"></a>寫程式</h3><p>啟發我靈感的<a href="https://itnext.io/how-you-can-control-your-android-device-with-python-45c3ab15e260">這篇文</a>有解釋程式碼的部分，這邊就不重複了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ppadb.client <span class="keyword">import</span> Client <span class="keyword">as</span> AdbClient</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span>():</span></span><br><span class="line"></span><br><span class="line">  client = AdbClient(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">5037</span>)</span><br><span class="line"></span><br><span class="line">  devices = client.devices()</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(devices) == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;No devices&#x27;</span>)</span><br><span class="line">    quit()</span><br><span class="line"></span><br><span class="line">  device = devices[<span class="number">0</span>]</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&#x27;Connected to <span class="subst">&#123;device&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> device, client</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">  device, client = connect()</span><br><span class="line"></span><br><span class="line">  close_button = <span class="string">&#x27;2120 325&#x27;</span>   <span class="comment"># x y 這邊填上按鈕的指標位置</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    device.shell(<span class="string">f&#x27;input tap <span class="subst">&#123;close_button&#125;</span>&#x27;</span>)   <span class="comment"># 點按指定的位置</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>跑程式以後，手機就照著指令動作了！（畫面最上面就是顯示指標位置的 bar）</p>
<p><img src="2.gif"></p>
<p>拍賣的畫面更有感！</p>
<p><img src="3.gif"></p>
<p>酷斃了 😎</p>
<h3 id="用完把-adb-server-給關掉"><a href="#用完把-adb-server-給關掉" class="headerlink" title="用完把 adb server 給關掉"></a>用完把 adb server 給關掉</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb kill-server</span><br></pre></td></tr></table></figure>

<h3 id="其他相關工具"><a href="#其他相關工具" class="headerlink" title="其他相關工具"></a>其他相關工具</h3><p><a href="https://github.com/Genymobile/scrcpy">scrcpy</a></p>
<br>
今天的分享就到這邊，我們下篇文見吧 😃]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Android</tag>
        <tag>小工具</tag>
      </tags>
  </entry>
  <entry>
    <title>當 Python 遇上了 LINE Blockchain</title>
    <url>/2021/07/python-line-blockchain/</url>
    <content><![CDATA[<p><a href="/2021/07/python-line-blockchain"><img src="https://images.unsplash.com/photo-1561451213-d5c9f0951fdf?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2689&q=80" style="width:50vw;" /></a></p>
<!-- <img src="0.jpeg" style="width:50vw;" /> -->

<p>可能是因為比較新的關係，在網路上頗難找到用 Python 弄 LINE Blockchain 的教學文。<br>本篇主要會以筆記的方式，簡單帶大家看要怎麼使用。</p>
<span id="more"></span>

<p>這篇的誕生，一樣也是因為升大四暑假的那一場線上黑客松。<br>（黑客松真的是個不錯的活動呢，累歸累，但學到了不少東西）</p>
<h1 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h1><h2 id="啟用服務"><a href="#啟用服務" class="headerlink" title="啟用服務"></a>啟用服務</h2><p>還沒啟用 LINE Blockchain 前，創 channel 的時候 Blockchain Service 的地方會暗掉不讓你按。</p>
<p><img src="1.png"></p>
<p>到 LINE Blockchain Developers 的 <a href="https://blockchain.line.biz/#/pricing">Pricing</a> 頁面選一個方案開始吧！</p>
<p><img src="2.png"></p>
<p>光是用商用帳號不夠哦，還得連動我們自己的 LINE 帳號。</p>
<p><img src="3.png"></p>
<p>連動完就 OK 了嗎？還沒哦！我們還要申請一個 Cashew Partner 帳戶才行，就 Apply 吧！</p>
<p><img src="4.png"></p>
<p>不是按完 Apply 就能啟用，還得再等他們 reviewing。<br>這個申請是需要時間等待的，我等了快五小時半！</p>
<p><img src="5.png"></p>
<p>申請通過以後，創建 channel 時就能選 Blockchain Service 囉！</p>
<h2 id="LINE-Blockchain"><a href="#LINE-Blockchain" class="headerlink" title="LINE Blockchain"></a>LINE Blockchain</h2><p>YouTube 頻道 <a href="https://www.youtube.com/channel/UCuzvuO3E9XIoreE9u7B1ETw">LINE Developers</a> 有個教學影片 <a href="https://youtu.be/tx1Q6GbIpwM?t=367">An Introduction to LINE Blockchain Platform</a> 介紹得很好，它有 step-by-step 的操作步驟！<br>如果不是要用 JavaScript，影片差不多看到 12:37 就行了。</p>
<p>那如果你想學怎麼用 JavaScript 弄 LINE Blockchain，或許可以參考影片裡面的 repo <a href="https://github.com/behumble/line-blockchain-coffee">line-blockchain-coffee</a>。</p>
<p>又或者你想更有系統地學習 LINE Blockchain？<a href="https://docs-blockchain.line.biz/service-tutorial/?id=tutorial-map">官方教學文檔</a>是個不錯的地方！（只不過它是用 curl）</p>
<h1 id="Python-code"><a href="#Python-code" class="headerlink" title="Python code"></a>Python code</h1><h2 id="Generating-signature"><a href="#Generating-signature" class="headerlink" title="Generating signature"></a>Generating signature</h2><p>因為 call LINE Blockchain 的 API 需要 signature，所以先來寫(抄) signature 的部分吧！<br><a href="https://docs-blockchain.line.biz/api-guide/Generating-Signature?id=python-sample">官方文檔</a>上有範例 code，我想，我們就直接拿來用吧！</p>
<h3 id="request-flattener-py"><a href="#request-flattener-py" class="headerlink" title="request_flattener.py"></a><code>request_flattener.py</code></h3><p>這是 Signature Generator 會需要用到的 utility。</p>
<p>我沒有特別去研究它每一行 code 分別代表什麼意思，想說這對黑客松來說根本不重要，重要的是能知道怎麼用，然後拿來開發出我們需要的 feature。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestBodyFlattener</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__flatten_key_value</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isinstance</span>(value, <span class="built_in">str</span>)):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;key&#125;</span>=<span class="subst">&#123;value&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isinstance</span>(value, <span class="built_in">list</span>)):</span><br><span class="line">            l_key_value = &#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> index, ele <span class="keyword">in</span> <span class="built_in">enumerate</span>(value):</span><br><span class="line">                <span class="keyword">for</span> lkey <span class="keyword">in</span> <span class="built_in">list</span>(ele.keys() | l_key_value.keys()):</span><br><span class="line">                    <span class="keyword">if</span> lkey <span class="keyword">in</span> ele.keys():</span><br><span class="line">                        lvalue = ele[lkey]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        lvalue = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (lkey <span class="keyword">in</span> l_key_value.keys()):</span><br><span class="line">                        l_key_value[lkey] = <span class="string">f&quot;<span class="subst">&#123;l_key_value[lkey]&#125;</span>,<span class="subst">&#123;lvalue&#125;</span>&quot;</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        l_key_value[lkey] = <span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;,&#x27;</span> * index&#125;</span><span class="subst">&#123;lvalue&#125;</span>&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&amp;&quot;</span>.join(<span class="string">&quot;%s=%s&quot;</span> % (<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>.<span class="subst">&#123;lkey&#125;</span>&quot;</span>, lvalue) <span class="keyword">for</span> (lkey, lvalue) <span class="keyword">in</span> <span class="built_in">sorted</span>(l_key_value.items()))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flatten</span>(<span class="params">self, body: <span class="built_in">dict</span> = &#123;&#125;</span>):</span></span><br><span class="line">        sorted_body = <span class="built_in">sorted</span>(body.items())</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&amp;&quot;</span>.join(self.__flatten_key_value(key, value) <span class="keyword">for</span> (key, value) <span class="keyword">in</span> sorted_body)</span><br></pre></td></tr></table></figure>

<h3 id="signature-generator-py"><a href="#signature-generator-py" class="headerlink" title="signature_generator.py"></a><code>signature_generator.py</code></h3><p>這邊跟官方文檔上有些地方不一樣，像是第 18 行，我改了 generate 的參數順序。</p>
<p>這麼做是因為，它 API reference 那邊 get_signature 的順序跟它在 Generating signature 定義的不一樣，想說未來可能會大量複製貼上它 API 的範例 code，為了未來使用上的方便，乾脆一開始定義的時候照 API reference 的順序不就好了？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> .request_flattener <span class="keyword">import</span> RequestBodyFlattener</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SignatureGenerator</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__createSignTarget</span>(<span class="params">self, method, path, timestamp, nonce, parameters: <span class="built_in">dict</span> = &#123;&#125;</span>):</span></span><br><span class="line">        signTarget = <span class="string">f&#x27;<span class="subst">&#123;nonce&#125;</span><span class="subst">&#123;<span class="built_in">str</span>(timestamp)&#125;</span><span class="subst">&#123;method&#125;</span><span class="subst">&#123;path&#125;</span>&#x27;</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">len</span>(parameters) &gt; <span class="number">0</span>):</span><br><span class="line">            signTarget = signTarget + <span class="string">&quot;?&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> signTarget</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate</span>(<span class="params">self, method: <span class="built_in">str</span>, path: <span class="built_in">str</span>, nonce: <span class="built_in">str</span>, timestamp: <span class="built_in">int</span>, service_api_secret: <span class="built_in">str</span>, query_params: <span class="built_in">dict</span> = &#123;&#125;, body: <span class="built_in">dict</span> = &#123;&#125;</span>):</span></span><br><span class="line">        body_flattener = RequestBodyFlattener()</span><br><span class="line">        all_parameters = &#123;&#125;</span><br><span class="line">        all_parameters.update(query_params)</span><br><span class="line">        all_parameters.update(body)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.__logger.debug(&quot;query_params: &quot; + str(query_params))</span></span><br><span class="line"></span><br><span class="line">        signTarget = self.__createSignTarget(method.upper(), path, timestamp, nonce, all_parameters)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>(query_params) &gt; <span class="number">0</span>):</span><br><span class="line">            signTarget += <span class="string">&#x27;&amp;&#x27;</span>.join(<span class="string">&#x27;%s=%s&#x27;</span> % (key, value) <span class="keyword">for</span> (key, value) <span class="keyword">in</span> query_params.items())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>(body) &gt; <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">len</span>(query_params) &gt; <span class="number">0</span>):</span><br><span class="line">                signTarget += <span class="string">&quot;&amp;&quot;</span> + body_flattener.flatten(body)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                signTarget += body_flattener.flatten(body)</span><br><span class="line"></span><br><span class="line">        raw_hmac = hmac.new(<span class="built_in">bytes</span>(service_api_secret, <span class="string">&#x27;utf-8&#x27;</span>), <span class="built_in">bytes</span>(signTarget, <span class="string">&#x27;utf-8&#x27;</span>), hashlib.sha512)</span><br><span class="line">        result = base64.b64encode(raw_hmac.digest()).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<h2 id="包成自己-project-需要的-function"><a href="#包成自己-project-需要的-function" class="headerlink" title="包成自己 project 需要的 function"></a>包成自己 project 需要的 function</h2><p>以下面兩個為例：</p>
<ul>
<li><a href="https://docs-blockchain.line.biz/api-guide/category-users?id=v1-users-userid-get">Users → Retrieve → Retrieve user information</a></li>
<li><a href="https://docs-blockchain.line.biz/api-guide/category-users?id=v1-users-userid-service-tokens-contractid-transfer-post">Users → Transfer → Transfer a delegated service token (user wallet)</a></li>
</ul>
<p>Details 的地方展開以後，往下滑就能找到 Python 的範例 code！<br>不誇張，直接複製貼上然後再修改，最後在我的 project 上長這樣：</p>
<p><code>users.py</code></p>
<h3 id="底層"><a href="#底層" class="headerlink" title="底層"></a>底層</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># ./utils 是我放 signature_generator.py 的地方</span></span><br><span class="line"><span class="keyword">from</span> .utils.signature_generator <span class="keyword">import</span> SignatureGenerator</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要先實體化才能用（這部分或許有更好的寫法）</span></span><br><span class="line">signatureGenerator = SignatureGenerator()</span><br><span class="line">get_signature = signatureGenerator.generate</span><br></pre></td></tr></table></figure>

<h3 id="Retrieve-user-information"><a href="#Retrieve-user-information" class="headerlink" title="Retrieve user information"></a>Retrieve user information</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用 class 包，這樣在取用的時候會更有條理（待會就知道為什麼了）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">retrieve</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># # Retrieve user information</span></span><br><span class="line">    <span class="comment"># Retrieve the information of the given user.</span></span><br><span class="line">    <span class="comment"># https://docs-blockchain.line.biz/api-guide/category-users?id=v1-users-userid-get</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wallet_address</span>(<span class="params">user_id</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 下面 3 行都是環境變數</span></span><br><span class="line">        server_url = os.environ[<span class="string">&#x27;SERVER_URL&#x27;</span>]</span><br><span class="line">        service_api_key = os.environ[<span class="string">&#x27;SERVICE_API_KEY&#x27;</span>]</span><br><span class="line">        service_api_secret = os.environ[<span class="string">&#x27;SERVICE_API_SECRET&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        nonce = <span class="string">&#x27;&#x27;</span>.join(random.choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>))</span><br><span class="line">        timestamp = <span class="built_in">int</span>(<span class="built_in">round</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line">        path = <span class="string">f&#x27;/v1/users/<span class="subst">&#123;user_id&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&#x27;service-api-key&#x27;</span>: service_api_key,</span><br><span class="line">            <span class="string">&#x27;nonce&#x27;</span>: nonce,</span><br><span class="line">            <span class="string">&#x27;timestamp&#x27;</span>: <span class="built_in">str</span>(timestamp)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        signature = get_signature(<span class="string">&#x27;GET&#x27;</span>, path, nonce, timestamp, service_api_secret)</span><br><span class="line">        headers[<span class="string">&#x27;signature&#x27;</span>] = signature</span><br><span class="line"></span><br><span class="line">        res = requests.get(server_url + path, headers=headers)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 這自己改的，因為我的 project 只需要 wallet address</span></span><br><span class="line">        wallet_address = res.json()[<span class="string">&#x27;responseData&#x27;</span>][<span class="string">&#x27;walletAddress&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wallet_address</span><br></pre></td></tr></table></figure>

<h3 id="Transfer-a-delegated-service-token"><a href="#Transfer-a-delegated-service-token" class="headerlink" title="Transfer a delegated service token"></a>Transfer a delegated service token</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用 class 包，這樣在取用的時候會更有條理（待會就知道為什麼了）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">transfer</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># # Transfer a delegated service token (user wallet)</span></span><br><span class="line">    <span class="comment"># Request to transfer the delegated service token in the given user wallet to another wallet.</span></span><br><span class="line">    <span class="comment"># https://docs-blockchain.line.biz/api-guide/category-users?id=v1-users-userid-service-tokens-contractid-transfer-post</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">service_token</span>(<span class="params">user_id, amount</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 下面 6 行都是環境變數</span></span><br><span class="line">        server_url = os.environ[<span class="string">&#x27;SERVER_URL&#x27;</span>]</span><br><span class="line">        service_api_key = os.environ[<span class="string">&#x27;SERVICE_API_KEY&#x27;</span>]</span><br><span class="line">        service_api_secret = os.environ[<span class="string">&#x27;SERVICE_API_SECRET&#x27;</span>]</span><br><span class="line">        contract_id = os.environ[<span class="string">&#x27;LBP_CONTRACT_ID_LBCC&#x27;</span>]</span><br><span class="line">        owner_address = os.environ[<span class="string">&#x27;LBP_OWNER_WALLET_ADDRESS&#x27;</span>]</span><br><span class="line">        owner_secret = os.environ[<span class="string">&#x27;LBP_OWNER_WALLET_SECRET&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        nonce = <span class="string">&#x27;&#x27;</span>.join(random.choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>))</span><br><span class="line">        timestamp = <span class="built_in">int</span>(<span class="built_in">round</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line">        path = <span class="string">f&#x27;/v1/users/<span class="subst">&#123;user_id&#125;</span>/service-tokens/<span class="subst">&#123;contract_id&#125;</span>/transfer&#x27;</span></span><br><span class="line"></span><br><span class="line">        request_body = &#123;</span><br><span class="line">            <span class="string">&#x27;ownerAddress&#x27;</span>: <span class="string">f&#x27;<span class="subst">&#123;owner_address&#125;</span>&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;ownerSecret&#x27;</span>: <span class="string">f&#x27;<span class="subst">&#123;owner_secret&#125;</span>&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;amount&#x27;</span>: <span class="string">f&#x27;<span class="subst">&#123;amount * <span class="number">1000000</span>&#125;</span>&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&#x27;service-api-key&#x27;</span>: service_api_key,</span><br><span class="line">            <span class="string">&#x27;nonce&#x27;</span>: nonce,</span><br><span class="line">            <span class="string">&#x27;timestamp&#x27;</span>: <span class="built_in">str</span>(timestamp),</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        signature = get_signature(<span class="string">&#x27;POST&#x27;</span>, path, nonce, timestamp, service_api_secret, body=request_body)</span><br><span class="line">        headers[<span class="string">&#x27;signature&#x27;</span>] = signature</span><br><span class="line"></span><br><span class="line">        res = requests.post(server_url + path, headers=headers, json=request_body)</span><br><span class="line">        <span class="keyword">return</span> res.json()</span><br></pre></td></tr></table></figure>

<p>你會發現，很多範例 code 寫死的部分，我都用 <a href="https://docs.python.org/3/tutorial/inputoutput.html#formatted-string-literals">f-strings</a> 代替，原因你應該知道xD</p>
<h2 id="使用那些-function"><a href="#使用那些-function" class="headerlink" title="使用那些 function"></a>使用那些 function</h2><p>先給大家看我 project 跟 blockchain 有關的目錄結構：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">├── fsm.py</span><br><span class="line">└── service</span><br><span class="line">    └── blockchain</span><br><span class="line">        ├── service_tokens.py</span><br><span class="line">        ├── users.py</span><br><span class="line">        └── utils</span><br><span class="line">            ├── request_flattener.py</span><br><span class="line">            └── signature_generator.py</span><br></pre></td></tr></table></figure>

<p>下面是 <code>fsm.py</code> 的某個部份：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> service.blockchain <span class="keyword">import</span> users, service_tokens</span><br><span class="line"></span><br><span class="line">user_id = <span class="string">&#x27;this_is_user_id&#x27;</span></span><br><span class="line">amount = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">users.transfer.service_token(user_id, amount)</span><br><span class="line">user_wallet_address = users.retrieve.wallet_address(user_id)</span><br><span class="line">service_tokens.mint(user_wallet_address, amount)   <span class="comment"># 這部分的 code 我沒 share</span></span><br></pre></td></tr></table></figure>

<p>知道為什麼我要包成 class 了吧？這樣就能夠照文檔編排的邏輯 call function！</p>
<br>
希望讀完這篇文章的您能夠有所收穫，我們下篇文見啦 😃]]></content>
      <tags>
        <tag>Python</tag>
        <tag>黑客松</tag>
        <tag>交大</tag>
        <tag>教學</tag>
        <tag>LINE</tag>
        <tag>Blockchain</tag>
      </tags>
  </entry>
  <entry>
    <title>隨便寫點什麼</title>
    <url>/2022/12/random-thought-0/</url>
    <content><![CDATA[<p>好久沒寫卡尼多隨筆了，趁著搭車上班的路上來寫個。也挑戰看看，看能不能在到站前完成這一篇，剩下回家頂多再稍微修飾和發布。</p>
<p>為什麼想這麼做呢？我希望能透過名為「開始行動」的外力，來改變名為「懶惰」的慣性：靜者恆靜，動者恆做等速度運動；感覺出社會上班以後，生活有點呈現停滯的狀態，希望「寫作文字輸出」這方面先有個小展開，繼而推動其他層面，像是 YouTube 頻道「卡尼多」、下班後嘗試做 side project 或是參加技術方面的社群活動、健康、家庭、生活體驗等等的，很多事情都是屬於「重要但不緊急」，這會讓我們誤以為他們不重要而持續拖延不去做，然而久了以後，當他們一直放著變緊急的時候，或許要再行動會更有難度，甚至為時已晚，既然這樣，早點關注、規劃、推動，不是更好嗎？（這裡沒有要訓話(?)的意思，我只希望能給自己一個當頭棒喝，讓自己醒醒啊，不要再渾渾噩噩、虛無飄渺地過每一天了😂）</p>
<p>開頭好像打偏長？隨意啦，至少比一直不行動，什麼都沒寫的狀態好多了！</p>
<span id="more"></span>

<p>之前在 AppWorks School，有跟導師 Jack 聊到關於「寫部落格」這件事情，因為我印象中他好像也有寫部落格的樣子。聊到說，擔心自己文章寫得沒什麼內容，不敢寫而持續不去更新，這種情況該怎麼去應對？他說，為何需要擔心呢？你就想，反正自己的部落格也不太會有人進來看，又不是電腦玩物、閱讀前哨站（這我自己加的），既然幾乎沒有人會進來看，那還擔心什麼呢？（感覺這就好像高中英文課本其中一篇課文，開學第一天，你很在意臉上的青春痘會不會讓自己很丟臉讓大家留下一個令自己不滿意的第一印象，然而事實上，爾後問同學們，發現大家根本沒注意到女主角臉上的青春痘，反倒被問了，那你有注意到我OOXX嗎？大家大部分時間最關注的事情，都是跟自己有關的事情啊！）</p>
<p>對啊，既然這樣，那我為何要把心思花在擔心自己的文章品質上呢？現階段又沒有要拿來賺錢什麼的，寫得開心、提供自己一個反思的園地、持續關注自己的成長，不是很好嗎？</p>
<p>「認識自我、感受世界、創造價值」，哇嗚，我都差點忘記我給自己下的一個 slogan 了。這 slogan 不就是我寫部落格的初衷嗎？我是一個喜歡創造的人，對我來說，能夠創造出東西繼而創造價值是一件讓我很有成就感的事情！持續寫下去吧，先不要太在意品質這檔事了，因為在意而不敢輸出，而沒有持續練習，怎麼可能會提升文章的品質呢？就像以前國小在國樂團拉二胡，沒有每次二胡課隨堂測驗的出糗，怎能締造出小六時不錯的表現呢？（雖然已經很久沒拉，應該只記得怎麼拉小星星了吧😂）</p>
<p>現在在大安森林公園站了，好像快到了，我得再想想能寫什麼🤔</p>
<p>反正感覺今天這篇最重要的，就是讓自己「開始推動」，寫作方面也好、其他方面都好，不要被心底的其他雜音給綁住，綁手綁腳的，實在沒什麼太大意義，不如不要想太多展開行動，讓自己步上軌道，緩慢沒關係，一步一腳印(?)即可。</p>
<p>把「卡尼多隨筆」當成畫布，在上頭鮮豔上色吧！</p>
<p>好了，這一站到站，下一站就要下車了，我們今天就到這邊吧，謝謝大家的觀看😃（或許「大家」其實等於「我自己」也說不定😂）</p>
]]></content>
  </entry>
  <entry>
    <title>關於自律</title>
    <url>/2023/06/self-discipline/</url>
    <content><![CDATA[<p>優質 Podcast 單集分享：<a href="https://open.spotify.com/episode/30Hicw2IC4GmqYjysRKaom?si=tDVShXP-SHOsEUSCph4lcg">[高效人生商學院] 如何成為一個自律的人？自律真的可以幫助我們更成功嗎？</a></p>
<span id="more"></span>

<br />

<p>自律 ≠ 屬於外在且常常會被誤以為是自律的「他律」，讓一個標準硬生生套到自己身上，過一個苦行僧般的生活，有時或許只是為了滿足虛榮心。</p>
<p>自律 = 在不斷試錯、迭代、復盤、優化的過程當中，找到適合自己的方式、手段，去做對自己來說有價值的事情，並嘗試持續往前推進。</p>
<p>⇒ 相信直覺，沒有所謂的標準答案，就算是某領域權威的建議，也不見得全然都適合自己，我們是能夠做選擇和調整的！</p>
]]></content>
  </entry>
  <entry>
    <title>用 Python 將 PDF 文檔轉成 PNG 圖檔</title>
    <url>/2021/06/python-pdf-to-png/</url>
    <content><![CDATA[<p><a href="/2021/06/python-pdf-to-png"><img src="https://images.unsplash.com/photo-1551029506-0807df4e2031?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2691&q=80" style="width:50vw;" /></a></p>
<!-- <img src="0.jpeg" style="width:50vw;" /> -->

<p>想把 PDF 轉成圖檔，卻又擔心交給線上工具處理會不會有什麼安全上的疑慮？交給 Python 吧！</p>
<span id="more"></span>

<p>本篇大量包含解決問題的思考過程，想省略，裝完套件以後就直接跳到最後面吧！</p>
<h3 id="上網找解決辦法"><a href="#上網找解決辦法" class="headerlink" title="上網找解決辦法"></a>上網找解決辦法</h3><p>試著 google「pdf to png python」，找到了 <a href="https://pypi.org/project/pdf2image/">pdf2image</a>。</p>
<blockquote>
<p>A python (3.6+) module that wraps pdftoppm and pdftocairo to convert PDF to a PIL Image object</p>
</blockquote>
<p>看起來，這就是我們要的！</p>
<h3 id="安裝相關套件"><a href="#安裝相關套件" class="headerlink" title="安裝相關套件"></a>安裝相關套件</h3><p>本教學以 Mac 為例，其他作業系統的安裝方式請參見 <a href="https://pypi.org/project/pdf2image/">PyPI 上面的說明</a>。</p>
<p>因為 pdf2image 是基於 Poppler 開發出來的，所以在安裝 pdf2image 前，先來裝 Poppler 吧！</p>
<ol>
<li>打開 Terminal 或 iTerm 之類的終端機</li>
<li>輸入 <code>brew</code> 看有沒有裝 Homebrew，如果還沒裝就上網找資料裝一裝吧！<br>不過 <a href="http://macappstore.org/poppler/">Poppler 的安裝頁面</a>有提供我們裝 Homebrew 的指令，就看要不要直接用，或是另找其他安裝方式也行。</li>
<li>用 Homebrew 裝 Poppler：在終端機上輸入 <code>brew install poppler</code> 就行囉！<br>（如果出現 <code>Updating Homebrew...</code> 可以用 <code>Ctrl+C</code> 跳過更新的程序，不然可能會卡很久）</li>
<li>用 pip 裝 pdf2image：<code>pip install pdf2image</code></li>
</ol>
<p>這樣相關套件就裝完囉，準備來使用吧！</p>
<h3 id="簡單玩一下套件"><a href="#簡單玩一下套件" class="headerlink" title="簡單玩一下套件"></a>簡單玩一下套件</h3><p>畢竟之前沒弄過，不確定這符不符合我們的需求。<br>所以在嘗試解決問題之前，先小玩一下～<br><a href="https://pypi.org/project/pdf2image/">pdf2image 頁面</a>有程式碼，就照上面的 code 試試：</p>
<ol>
<li><p>import pdf2image 相關套件</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pdf2image <span class="keyword">import</span> convert_from_path, convert_from_bytes</span><br><span class="line"><span class="keyword">from</span> pdf2image.exceptions <span class="keyword">import</span> (</span><br><span class="line">    PDFInfoNotInstalledError,</span><br><span class="line">    PDFPageCountError,</span><br><span class="line">    PDFSyntaxError</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li><p>第一段程式碼看起來比較簡單，就試那個吧：（檔案的 path 記得要改，可以用相對路徑）</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">images = convert_from_path(<span class="string">&#x27;/home/belval/example.pdf&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p><code>images</code> 不知道該怎麼用，就 print 出來看一下囉，<code>print(images)</code>，輸出了這些：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&lt;PIL.PpmImagePlugin.PpmImageFile image mode=RGB size=1654x2339 at 0x115B32D90&gt;,</span><br><span class="line"> &lt;PIL.PpmImagePlugin.PpmImageFile image mode=RGB size=1654x2339 at 0x115B99B50&gt;,</span><br><span class="line"> &lt;PIL.PpmImagePlugin.PpmImageFile image mode=RGB size=1654x2339 at 0x115B99B90&gt;,</span><br><span class="line"> &lt;PIL.PpmImagePlugin.PpmImageFile image mode=RGB size=1654x2339 at 0x115BA2BD0&gt;,</span><br><span class="line"> &lt;PIL.PpmImagePlugin.PpmImageFile image mode=RGB size=1654x2339 at 0x115BA2FD0&gt;]</span><br></pre></td></tr></table></figure>

<p> （list 裡面 PIL 的個數取決於 PDF 檔的頁數）</p>
</li>
<li><p>PIL 是什麼東西啊？應該跟 image 有關吧？於是我 google「PIL Image」，找到了<a href="https://ithelp.ithome.com.tw/articles/10226578">這篇</a>。<br>看那篇文裡面的 code 有 <code>from PIL import Image</code>，該不會又要裝套件了吧⋯⋯<br>不管，先試著直接 import PIL，發現可以欸，代表說本機端已經有 PIL 套件了！<br><a href="https://github.com/Belval/pdf2image/blob/master/.travis.yml">後來發現</a>，原來在裝 pdf2image 時，它就幫我們裝好了 pillow (PIL)。</p>
</li>
<li><p>有點不務正業，來照<a href="https://ithelp.ithome.com.tw/articles/10226578">剛剛那篇文</a>試試 PIL 吧，說不定能有什麼新發現。</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&quot;test.jpeg&quot;</span>)</span><br><span class="line">im.save(<span class="string">&quot;test.png&quot;</span>,<span class="string">&quot;png&quot;</span>)</span><br></pre></td></tr></table></figure>

<p> 還真的生成「test.png」了呢！那 <code>im</code> 又是什麼呢？好奇 print 一下，輸出了這個：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1500x1000 at 0x10D9FAE50&gt;</span><br></pre></td></tr></table></figure>

<p> 咦？這跟剛剛 <code>images</code> print 出來的東西很像欸，該不會⋯⋯</p>
</li>
<li><p>柳暗花明又一村：（承接剛剛的 <code>images</code>）</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i, image <span class="keyword">in</span> <span class="built_in">enumerate</span>(images):</span><br><span class="line">  image.save(<span class="string">f&#x27;<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>.png&#x27;</span>, <span class="string">&#x27;png&#x27;</span>)   <span class="comment"># 如果想從 1 開始數的話</span></span><br></pre></td></tr></table></figure>

<p> 還真的可以欸😂</p>
</li>
</ol>
<h3 id="用套件解決問題"><a href="#用套件解決問題" class="headerlink" title="用套件解決問題"></a>用套件解決問題</h3><p>過程中有不懂或忘記的就 google 吧：</p>
<ul>
<li>忘記怎麼判斷字串中有無某 substring → google「python test substring」→ 找到「<a href="https://www.afternerd.com/blog/python-string-contains/">Check if a String Contains Another String</a>」</li>
<li>忘記怎麼用 Python 創建資料夾 → google「python os mkdir」→ 找到「<a href="https://www.runoob.com/python/os-mkdir.html">Python os.mkdir()</a>」</li>
</ul>
<p>最後生出來的 code：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pdf2image <span class="keyword">import</span> convert_from_path, convert_from_bytes</span><br><span class="line"><span class="keyword">from</span> pdf2image.exceptions <span class="keyword">import</span> (</span><br><span class="line">    PDFInfoNotInstalledError,</span><br><span class="line">    PDFPageCountError,</span><br><span class="line">    PDFSyntaxError</span><br><span class="line">)</span><br><span class="line"><span class="comment"># from PIL import image                         # 後來發現不需要 import 這個</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> os.listdir(<span class="string">&quot;.&quot;</span>):                    <span class="comment"># 取得當前目錄下的所有檔名</span></span><br><span class="line">  <span class="keyword">if</span> <span class="string">&#x27;.pdf&#x27;</span> <span class="keyword">in</span> name:                            <span class="comment"># 只對 PDF 做處理</span></span><br><span class="line">    the_dir = <span class="string">f&#x27;<span class="subst">&#123;name[:-<span class="number">4</span>]&#125;</span>&#x27;</span>                    <span class="comment"># 用 PDF 的檔名當作新資料夾的名稱</span></span><br><span class="line">    os.mkdir(the_dir)                           <span class="comment"># 新建該檔名的資料夾</span></span><br><span class="line">    images = convert_from_path(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>&#x27;</span>)       <span class="comment"># 將 PDF 轉成多個 PIL 相關物件</span></span><br><span class="line">    <span class="keyword">for</span> i, image <span class="keyword">in</span> <span class="built_in">enumerate</span>(images):          <span class="comment"># 針對每個物件去做處理</span></span><br><span class="line">      image.save(<span class="string">f&#x27;<span class="subst">&#123;the_dir&#125;</span>/<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>.png&#x27;</span>, <span class="string">&#x27;png&#x27;</span>) <span class="comment"># 在新資料夾底下存成 PNG 檔</span></span><br></pre></td></tr></table></figure>

<p>如此一來，就不必丟到網路上給別人處理了呢！</p>
<br>
今天的分享就到這邊，我們下篇文見吧 😃]]></content>
      <tags>
        <tag>Python</tag>
        <tag>小工具</tag>
      </tags>
  </entry>
  <entry>
    <title>即將展開的大四上</title>
    <url>/2021/10/senior-first/</url>
    <content><![CDATA[<p>其實早就開始了，只不過直到最近才真正感受到大四上的「即將不輕鬆」啊！<br>這篇主要是想讓自己腦中有點地圖，大概知道這學期的整體感覺可能會是什麼。</p>
<span id="more"></span>
<p>提個外話，抱歉又是篇寫給自己的廢文，我知道，但如果不認真寫這篇，我可能又會開啟「自動導航模式」度過這一學期吧？希望能透過這一篇的撰寫，讓自己更有意識地知道自己在做什麼。</p>
<hr>
<h2 id="課業"><a href="#課業" class="headerlink" title="課業"></a>課業</h2><p>這個應該最好寫了，先寫，因為只要打開 E3 看當期課程，一個一個去延伸就行了。<br>以下 ⭐️ 數量代表我對它的 loading 認知。</p>
<h3 id="資訊工程專題-二-⭐️"><a href="#資訊工程專題-二-⭐️" class="headerlink" title="資訊工程專題(二) ⭐️"></a>資訊工程專題(二) ⭐️</h3><p>這學期跟電機系的張文輝教授做專題，題目是「ECG-Based Emotion Recognition」，我的 partner 都是電機系的同學。</p>
<p>我負責的部分，是要先將「MAHNOB-HCI Database」按照 arousal 及 valence 值去做分類，然後用一個 third-order Butterworth high pass filter 過濾 database 中的 ECG (心電圖)，接著透過 TEAP 這個工具去 extract 64 個 features，extract 出來以後將這些 features 和第一步的分類 label 丟給 SVM 去做訓練，最後就是要看我們訓練出來的  model 它的 accuracy 如何。</p>
<p>我們分 A、B 兩組，我們這組是用「需要 extract features」的 SVM，而另一組是直接餵 ECG 給 CNN，教授想要做的，是比較兩種不同方法的效果。</p>
<p>好像有點太過 detailed，我接下來盡量節制。</p>
<p>我希望這學期的專題除了做好教授、研究室學長姐指派的任務之外，也能成為這次專題當中的 glue guy，畢竟我相信，即使現在還是偏害羞內向什麼的，但總一天我也會成為團隊當中的 leader，需要學習的，除了是那些硬知識，也必須鍛鍊鍛鍊自己的軟實力。其實簡單來說，就是希望自己能更有責任感之外，也能協助我們的 team 運作得更加流暢！</p>
<p>因為還有其他好多好多事要「經營」，專題的部分希望能盡量用最短的時間，達到最高效率。當然，「負起責任」絕對擺在第一！</p>
<h3 id="計算機系統管理-⭐️⭐️⭐️"><a href="#計算機系統管理-⭐️⭐️⭐️" class="headerlink" title="計算機系統管理 ⭐️⭐️⭐️"></a>計算機系統管理 ⭐️⭐️⭐️</h3><p>簡潔有力的三個字：大魔王。</p>
<p>早就有聽說過這會是門非常非常重的課，一門 3 學分的課抵得了 3 門主科，但之前還沒修過的我，根本不相信，想說啊不就一門課，是能硬到哪裡去？</p>
<p>上禮拜才剛公布 HW1，今天 (9/30) 上課又再公布 HW2，而且作業內容感覺不妙xD</p>
<p>不過會想修這門課，除了是為了「專業選修」學分之外，最重要的是希望自己能提升「Linux 的使用及開發」能力，相信對未來工作會有不少幫助！</p>
<p>這門課肯定會花我非常多時間，有不少東西需要去吸收學習，我期許自己就算未來作業再怎麼嚇人，也要早點開始動工，不要拖到快 deadline 才發現 GG，那就太慘啦⋯⋯ 早點動工，試著去拆解它，讓它不要看起來那麼恐怖，畢竟之所以會覺得它恐怖，是因為我們對它「不甚了解」，人對於未知的事物，往往會感到焦慮害怕，試著去「看清它」，相信會稍微變得「和藹可親」。</p>
<p>後面真的要長話短說了啦！</p>
<h3 id="網路程式設計概論-⭐️⭐️"><a href="#網路程式設計概論-⭐️⭐️" class="headerlink" title="網路程式設計概論 ⭐️⭐️"></a>網路程式設計概論 ⭐️⭐️</h3><p>必修課沒辦法。反正上課就認真聽，作業的部分倒是沒概念，老師還沒指派作業。</p>
<p>感覺可能不容易欸，要寫偏底層的 code 去做和 socket 有關的事情，反正就學吧，說不定哪天會派上用場，就算真的用不到，學到的「心法」到哪其實都受用。（領域與領域之間，似乎有類似的底層架構在支撐著）</p>
<h3 id="配樂製作-一-⭐️⭐️⭐️"><a href="#配樂製作-一-⭐️⭐️⭐️" class="headerlink" title="配樂製作(一) ⭐️⭐️⭐️"></a>配樂製作(一) ⭐️⭐️⭐️</h3><p>身為一個不會彈鋼琴、樂理只懂皮毛的我，怎麼會想修「配樂製作」課呢？</p>
<p>因為啊，我覺得出社會工作以後，還會再碰跟音樂有關的東西機會實在是太渺茫了。工作和下班後學習技術都會佔用不少時間了，怎麼還會有閒情逸致去學習怎麼做音樂呢？</p>
<p>我還是大概敘述一下我的音樂背景好了：</p>
<ul>
<li>國小低年級時開始學朱宗慶打擊樂，接觸到大鼓、小鼓、定音鼓、邦哥鼓、康加鼓、馬林巴木琴、鐵琴、三角鐵、鈴鼓⋯⋯ 但不會用一手拿兩根以上的琴槌演奏木琴、鐵琴</li>
<li>中年級時開始參加學校的國樂團，拉二胡，剛開始爛爛的，後來因為想超越最厲害的同學，就變得沒那麼爛</li>
<li>國小高音直笛、國中中音直笛吹得好像還行，至少音樂老師覺得 OK</li>
<li>高中開始碰吉他，就都亂彈也沒什麼系統性地練習，到現在還是覺得很可惜沒參加高中的吉他社</li>
<li>大二下修「聲音藝術與科技跨域」和旁聽「音樂科技導論」，接觸到了像是 sampler、效果器、Logic Pro、Ableton Live，有做一點點東西，但真的就那麼一點點⋯⋯</li>
</ul>
<p>就這樣而已。所以說，修這門課肯定不會輕鬆。</p>
<p>我的期許是每次上課都能 follow 到林明學老師傳授給我們的東西，作業也能盡我所能地去完成，雖然說做出來的音樂可能頗ㄏ，但我會試著去享受「玩弄音樂」的過程！</p>
<p>目前感覺做音樂就是多用耳朵去聽，感受你調出來的聲音、搭配出來的音樂，樂理的部分應該也只是歸納好聽、有意思的聲音出來的吧(?) 當然懂越多樂理，能運用的「工具」就越多，創造的過程會越順暢。</p>
<p>加油囉💪</p>
<h3 id="鋼琴班-⭐️⭐️"><a href="#鋼琴班-⭐️⭐️" class="headerlink" title="鋼琴班 ⭐️⭐️"></a>鋼琴班 ⭐️⭐️</h3><p>前面說過我沒學過鋼琴吧？沒想到這學期居然被我選到超難搶的「鋼琴班」了！</p>
<p>小時候我原本是要學鋼琴的，但因為親戚他們都學打擊樂，背包、樂器什麼的都可以給我用，所以就改學打擊樂了。（真希望當初學的是鋼琴啊！但沒發生過，永遠不知道究竟是哪個好，畢竟在打擊樂的那段時間也是蠻快樂的）</p>
<p>啊我選的當然是「初階班」，到時候期末還會上台彈浩然圖書館的鋼琴呢，也太刺激了吧！</p>
<p>本來是打算退掉啦，畢竟感覺這學期的 loading 很重，但又想說難得有機會學鋼琴，不嘗試看看怎麼行？（就不要到時候在那邊後悔😂）</p>
<p>反正也好好加油吧！</p>
<h3 id="運動與健康-⭐️"><a href="#運動與健康-⭐️" class="headerlink" title="運動與健康 ⭐️"></a>運動與健康 ⭐️</h3><p>雖然學分其實夠不用修這門，但我想讓自己多點運動和健康方面的意識，這很重要啊！</p>
<p>就像上學期有修學校健身的課，課餘時間還會自己去健身房運動一下，我覺得這或許就是「環境」的力量吧(?)</p>
<h3 id="日文-五-⭐️"><a href="#日文-五-⭐️" class="headerlink" title="日文(五) ⭐️"></a>日文(五) ⭐️</h3><p>都修完日文一到四了，不修五好像又有點過意不去⋯⋯</p>
<p>好啦，主要是想提升日文能力，說不定總有一天會派上用場呢！</p>
<hr>
<h2 id="重要但不緊急"><a href="#重要但不緊急" class="headerlink" title="重要但不緊急"></a>重要但不緊急</h2><p>這很容易被忘記，畢竟不緊急嘛！但如果一直不去注意，當它變成緊急時，那可就為時已晚啦！</p>
<h3 id="做-side-project"><a href="#做-side-project" class="headerlink" title="做 side project"></a>做 side project</h3><p>先說，我目前的打算是畢業之後直接去工作。因為對我來說，再念兩年研究所也可能只是把求職的煩惱丟給兩年後的我。這個想法我覺得很可能大錯特錯，畢竟沒念過研究所，怎麼知道念研究所帶來的好處？而且我居然是用「求職」這個字眼去敘述它，可見目前的我對自己多沒自信。</p>
<p>主要是想說，先出去工作一陣子，等有個強烈動機和目標再回去念研究所，因為如果現在叫我念，老實說，也只是被動接收別人賦予我的任務，而非內在動力驅動著。當然我這個想法很可能是錯的，但現實生活又沒有所謂的「標準答案」，沒去做，怎能知道哪個適合自己什麼的。</p>
<p>是有聽說讀研究所能累積人脈、學到做研究的方法，但⋯⋯就像我前面說的，誰知道呢？（完全沒有任何批評的意思，只是路是自己走出來的，沒遇過，真的無法確定⋯⋯）</p>
<p>所以說，在「求職」時，總得要有能展現自己實力的東西吧？這時候，就必須要有 side project 會比較吃香。只是經過剛剛「課業」部分的「分析」，發現這學期還真多事情要弄，要再娜時間出來做自己的 side project，恐怕會心無餘且力不足，但如果因為這樣就不嘗試弄點  side project，感覺還真難在大學一畢業就找到心儀的工作呢。（畢竟我不是所謂的大神，現階段實在沒有什麼能拿出來說嘴的東西⋯⋯）</p>
<p>我其實也頗好奇我這學期到底最後會不會生出 side project 呢xD 不管是大是小都一樣。現在才剛開學沒多久，作業都還「少少的」，就覺得應該擠不出時間弄 side project，更何況之後事情更多的時候！但就像前面所說的，沒有 side project，談什麼大學畢業找到心儀的工作？真的要想辦法擠出時間啊！（其實空餘時間應該很多，但人總不可能時時刻刻都在努力，不過我會盡量試試）</p>
<p>目標：不管大還是小，至少生出一個 side project 好不好～</p>
<h3 id="運動"><a href="#運動" class="headerlink" title="運動"></a>運動</h3><p>就打籃球，雖然廢廢的，但我就喜歡。暑假的時候因為幾乎沒運動又幾乎都待在家，胖了超多、體力也變得超差，該好好動起來啦！</p>
<p>還有散步。別懷疑，暑假真的連出門走路都很少⋯⋯ 現在在學校，有空還是會多走路的～</p>
<p>健身先不要好了，疫情這樣，真的先不要。</p>
<p>總而言之，就是給他動起來就對了！</p>
<h3 id="閱讀"><a href="#閱讀" class="headerlink" title="閱讀"></a>閱讀</h3><p>睡前很好的催眠物，真的！但也總能從書本當中獲取不錯的東西。</p>
<p>之後或許會試著寫「閱讀心得」之類的東西吧(?) 不然很多書讀過，其實也忘記它在講什麼了⋯⋯</p>
<h3 id="愛情"><a href="#愛情" class="headerlink" title="愛情"></a>愛情</h3><p>這算是我一直以來非常少去關注的一塊，真是聰明過分⋯⋯</p>
<p>從小只追求好成績，對於其他方面，根本不曾用心，腦中只認為，「<strong>只要</strong>」用功讀書，「<strong>就</strong>」能獲得好成績，然後考上好大學，我就成功了⋯⋯（國小的國語課造句，真心不騙，我就是這樣造的，也深信不疑⋯⋯）</p>
<p>是怎樣？將來要跟「好大學」結婚生子共同經營家庭嗎？不是吧！</p>
<p>穿著打扮一直以來都很隨便，想說隨便啦，我這個型總會有人喜歡的吧？</p>
<p>但最近讀書的時候讀到一段話：「假如你是一個女孩子，你願意嫁給現在的自己嗎？」</p>
<p>這讓我反思，我那麼啦哩邋遢、長相又不是俊男型的，大部份時候又偏害羞內向，我怎麼可能願意嫁給現在的自己呢！那該怎麼辦？完蛋了嗎？沒，人又不是不能改變，我不是指整形，而是整「自己的生活型態」，讓自己體面一點、自信一點、有肩膀一點，真的沒說一定要立刻變得怎樣怎樣，而是一段循序漸進的過程，慢慢在某個小地方改變，相信會越來越接近我理想中的自己的！</p>
<p>有點扯遠了，但這就是我想說的，這學期不求交到女朋友，畢竟這很大一部份得看緣分，只希望自己能更「ready」，心態上更成熟、外貌上⋯⋯趨近體面就行，加油吧😀</p>
<hr>
<h2 id="娛樂"><a href="#娛樂" class="headerlink" title="娛樂"></a>娛樂</h2><p>休息是為了走更長遠的路。當然我的休閒娛樂不只這些，只是比較好寫的應該就這三個吧(?)<br>那為何還要寫「娛樂」？我也不知道，想說就稍微列一下好了。</p>
<h3 id="看-NBA"><a href="#看-NBA" class="headerlink" title="看 NBA"></a>看 NBA</h3><p>我勇迷。</p>
<p>2016 年，高三某天晚上看電視時，無意間轉到了從不感興趣的 NBA，當時播的正是西區冠軍賽 G6。那場剛好 Klay Thompson 神發揮，讓勇士不致於被雷霆淘汰，當時我完全被圈粉了！這真的非常神奇，明明從來不會想去關注 NBA 的我，居然因為一場比賽，讓我從此深深愛上「金州勇士」！</p>
<p>可見，一件事情你還沒去嘗試之前，別說你沒興趣。</p>
<h3 id="玩哈利波特手遊"><a href="#玩哈利波特手遊" class="headerlink" title="玩哈利波特手遊"></a>玩哈利波特手遊</h3><p>其實發現最近越來越少玩，有太多事情要做了⋯⋯</p>
<p>之後應該就偶爾打開跟朋友玩這樣。</p>
<p>對了，我葛來分多的哦～</p>
<h3 id="NBA-LIVE"><a href="#NBA-LIVE" class="headerlink" title="NBA LIVE"></a>NBA LIVE</h3><p>我純粹把它當作蒐集球員卡牌的平台，因為遊戲裡面可以和其他玩家交易球員卡xD</p>
<p>一個滿足蒐集慾的好東西呢！</p>
<hr>
<br>
大概是這樣，這學期就好好充實自己吧😎
<br>
<br>]]></content>
  </entry>
  <entry>
    <title>新筆電の最初設定</title>
    <url>/2023/06/settings-for-programming/</url>
    <content><![CDATA[<p>之前的筆記，for 寫程式的一些設定。</p>
<span id="more"></span>

<h3 id="4-2"><a href="#4-2" class="headerlink" title="4/2"></a>4/2</h3><ul>
<li><a href="https://iterm2.com/">iTerm2</a> - macOS Terminal Replacement</li>
<li><a href="https://ohmyz.sh/">Oh My Zsh</a> - a delightful &amp; open source framework for Zsh</li>
<li><a href="https://code.visualstudio.com/">Visual Studio Code</a> - Code Editing. Redefined<ul>
<li>先裝 VS Code 想說會比較好編輯 <code>.zshrc</code></li>
<li>透過 <code>code</code> 打開 VS Code：<a href="https://code.visualstudio.com/docs/setup/mac#_launching-from-the-command-line">Launching from the command line</a><ul>
<li>我用 <a href="https://code.visualstudio.com/docs/setup/mac#_alternative-manual-instructions">Alternative manual instructions</a></li>
<li>它會寫入 <code>.zprofile</code></li>
</ul>
</li>
<li><a href="https://code.visualstudio.com/docs/getstarted/themes#_selecting-the-color-theme">Selecting the Color Theme</a><ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=akamud.vscode-theme-onedark">Atom One Dark Theme</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=akamud.vscode-theme-onelight">Atom One Light Theme</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/romkatv/powerlevel10k">powerlevel10k</a><ul>
<li><a href="https://github.com/romkatv/powerlevel10k#oh-my-zsh">Installation</a>（Oh My Zsh）</li>
<li>存檔＆重啟 iTerm → <strong>Powerlevel10k configuration wizard</strong> → Meslo Nerd Font 裝起來</li>
<li>還有各種客製化設定😂</li>
<li>避免 left prompt 的 dir 被 shorten<ul>
<li><code>POWERLEVEL9K_SHORTEN_DIR_LENGTH=0</code></li>
<li>搭配</li>
<li><code>POWERLEVEL9K_SHORTEN_STRATEGY=</code></li>
</ul>
</li>
<li>Padding on the right prompt 有點礙眼？看<a href="https://github.com/romkatv/powerlevel10k/issues/87#issuecomment-501465711">這個</a>。</li>
</ul>
</li>
<li><a href="https://github.com/mbadolato/iTerm2-Color-Schemes#installation-instructions">iTerm2-Color-Schemes</a> → <a href="https://github.com/mbadolato/iTerm2-Color-Schemes/blob/master/schemes/Tomorrow%20Night%20Eighties.itermcolors">Tomorrow Night Eighties</a><ul>
<li>一開始還以為顏色主題是要去 powerlevel10k 那邊設定😅</li>
<li>怎麼改左邊 prompt 資料夾文字的顏色？<a href="https://github.com/romkatv/powerlevel10k/issues/697#issuecomment-625818897">這篇</a>解了我的疑惑！</li>
<li>如何透過觸控板用兩指滑上滑下？<a href="https://stackoverflow.com/a/50063617">這個</a>就是我想要的！</li>
</ul>
</li>
<li><a href="https://github.com/joshdick/onedark.vim#installation">onedark.vim</a> → 為了美化 vim</li>
<li>其他各種有的沒的<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight">TODO Highlight</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme">Material Icon Theme</a></li>
</ul>
</li>
</ul>
<h3 id="4-3"><a href="#4-3" class="headerlink" title="4/3"></a>4/3</h3><ul>
<li><a href="https://brew.sh/">Homebrew</a><ul>
<li>裝完注意最下面的「Run these two commands in your terminal to add Homebrew to your PATH」</li>
</ul>
</li>
</ul>
<h3 id="4-7"><a href="#4-7" class="headerlink" title="4/7"></a>4/7</h3><ul>
<li>Python<ul>
<li><code>alias python=python3</code> 及 <code>alias pip=pip3</code> 加進 <code>.zshrc</code></li>
<li>👍 <a href="https://www.rootstrap.com/blog/how-to-manage-your-python-projects-with-pipenv-pyenv">How to Manage your Python Projects with Pipenv and Pyenv</a><ul>
<li><code>pyenv</code> is used to manage different Python versions, whereas <code>pipenv</code> is used to manage Python packages.</li>
<li>文章裡頭有很多實用的指令</li>
</ul>
</li>
<li>安裝 <code>pyenv</code>：<a href="https://github.com/pyenv/pyenv#installation">Installation</a><ul>
<li><code>brew install pyenv</code></li>
<li><a href="https://github.com/pyenv/pyenv#set-up-your-shell-environment-for-pyenv">Set up your shell environment for Pyenv</a>（見「For <strong>Zsh</strong>」）</li>
</ul>
</li>
<li>安裝 Python 官方推薦的套件管理系統 <code>pipenv</code>：<ul>
<li><code>pip install pipenv --user</code></li>
<li>透過 <code>.zshrc</code>，將 <code>/Users/linyanting/Library/Python/3.9/bin</code> 加進 <code>$PATH</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="4-8"><a href="#4-8" class="headerlink" title="4/8"></a>4/8</h3><ul>
<li>🧐 <a href="https://www.youtube.com/watch?v=BMtG52U3cEY">How To Setup Your MacBook For Maximum Developer Productivity | 2023</a> → 開點眼界<ul>
<li><a href="https://fig.io/">Fig</a>：<code>brew install --cask fig</code>（我用 GitHub 登入）<ul>
<li>下 <code>fig doctor</code> 以後，<code>.zshrc</code> 及 <code>.zprofile</code> 的內容會被修改（檔案最前面、最後面會新增東西），也會產生 <code>~/.ssh/config</code>（for SSH integration，不知道這是啥）</li>
<li>👋 讀了「<a href="https://www.reddit.com/r/macapps/comments/s6wehl/has_anyone_tried_fig/">Has anyone tried Fig?</a>」以後，privacy 的考量，決定參考「<a href="https://www.reddit.com/r/macapps/comments/s6wehl/comment/ifof2ck/">這個留言</a>」及官方的「<a href="https://fig.io/user-manual/other/uninstall">Uninstall</a>」移除掉<ol>
<li>Fig Dashboard → Settings → My Profile → Delete Account</li>
<li>GitHub → Settings → Integrations → Applications → Authorized OAuth Apps → Revoke 掉 Fig</li>
<li><code>brew uninstall fig</code></li>
<li>確認一下 <code>.zshrc</code> 及 <code>.zprofile</code> 內容正常與否</li>
<li><code>rm -rf ~/.fig</code></li>
<li><code>rm -rf ~/.fig.dotfiles.bak</code></li>
<li>處理 <code>~/.ssh/config</code>（透過 <code>stat -x ~/.ssh</code> 輔助， check 它的 <code>Birth</code>）</li>
<li>處理 <code>~/.local/bin/fig</code></li>
<li><code>rm -rf &quot;$HOME/Library/Input Methods/FigInputMethod.app&quot;</code></li>
</ol>
</li>
</ul>
</li>
<li><a href="https://github.com/ObuchiYuki/DevToysMac">DevToysMac</a>（DevToys For mac）<ul>
<li><code>brew install --cask devtoys</code></li>
<li>已裝，但感覺用到機會不多😂</li>
<li>認真考慮之後可以自己寫一個屬於自己的工具箱！（網頁版的，因為更方便打開）<ul>
<li>但試了 <a href="https://boop.okat.best/">Boop</a> 以後，發覺「桌面版」用起來會更順手，因為可以搭配 Spotlight 打開</li>
</ul>
</li>
<li>👋 後來決定改試 <a href="https://boop.okat.best/">Boop</a>，所以⋯⋯ <code>brew uninstall devtoys</code></li>
</ul>
</li>
</ul>
</li>
<li><a href="https://boop.okat.best/">Boop</a><ul>
<li>workflow 上比「<a href="https://github.com/ObuchiYuki/DevToysMac">DevToysMac</a> 」更為直覺好用</li>
<li>甚至還能自己寫 <a href="https://github.com/IvanMathy/Boop/blob/main/Boop/Documentation/CustomScripts.md">Custom Scripts</a>！</li>
</ul>
</li>
</ul>
<h3 id="4-9"><a href="#4-9" class="headerlink" title="4/9"></a>4/9</h3><ul>
<li>決定用 <a href="https://asdf-vm.com/">asdf</a> 裝 node 及 npm<ul>
<li><a href="https://mcko.me/python-runtime-management.html">這篇文章</a>：當初我是發現 <code>nvm</code> 拖慢了我 zsh 的啟動時間，在解決的過程中發現了 <code>asdf</code> 這個工具。然後也發現它可以用來安裝 Python，並且用法跟 <code>pyenv</code> 十分相似。</li>
<li>本來想說移除掉 <code>pyenv</code> 改用 <code>asdf</code> 就好，但好像會影響到(?) <code>pipenv</code> 的使用，就算了</li>
<li>👍 <a href="https://www.elliotdenolf.com/blog/nvm-alternative-for-nodejs-version-management-with-asdf">Nvm alternative for Node.js version management with asdf</a><ul>
<li><code>brew install asdf</code></li>
<li>將 <code>. /opt/homebrew/opt/asdf/libexec/asdf.sh</code> 加進 <code>.zshrc</code></li>
<li><code>asdf plugin add nodejs</code></li>
<li><code>asdf install nodejs 18.15.0</code></li>
<li><code>asdf global nodejs 18.15.0</code></li>
<li>Allow asdf to read <code>.nvmrc</code> files：<code>echo &#39;legacy_version_file = yes&#39; &gt; ~/.asdfrc</code></li>
<li>（沒跑，因為沒裝 yarn）<code>yarn config set prefix ~/.yarn</code></li>
<li>（也還沒設定，未來或許會需要，先放著）<ul>
<li>Completions can be installed using <strong><a href="https://github.com/kiurchv/asdf.plugin.zsh">this plugin</a></strong>.</li>
<li>There is also an oh-my-zsh <strong><a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/asdf">plugin</a></strong> available.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://tldr.sh/#installation">tldr</a><ul>
<li><code>npm install -g tldr</code></li>
<li><a href="https://github.com/tldr-pages/tldr-node-client#configuration">設顏色</a>（會需要新增一個 <code>.tldrrc</code>）  我的設定：  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;commandName&quot;</span>: <span class="string">&quot;bold, yellow&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;mainDescription&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;exampleDescription&quot;</span>: <span class="string">&quot;green&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;exampleCode&quot;</span>: <span class="string">&quot;bold, red&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;exampleToken&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>將 <code>alias tldr=&quot;LANG=en tldr&quot;</code> 加進 <code>.zshrc</code>（我不想要它秀出中文的內容😂）</li>
</ul>
</li>
</ul>
<br />
今天的分享就到這邊囉，我們下篇文見～]]></content>
  </entry>
  <entry>
    <title>【閱讀筆記】一流的人如何保持巔峰</title>
    <url>/2021/12/rest-is-important/</url>
    <content><![CDATA[<p>給需要慢下來緩緩的你～</p>
<span id="more"></span>

<br>
（本篇由書中引起我共鳴的句子集結而成，空心圓的部分是我的小補充）

<h3 id="成長方程式"><a href="#成長方程式" class="headerlink" title="成長方程式"></a>成長方程式</h3><ul>
<li>壓力＋休息＝成長。無論你追求的是哪方面的成長，這個公式都成立。<ul>
<li>把「健身」的思維套用到人生其他方面上！</li>
</ul>
</li>
<li>切記，「壓力就是壓力」：一項任務造成的疲乏會影響到下個任務，即使兩者毫不相干。<ul>
<li>人一天的精力和意志力都是有限的，可以把它想成是手機電量，懂得去管理能量之外，也要知道我們能靠適合自己的休息方式來為自己充電</li>
</ul>
</li>
<li>如果你真的想改善表現，我會建議把這種壓力和恢復的切換，融入生活的所有層面。<ul>
<li>要讓肌肉茁壯，就得施加壓力＋充足休息，把你想改善的「表現」想成是那「肌肉」，如法炮製</li>
</ul>
</li>
<li>如果你想在任何領域精益求精，就必須把壓力視為正面的力量，甚至是可取的。雖然壓力太多或無窮無盡可能很危險，但適度的壓力可以有效地刺激成長。</li>
<li>當你覺得做起事來很辛苦費神時，就會啟動系統二，這時是進入真正的發展期。髓磷脂開始累積，神經連結逐漸強化。<ul>
<li>做事覺得困難時，想成是你的個人系統正在幫你「升級」，那過程總得消耗能量來達成吧？</li>
</ul>
</li>
<li>（心流）你腦中浮現出「我不可能辦到吧」的聲音時，其實是你踏上正軌的信號，大腦只是想把你拉回熟悉的舒適圈。「勉強可完成的挑戰」是為了偏離熟悉的路徑，轉戰稍微辛苦的道路。</li>
<li>對 99% 的人來說，看似有效的一心多用其實只是幻覺。<ul>
<li>我們一直認為多就是好，但事實上大部分情況下質重於量</li>
</ul>
</li>
<li>我們看待世界的方式對我們的表現有深遠的影響。只要培養成長心態，相信肯拼搏努力就會帶來技能，就更可能接觸幫助成長的良性壓力。<ul>
<li>態度影響想法，想法影響行為，行為養成習慣，習慣改變性格，性格決定命運！</li>
</ul>
</li>
<li>只要告訴自己：「我很興奮」就能轉換心境，並從所謂的「受脅心態」(緊張焦慮) 轉變成「良機心態」(躍躍欲試，準備就緒)。「和那些試圖安撫自己的人相比，把焦慮情緒轉念視為興奮之情的人，表現得更好。」換句話說，重要賽事前，情緒激動的感覺是中性的——你正面看待那些情緒，它們更有可能激發出更好的表現。</li>
<li>切記心態的威力：你看待事情的方式，會從根本改變身體對它的反應。</li>
<li>休息期間，你可能會突然靈光乍現。如果是這樣，那很好。即使沒有靈光乍現，你的潛意識仍在運作。當你回頭去做費神的任務時，更有可能突破僵局，有所進展。<ul>
<li>這是真的！之前寫程式作業卡超久，沒想到洗澡洗到一半突然就有解決問題的靈感，後來試還真的過了，超酷的！</li>
</ul>
</li>
<li>迪克森為了幫運動員勇敢地豁出去休息，把休息塑造成一種「積極的選擇」。迪克森為鐵人三項運動員撰寫訓練計畫時，裡面沒有「輕訓日」或「休息日」，但有很多「輔助日」。把休息塑造成有益成長與調適的輔助任務後，運動員不再把休息視為無為的「無訓練」。就這樣，休息變得跟其他的鍛鍊一樣有助益。<ul>
<li>如同前面所說的：「你看待事情的方式，會從根本改變身體對它的反應。」</li>
<li>我們往往會把休息看作是一件浪費時間的事情，但如果我們試著把它看成是協助自己恢復身心能量的「輔助」呢？</li>
</ul>
</li>
<li>散步是通往潛意識的最佳途徑，也是激發創意，幫我們茅塞頓開的妙方。</li>
<li>在一項實驗中，研究人員要求顧問在週間休息一整天。實驗結束時，所有的參試者都希望能繼續獲得這種可預測的休息。這不僅是因為他們親身體會到關懷自我及親友關係變好的好處，也因為他們的工作效率顯著提升了。<ul>
<li>可見適量的高品質休息能帶來很好的助益！</li>
</ul>
</li>
</ul>
<h3 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h3><ul>
<li>你應該努力削減生活中無關緊要的事物，用心思考怎麼運用最寶貴的資源：時間。</li>
<li>凡事追求極簡的關鍵，在於盡量把對使命不重要的事情都變成例行常規。把決策自動化以後，就省略了意識思考及相關的大腦活動。你從遇到狀況（例如我需要更衣）直接進展到執行行動（例如天天穿一樣的襯衫），中間不必花心思思考。就某種意義上來說，你是在避免疲乏，把大腦的肌力保留給真正重要的事情。把愈多決策加以自動化，你就能把愈多的活力保留給你覺得重要的事物。<ul>
<li>就像前面提到的：人一天的精力和意志力都是有限的！</li>
</ul>
</li>
<li>絕大多數的頂尖高手不是在一天的某個時段創作出最佳作品，或一天之中有某個時段是最佳工作時段，而是每個人都應該找出自己精神最敏銳、最專注的時段，並根據那個時段來設計一整天的作息。這些人是根據他們的生理時鐘，亦即一天24小時內的活力消長，來規劃最適合自己的生活型態。<ul>
<li>不僅限於作息方面，無論是什麼，每個人都有適合自己的方式</li>
<li>參考別人挺不錯，但不必全盤接受，而是要顧慮到是否適合自己，然後也要去相信自己的安排方式，當然如果有能改善的地方再改進即可，沒人規定要一步到位！</li>
</ul>
</li>
</ul>
<h3 id="驅動使命"><a href="#驅動使命" class="headerlink" title="驅動使命"></a>驅動使命</h3><ul>
<li>當人們專注於「超脫自我」的使命，或比自己更遠大的目標時，就能夠變得比自己所想像的還要強大。這是因為我們專注於超脫自我的事物時，自我達到了最小的境界。自我的一大功用是為了保護我們自己。面臨威脅時，自我會叫我們整個關閉起來，快點逃離。然而，當我們超脫「自我」，把自我最小化時，就能克服那些阻礙我們創造突破的恐懼、焦慮、生理保護機制。於是，全新的可能就出現了。<ul>
<li>平時舉不動很重的東西 vs 緊急狀況時忘卻疼痛和疲憊徒手抬車救人</li>
<li>概念普遍化：單純做某事 vs 為了某個理念或使命去做某件事（我好像有說跟沒說一樣xD）</li>
</ul>
</li>
<li>人生中的一切都是難得的福份，不該視為理所當然。</li>
<li>一個人可以藉由致力實踐某個理念或關愛他人來忘卻自我。愈是忘卻自我，人性就變得愈加顯著，愈能實現自我。所謂的自我實現，根本不是一個可以達到的目標，原因很簡單：你愈拚命追求它，愈得不到。換句話說，「自我實現」只有在「自我超越」之後才有可能成真。</li>
</ul>
<br>
希望書中的這些句子和我的一些小補充，能對你有所幫助 😀]]></content>
      <tags>
        <tag>閱讀</tag>
      </tags>
  </entry>
  <entry>
    <title>【軟實力】1. 這是一本你從未見過的軟體開發書</title>
    <url>/2023/05/soft-skills-1/</url>
    <content><![CDATA[<p>時間過得真是快，轉眼間，已經做了八個多月的軟體工程師了！但老實說，我覺得自己沒成長多少，原因在於工作了以後，我好像也沒好好去善用下班之後的時間，常常會覺得時間怎麼咻一下就過去了，自己也沒幹嘛😂</p>
<p>於是乎，在不久前，買了這本《Soft Skills 軟實力：軟體開發人員的生存手冊》，期許自己在閱讀並寫作的過程當中，逐漸成為一名全方位的軟體開發人員。想成為一名全方位的軟體開發人員，需要的不只是寫程式而已，還有職涯、自我行銷、學習、生產力、理財、健身、心靈等等的領域需要我們去灌溉培養。</p>
<p>因此，讓我們一起跟著這本書，多多去關注個人成長，發展人生中的不同面向，朝著「全方位」的目標邁進吧！</p>
]]></content>
  </entry>
  <entry>
    <title>【軟實力】2. 將職涯發展視為企業經營</title>
    <url>/2023/05/soft-skills-2/</url>
    <content><![CDATA[<p>「關於工作，最大的錯誤，就是沒有把自己的職涯視為企業來經營！」</p>
<p>這個想法真的還蠻特別的，在職涯方面，可以嘗試轉換一下思維：從本質上的「僱傭關係」，想成自己是一個在「經營自己事業」的企業家。如此一來，或許可以從原本對工作的無力和依賴感，變成自主和自我導向，讓自己投入更多關注而且更加主動去管理自己的職涯。</p>
<span id="more"></span>

<p>試想看看：身為一家企業，我們能提供什麼樣的產品或服務？以軟體工程師為例，若以「經營自己事業」的角度去看待工作這件事情，我們所提供的服務就是創造軟體，而雇主就是軟體開發事業裡的一名客戶。關鍵是要跳出固有的思考框架，開始像企業一樣地思考：吸引顧客的最佳方式是什麼？如何告訴顧客提供的服務是什麼？（如果能回答這兩個簡單的問題，那麼職涯將會有燦爛的開始）當我們改以這樣的方式思考，將會影響著我們怎麼去檢視自己的職涯。</p>
<p>不過也要時時提醒自己，別讓特定職務角色侷限了個人本身與職涯發展！現在在做什麼，不代表未來就永遠會那樣下去，而是在過程當中，越來越釐清自己真正想要的是什麼，並逐步勾勒出屬於自己的理想藍圖。</p>
<hr>
<h3 id="來思考一下吧！"><a href="#來思考一下吧！" class="headerlink" title="來思考一下吧！"></a>來思考一下吧！</h3><blockquote>
<p>現在有一家企業提供自己的產品或服務，請思考他們要如何讓自己的產品或服務產生區隔，並且推廣到市場上。</p>
</blockquote>
<p>企業可以透過定位目標客群、創新設計、提供差異化服務和廣告宣傳等方式來產生區隔，提升自己在市場上的競爭力。針對這幾點，我可能會嘗試這麼做：</p>
<ul>
<li>定位目標客群：偶爾可以上求職平台，去看看市場上需要什麼樣的人才。然後針對目前的不足之處，想方設法去補足。</li>
<li>創新設計：可能先從做點有趣的 side project 開始。主要是在未來找新客戶時，展示出自己的獨特性。</li>
<li>提供差異化服務：這我想到兩點，一、同事 🧐 很值得效仿，二、嘗試特定領域像是 The Audio Programmer 那樣，專注於特定領域，以提供更專業的相關解決方案。</li>
<li>廣告宣傳：透過<a href="https://kanido386.github.io" target="_blank">卡尼多隨筆</a>及<a href="https://www.youtube.com/@kanido386">卡尼多</a>等管道來嘗試提升能見度，當然這不是主要目的，最重要的是享受創造的過程。「認識自我 • 感受世界 • 創造價值」是我的初衷。</li>
</ul>
<blockquote>
<p>請用一句話描述，你能提供給未來雇主或客戶的特定服務是什麼。</p>
</blockquote>
<p>目前老實說還在緩慢累積階段，有點難用一句話來描述，但我明確知道，現階段的我處在一個海綿階段，持續吸收著前輩們（年齡其實也沒差多少）的各種優秀之處。期待突破臨界點那天的到來，不過現在最重要的是持續學習，然後 trust the process！</p>
<blockquote>
<p>把你的職涯看成一家企業，會為以下幾個方面帶來怎樣的影響。</p>
<ol>
<li>工作的方式</li>
<li>理財的方式</li>
<li>求職或是找新客戶的方式</li>
</ol>
</blockquote>
<ol>
<li>提醒自己秉持著「當責」態度：為「最終成果」負「完全責任」。如果是在經營一家企業，總會希望提供出來的服務令客戶滿意吧？而且當客戶滿意，或許能 member get member，讓企業更加壯大！</li>
<li>在職涯初期好好投資在自己身上感覺非常重要，買書、學習、增廣見聞，都好。當然學習怎麼做金錢上的投資也是挺重要的，複利效應的威力可是不容小覷！（投資自己同樣能借助複利效應來放大無限可能）</li>
<li>除了平日白天的「提供服務」，也額外去建立新習慣做點不一樣的事情，累積軟實力及硬實力之外，也讓個人品牌能多一點能見度。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>【軟實力】51. 房地產是最好的投資</title>
    <url>/2023/07/soft-skills-51/</url>
    <content><![CDATA[<p>每次聽到「房地產」這三個字，總是覺得它離我還非常遙遠而沒去了解它。<br>讀完這個章節以後，雖然還是有差不多的感覺，但至少對它有個初步的認識，而且在閱讀的過程中也讓我思考了一點東西，也是挺不錯的。</p>
<span id="more"></span>

<p>作者建議我們以開放的心態來看本章的內容，因為不論我們是否決定要投資房地產，都應該要對房地產有足夠的認識，了解它的運作方式，以及它能提供怎樣的機會給我們。多知道新東西來增廣見聞不是也挺好的嗎？畢竟知識就是力量，那些知識能在什麼時機點帶來價值我們永遠不會知道。</p>
<h3 id="房地產是最好的投資"><a href="#房地產是最好的投資" class="headerlink" title="房地產是最好的投資"></a>房地產是最好的投資</h3><p>為什麼作者認為房地產是最好的投資呢？作者除了在本章節當中用了一點篇幅舉了個例子，也總結道：</p>
<blockquote>
<p>因為如果你買出租用的房地產，每個月還固定的貸款，租金收入穩定，就能以銀行的錢做為大部分房地產的資金，透過財務槓桿的力量，給你大量的好處。當所有事情都受到通貨膨漲的影響時，房地產投資仍然能從中獲益，作為保值的工具。</p>
</blockquote>
<h3 id="報價建議"><a href="#報價建議" class="headerlink" title="報價建議"></a>報價建議</h3><p>此外，在出租用房地產報價建議的部分，作者的這一番話挺耐人尋味的：</p>
<blockquote>
<p>這不過是數字遊戲，報了五十個低價，你只需要有一個賣家接受，搞不好能撿到一個低於市價百分之五十的房子，因為賣家急於脫手或者是不在乎價格。你不會相信，其實有許多賣家因為各種理由，並不太在乎價格。</p>
</blockquote>
<p>（感覺人生很多方面也同樣可以這樣嘗試看看，雖然套用到感情方面好像就不太妥當😅）</p>
<h3 id="延伸的想法"><a href="#延伸的想法" class="headerlink" title="延伸的想法"></a>延伸的想法</h3><p>作者分享的下面這兩點，讓我激盪出了一點想法：</p>
<ol>
<li>假設房子看起來很好，你也簽了房地產合約，下一步就是檢查房子，<strong>我一定會找最好而且最細心的房屋檢驗師來檢查</strong>，我想在投入更多金錢之前，確認房子是否有任何問題。</li>
<li>買了房地產之後，我會建議你落實房地產管理，但<strong>強列不建議由自己來管理出租的房地產。</strong>在我看來，不值得投入精力去管理，或者是讓自己頭痛。我每個月的花費裡，<strong>最划算的就是付錢給房地產管理公司，請他們管理我的出租物件。</strong>好的物件管理公司會打理所有一切跟出租物件有關的事項，包含尋找房客、執行租賃權、篩選房客、維修房子以及收取租金。</li>
</ol>
<p>這兩點，以軟體工程師的角度來看，讓我聯想到：很多事情其實可以不用自己造輪子，我們可以利用其他套件 or 服務，來滿足自己的需求。</p>
<p><strong>凡事不用什麼都自己來，所以不用擔心說自己一定要什麼都懂。很多東西不會怎麼辦？沒關係，懂得去 call API，串接各種服務，打造出屬於自己更多樣豐富的人生</strong>，或許才是一個比較理想的方式。</p>
<p>（小時候被灌輸成績至上，一定要第一名長大以後才能出人頭地，也就讓我誤以為自己什麼都得懂不然就是廢物⋯⋯真希望早點領悟到剛剛聯想到的道理啊，小時候的觀念太傷了😂）</p>
<h3 id="但如果我住的地方很貴怎麼辦？"><a href="#但如果我住的地方很貴怎麼辦？" class="headerlink" title="但如果我住的地方很貴怎麼辦？"></a>但如果我住的地方很貴怎麼辦？</h3><p>難道因為這樣就和「出租用房地產」絕緣了嗎？</p>
<blockquote>
<p>居住在高房價區域不應該是你無法投資房地產的原因，因為沒有規定你一定要在自己居住的區域投資房地產。</p>
</blockquote>
<p>為什麼？作者認為：</p>
<blockquote>
<p>房地產投資最終完全是看數字，並非取決於你個人的感受（學習這項經驗能讓你受益匪淺）</p>
</blockquote>
<p>這番話值得再三咀嚼🤔️</p>
<hr>
<h3 id="來思考一下吧！"><a href="#來思考一下吧！" class="headerlink" title="來思考一下吧！"></a>來思考一下吧！</h3><blockquote>
<p>今天就走出去買個出租物件，祝你好運！</p>
</blockquote>
<p>不是吧？</p>
<blockquote>
<p>我是開玩笑的！相反地去找你那一區的出租物件廣告，透過所有的數字進行演練，根據不同頭期款金額，試算看看，是否有可能買那個物件，而且要確定現金流是正的，至少也要損益兩平。</p>
</blockquote>
<p>好的，已加進我個人的待辦清單裡了。</p>
]]></content>
  </entry>
  <entry>
    <title>【軟實力】53. 債務危機</title>
    <url>/2023/05/soft-skills-53/</url>
    <content><![CDATA[<p>現階段的我還不算面臨到真正的車貸、房貸之類的債務壓力，但有點債務方面的意識也是挺重要的。</p>
<span id="more"></span>

<p>債務都不好嗎？書中提到：「如果你利用債務賺取的利息，勝過你付給債務的利息，那就是好的債務。」這道理很容易懂，但感覺我們常常會因為它是「債務」而覺得它就是不好的。試著在腦海裡記住這個看似在講廢話的建言吧！</p>
<p>還有：「背負債務之前，底線是要確認債務實際上是投資，債務所產生的報酬，要高於你為債務所付的利息，只有在真正緊急的情況下，才不得不揹上無法獲利的債務。」已經有車了想買新車？選擇貸款買？不如暫時繼續開舊車，然後可能開一個新帳戶「新車基金」，先存夠錢再買新車！原因是，你為新車存的錢，會隨時間為你累積利息（先貸款這點就變成了機會成本），而不是繳利息給別人，除此之外，買新車也不是「真正緊急的情況」，所以也沒必要急著貸款買。</p>
<p>再特別記一點好了，雖然感覺不太適合套用到房貸：「最不理智的事就是在有負債的時候還存錢，是為了緊急的資金需求或為未來存錢？以信用卡為例，除非銀行給你的存款利息超過信用卡的循環利息，不然最好還是把這筆存款拿去還清債務。」合理，不過房貸可不是一筆小數目。或許可以從其他角度去切入？比方房子總價 1500 萬，購屋前直接先加上房貸的利息把它看成是 2000 萬？之類的。我目前還不是很懂，之後會找機會好好來了解一番！不過剛剛好奇查了一下，看起來目前「房貸的最高利率只會到 4% 左右」，印象中蠻多(?)人的投資報酬率可以勝過 4%？（感覺牛頭不對馬嘴，但這點先當成是一顆種子，播種在我心中名為投資理財的土壤裡好了）</p>
<hr>
<h3 id="來思考一下吧！"><a href="#來思考一下吧！" class="headerlink" title="來思考一下吧！"></a>來思考一下吧！</h3><blockquote>
<p>列出你所有的債務，把他們分成兩種：好的債務和不好的債務。<br><strong>「按照利率高低排列壞債務的優先順序」</strong>，計算看看要花多久時間才能還清這些債務。</p>
</blockquote>
<p>目前僅有好的債務：近期幫自己買新筆電以及幫我們家買一台空氣清淨機。</p>
<p>為什麼我認為它們是好的債務呢？明明在金錢上沒有賺啊？那是因為，除了都能用信用卡零利率分期之外，以筆電來說，它能讓我更有生產力地去完成我想完成的事情，不然繼續用 2016 年買的那台筆電，常常會很受不了它的卡頓，拖累整個做事的 flow；而空氣清淨機，它帶來的是更好的室內空氣品質，對於家人的健康來說，不是一個挺值得的投資嗎？</p>
]]></content>
  </entry>
  <entry>
    <title>【軟實力】26. 撰寫文章，進而出版書籍</title>
    <url>/2023/08/soft-skills-26/</url>
    <content><![CDATA[<blockquote>
<p>書籍和雜誌的出版商喜歡本身已經有相當粉絲數的作者，這意味著能保障這本書的銷量。</p>
</blockquote>
<p>作者建議先從寫部落格開始，然後拿部落格文章投稿到小型雜誌上，在過程中慢慢累積經驗，並逐步在所屬的專業領域建立名聲，一段時間之後，嘗試去挑戰更大型的出版之路。</p>
<span id="more"></span>

<p>想在寫作上取得成功？我們必須與讀者交流，並提供讀者一些價值，建立更強的連結，雖然不是寫作的主要目的，但或許也能獲得一點支持。字裡行間，就像是在和讀者面對面聊天，而不是自顧自地說。</p>
<p>不過現在停下來反思了一下，我前面的內容挺空洞的，原因是因為，我內心還是會想要追求「完美」，所以就直接拿閱讀時記錄的內文，改一改，然後放上來而已。但讀了這個章節以後，就會覺得，如果想要帶來價值，我們要做的，不是自顧自地在意自己寫的文章內容是否接近「標準答案」而達到「看起來的完美」，或是字數一定要很多所以想方設法充數一下，而是有沒有和讀者進行交流，分享一些相關但不一樣的內容，像是結合個人經驗之類的，不然讀者直接去讀原文就好，何必再花寶貴時間讀被精簡而且可能被斷章取義的版本😂（ChatGPT 做得比我好太多了）</p>
<p>剛剛提到「結合個人經驗」，但… 如果覺得自己的經驗沒什麼，完全不值得提怎麼辦？沒關係，我完全懂，因為我在嘗試分享個人事物的時候，也會因為覺得那些沒什麼價值而感到不好意思。但我還是會說服自己一下：如果能讓一位讀者，因為讀了文章而獲得了一點啟發，我覺得就很足夠了。而且在把那些事物轉化成文字的過程當中，有時也能讓自己獲得意想不到的收穫呢！</p>
<p>此時，我們心底可能又會冒出這樣的聲音：但我不擅長寫作欸，怎麼辦？這本書的作者說自己也不擅長寫作，但他還是在寫書。</p>
<p>我直接拿內文出來好了，會比較有說服力：</p>
<blockquote>
<p>究竟我做了什麼？我想只是因為每天寫作的關係，當然，大部分的原因是起始於寫部落格文章。一開始我的文章很糟，後來才逐漸改善，雖然我的文筆還追不上大文豪海明威，但至少現在多數的時間裡，我能有效地利用文字，傳達我的觀點與想法。</p>
<p>重點是不要擔心自己不擅長寫作，這不重要，重要的是你要開始寫作，而且堅持下去，隨著時間自然就能改善你的寫作技巧。</p>
</blockquote>
<p>學生時期的我國文一直都很不好，每次到了要寫作文的時候都很頭痛，不管怎麼寫，往往拿不到好看的分數，我的作文也都不會出現在國文老師上課分享給大家的精選佳作。覺得難過。但 2020 那年的暑假，不知道怎麼搞的，可能因為剛好做了一個跟「音訊處理」有關的小專題，加上專題結束前需要有個 presentation，但我那個時候很不擅長 presentation 所以就寫了個逐字稿，想說，為何不建立一個屬於自己分享東西的地方，來放個我那篇逐字稿呢？因此後來就決定建個部落格，偶爾可以上來記錄點東西，也沒想那麼多。（現在的這個部落格是第二版，上一版是用 hugo，這一版是用 hexo）</p>
<p>剛剛說的那篇記錄專題的文章在<a href="https://kanido386.github.io/2020/09/summer-project/" target="_blank">這裡</a>，是不是很有逐字稿的味道呢😂</p>
<p>反正寫就對了，現在不會有國文老師出來評論你的文章內容。寫作，不是為了生成一篇「完美」的文章（請 ChatGPT 就可以做到了），而是在寫作的過程當中沉澱、思考、行動、改變，如果也能為讀者帶來點價值，那就更好了！</p>
<p>回到這個章節的主題「寫書」。作者分享：寫書不是為了賺錢，寫書是為了提升個人名聲，甚至能間接為你帶來機會。</p>
<p>怎麼說？作者在書中是這麼說的：</p>
<blockquote>
<p>「他寫了關於這個主題的書。」書籍對作者來說特別有影響力，一個人會因為寫了一本書，而被視為具有某種程度的誠信，所以合理來看，如果你想在業界被視為有誠信的人，就應該寫本書。</p>
</blockquote>
<p>此外，關於書籍主題選擇的建議，作者提到：</p>
<blockquote>
<p>書籍的主題越專注、越精確，就越容易提供自己的專業知識，但相對地，市場中潛在的讀者數可能也越少，所以必須在這兩者間取得平衡點，才能吸引出版商為你出版著作。</p>
</blockquote>
<p>所以說，why not 展開行動嘗試一波呢？</p>
<hr>
<h3 id="來思考一下吧！"><a href="#來思考一下吧！" class="headerlink" title="來思考一下吧！"></a>來思考一下吧！</h3><blockquote>
<p>瀏覽 Amazon 的暢銷書榜，看看軟體開發這個分類裡，哪些書賣得最好。</p>
</blockquote>
<p>👀</p>
<blockquote>
<p>試著先寫一些短篇文章，例如，寫雜誌專欄，再著手進行書籍寫作。找幾個發行量少的軟體開發雜誌試試水溫，向他們提交文章摘要。（你可以到書店翻翻雜誌，或是上網搜尋軟體開發雜誌。）</p>
</blockquote>
<p>我先從現在的部落格開始好了，而且也挺久沒寫偏「技術文章」的內容了😂<br>技術方面，比起寫文章，目前我更想要透過做 project 的方式來弄：<a href="https://www.youtube.com/@kanispher">kanispher</a>。</p>
]]></content>
  </entry>
  <entry>
    <title>【軟實力】59. 找出動機並且持續下去</title>
    <url>/2024/10/soft-skills-59/</url>
    <content><![CDATA[<p>（上次寫這篇文章是去年的 7/17 XD）</p>
<p>這個章節作者是以健身為例，在此我來嘗試套到我玩「健身環大冒險」這件事情上好了。</p>
<span id="more"></span>

<p>作者在這個章節當中有提到，我們能否實現我們所設定的目標，最困難的不是設定目標、知道怎麼採取行動、投入心力去努力，而是持續下去的動力。</p>
<p>雖然和健身相比，有持續在玩健身環大冒險感覺上應該容易多了。是也沒錯，上健身房前，我們還得準備好水壺毛巾入場費、換好裝、走一段路前往健身房尤其最近天氣熱更增加了行動上的難度，玩健身環大冒險則不需要那麼大費周章。然而，健身環大冒險也不是想玩就能「立刻」玩。在開始遊玩 (運動) 前，必須先去房間把 Switch 拿出來裝一裝 (因為某些因素家裡平日時不適合一直放 Switch 在電視機旁)，還有瑜珈墊也得拿出來搭配不然有些動作會很難做甚至會痛，此外，增加更多難度的是，必須還要考量到肚子當下飽的狀態，如果吃完東西沒過一陣子再來玩，不舒服之外，也會有反效果。所以對我來說，平日可以說是幾乎不可能玩了，因為回到家再吃完晚餐通常都已經是九點後了😅</p>
<p>因此，如果是我的話，要持續去玩健身環大冒險也不是一件那麼容易的事。</p>
<p>關於這一點，為了能夠持續「在家也能運動」的習慣，總得想個辦法解決！</p>
<p>先等等，讀到這邊的你，可能會覺得，不就只是在遊玩 (運動) 前有一點前置作業和條件而已，沒那麼困難吧？</p>
<p>但你懂的，人嘛，往往會有惰性的，如果開始一件事情前還得先「額外」做一點事，就算那額外的事情再怎麼容易，其他人我不確定會怎麼想，但至少對我來說，「額外之事」會大大降低我展開行動的意願。</p>
<p>雖然不全然有關，但這讓我聯想到，《原子習慣》四步驟裡的第一步「提示」驅動我們去覺察，繼而引發後續的種種。可見，少了它，還真的是不太行呢⋯⋯</p>
<p>那麼，為了能夠讓自己持續去玩健身環大冒險，我後來是怎麼做調整的呢？</p>
<p>在延伸我個人的經驗及想法前，先看一下作者分享了什麼吧！（因為等等我會蠻跳 tone 地想到什麼就寫什麼，會模糊焦點😂）</p>
<p>作者說，我們可以花點時間思考：什麼最能激發我們持續下去的動力？因為就算我們找到了很棒的動機，像是變得更健康，我們還是有可能會慢慢喪失動力。</p>
<p>關於健身，作者分享了三個維持動力的技巧：</p>
<ol>
<li>到處張貼能激勵自己的照片，來提醒自己之所以展開健身是因為想要擁有那樣的身材</li>
<li>進度繪製成圖表，透過視覺化的方式，持續提醒自己已經走了多遠</li>
<li>遊戲化 (Gamification）</li>
</ol>
<p>「遊戲化」這一點，回過頭來看我的例子，不就是一個讓玩家持續去玩健身環大冒險的最佳催化劑嗎？</p>
<p>此外，合適的獎勵時機也是很重要的。錯誤的獎勵時機會扼殺我們努力的動力。像是在目標確實完成前就獎勵自己，因為已經得到獎勵，動機自然會隨之降低甚至消失，而且會讓人誤以為已經實現了目標。想要盡可能地擁有源源不絕的動力，我們可以嘗試實現目標之後再允許自己獲得獎勵。（作者：試著告訴自己，如果可以持續慢跑三個月，就獎勵自己一台嶄新的跑步機和全新的慢跑鞋）</p>
<p>好了，現在輪到我的回合了，來分享一點我個人的拙見。</p>
<p>回到剛剛的疑問句：為了能夠讓自己持續去玩健身環大冒險，我後來是怎麼做調整的呢？</p>
<p>《原子習慣》在書中有提到<a href="https://hackmd.io/@flab/S1WYF_2O5">「習慣堆疊」以及「誘惑綑綁」</a>：</p>
<ol>
<li>做完〔目前的習慣〕之後，我會執行〔我需要的習慣〕</li>
<li>做完〔我需要的習慣〕之後，我會執行〔我想要的習慣〕</li>
</ol>
<p>在嘗試我現在的作法 (而且還真的是有效果呢) 前，我是有讀過這部分兩遍，因為《原子習慣》這本書我讀了兩遍 (睡前催眠真好用)。然而，並不是因為書中這樣寫讓我決定這麼做，並沒有一個翻開《原子習慣》進行腦力激盪「翻到那部分才決定那樣嘗試」的過程，而是事後回想起來才發覺到，原來自己並沒有意識到自己其實運用了書中的這項技巧呢！</p>
<p>所以說，行動才是開始，想法不是，有時可以相信自己的直覺。很多理論或者是專有名詞或許也是前人照著自己的直覺行動累積出來的智慧所集結出來的精華，有可能你當下湧現出來的直覺，宇宙中還沒有一個適合的專有名詞來去定義它呢！</p>
<p>這不代表理論就不重要了，透過學習理論，我們可以以高 CP 值的方式吸收前人的智慧而不用全部都得自己去摸索，但實務或者是照著直覺 (based on 過去無論是透過理論或是實務所累積出來的智慧) 去行動，才能在這不斷變動的環境下有更多新的可能性。</p>
<p>這讓我聯想到：忘記之前在什麼時候看過一個影片，裡頭一位某國原住民的吉他手彈著一個很酷炫獨特的技巧，採訪的人問他在彈什麼，但他自己也不知道自己在彈的技巧叫做什麼「名字」，而只是跟著自己的感覺彈出來，久了變成屬於自己獨一無二的技巧罷了。</p>
<p>因此，不要被所謂的標準答案給束縛住了！</p>
<p>老實說，我自己也常常被束縛，因為日積月累觀念已根深蒂固，正在嘗試去轉念當中🏝️</p>
<p>（真的扯太遠甚至已經偏離主題了😅）</p>
<p>有時發現自己還是缺乏動力，怎麼辦？作者分享了「就是要完成！」的心法：</p>
<blockquote>
<p>透過事先規劃，能盡量減少生活中需要作出判斷的時機。確實了解自己每天應該吃什麼，做什麼運動，就不會做出錯誤的決定，使自己過度依賴激勵這項手段。</p>
</blockquote>
<p>的確，「做決定」是一個蠻耗費心神的事情，如果在每次行動前都有一個稍微清晰的輪廓讓自己知道怎麼去展開，會更容易一點呢！</p>
<blockquote>
<p>當你發現自己缺乏堅持下去的力量時，原則會代替動機鼓勵你。每次我累到不想跑步的時候，有時會用原則來提醒自己，這也是我非常重視的一項原則——有始有終。找幾個能激勵你人生的格言，遇到困難時提醒自己，堅持不懈。</p>
</blockquote>
<p>當然，不是說我們「每次」都「一定」要完成，偶爾 call 個 timeout 做點調整或是讓自己休息也是挺不錯的，最重要的 follow your heart 而不是一板一眼的 rules！</p>
<hr>
<h3 id="即知即行"><a href="#即知即行" class="headerlink" title="即知即行"></a>即知即行</h3><ol>
<li>提出你想塑身或改善健康的理由。從這些理由裡，挑出三個最大的動機，然後印出來貼在你每天都會看見的幾個地方。</li>
<li>挑幾個本章所介紹的維持動力的技巧，融入你的生活之中。可能是找幾張名人的照片激勵你，把這些照片貼在你能看見的地方，或是下載新的健身應用程式，讓你的運動計劃更有樂趣。<ul>
<li>健身環大冒險直接自帶 gamification 😎</li>
</ul>
</li>
<li>達成健身計劃的某個里程碑後，給自己來點獎勵。繪製進度表，鼓勵自己達成目標時就能獲得獎勵。<ul>
<li>健身環大冒險讓我不需要額外繪製進度表，它會幫我記錄不同動作做了幾下之外，最鮮明的是它的「等級制度」！</li>
<li>我內心是有「達到某個等級可以獲得獎勵」的想法啦，但我試著不要讓這個想法太清楚，模糊一點，這樣比較⋯⋯（找不到一個適合的詞來形容這種感覺）</li>
</ul>
</li>
<li>當你想中斷前進的步伐時，就停下來自問：如果不放棄，三個月後、一年後我會怎樣。不管怎樣，堅持下去，成功終將到來。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>【軟實力】54. 如何累積真正的財富？</title>
    <url>/2023/07/soft-skills-54/</url>
    <content><![CDATA[<p>這一章節提供了心態方面的建議！</p>
<span id="more"></span>

<h3 id="知足常樂"><a href="#知足常樂" class="headerlink" title="知足常樂"></a>知足常樂</h3><p>俗話說得好：「知足常樂。」套用到財務方面也同樣適用，作者在書中是這麼說的：</p>
<blockquote>
<p>想要致富，最快的方法不是賺很多很多的錢，而是減少開銷。如果你能靠少少的金錢生活，只需要少量的被動收入，你就可以實現財務自由，真正主宰你的時間與人生。</p>
</blockquote>
<p>這裡的致「富」，即為作者所定義的「富有」：</p>
<blockquote>
<p>個人所擁有的供應資源遠超過個人所需，不必很有錢，甚至完全稱不上有錢的人，也能視為富有。</p>
</blockquote>
<p>想要變得富有，只要做兩件簡單的事：</p>
<ol>
<li>個人所擁有的供應資源會自動更新</li>
<li>你的需求要低於供應量</li>
</ol>
<blockquote>
<p>變得富有比變得有錢更重要。有錢是相對的數字，沒有人知道究竟怎樣才算是真正的有錢人。要論人生的財務成功，富有是更適合的指標。</p>
</blockquote>
<p>針對這一點，作者又補充：</p>
<blockquote>
<p>就算年收入少於定義的貧窮線，但只要開銷低於「收入」（目的是確保永續的財富），而且不必為那份「收入」工作（也就是作者所說的會自動更新的資源，即為被動收入），就能認定為富有。</p>
</blockquote>
<blockquote>
<p>但這不表示你必須過著小氣或節儉的生活才能變得富有，只要你的被動收入提升了，開銷方面也能夠因此而提高。</p>
</blockquote>
<h3 id="永不乾涸的井"><a href="#永不乾涸的井" class="headerlink" title="永不乾涸的井"></a>永不乾涸的井</h3><p>關於「會自動更新的資源」，作者用了一個很具象化的方式來描述它：「永不乾涸的井」。</p>
<p>遊戲世界不也有類似的東西嗎？利用現有資源去購入一個可以隨著時間逐漸累積出資源的資產。而當這項資產升級的時候，它資源累積的速度也會跟著變快，因此能夠創造出更多的被動現金流。</p>
<blockquote>
<p>原理就是井會重新填滿，這口財富井每個月湧出的收入，你可以全數花光，因為你知道這筆錢下個月又會再次補滿，不像來自工作的收入是你必須持續工作才能獲得的。</p>
</blockquote>
<p>但是一開始被動收入才那麼一點點，難道永遠只能這樣用少少的金錢生活下去了嗎？作者知道讀者會產生出這樣的疑問，因此他也在書中解惑道：</p>
<blockquote>
<p>可能要花點時間累積和省吃儉用，資產產生的收入才能達到你生活的水準，但是跟虹吸管原理一樣，一旦啟動就永遠不會停止。事實上，只要你持續將工作或事業賺來的金錢，投入更多到資產上，你的財富井就會隨著時間越來越深。</p>
</blockquote>
<p>我們要做的就是秉持著耐心並 trust the process，相信複利效應所帶來的成果！</p>
<h3 id="自我投資"><a href="#自我投資" class="headerlink" title="自我投資"></a>自我投資</h3><p>最後，也是最重要的事：</p>
<blockquote>
<p>也別忘了投資在自己身上，這項作法會增加你的收入，進而增加你的儲蓄，日後要投資時才有大量的資金，這一點其實影響很大。</p>
</blockquote>
<p>這讓我聯想到「<a href="https://open.spotify.com/episode/4i53FwnKufNLsso8RM0G3Z?si=1fa4d1a411514854">社會新鮮人的小資理財之道：增長，是比存錢更重要的一件事</a>」這集 podcast 的內容，也分享給大家一點筆記：</p>
<ul>
<li>年輕人，節流不如開源，每月存兩萬不如拿那兩萬投資在自己身上，提升自我方能以較快的速度提升薪資的成長幅度，比傻傻都把錢存著但不去提升自己的價值好太多了！</li>
<li>你會怎麼做選擇：每月存很多但不去投資自己 → 錢是有存到但開源速度沒什麼改變 vs 很樂意花錢在投資自己這件事情上 → 提升開源速度也因此能存到更多錢</li>
<li>聽完額外的延伸：所以不要為了省錢亂吃、吃太簡單，久了沒多存到多少錢之外，也賠了健康，超級不划算的！</li>
</ul>
<hr>
<h3 id="來思考一下吧！"><a href="#來思考一下吧！" class="headerlink" title="來思考一下吧！"></a>來思考一下吧！</h3><p>作者提出了「財富金三角」：金錢、投資報酬率、時間。讓我們針對這三方面來實驗並嘗試從中發現點什麼。</p>
<blockquote>
<p>現在該換你玩玩複利計算器了。請找一個你喜歡的線上複利計算器，然後開始帶入不同的情境，試著針對現金、複利率和時間，選擇不同的設定量，猜猜看會出現什麼結果，許多效果或許會讓你大吃一驚。</p>
</blockquote>
<p>上網找哪一款複利計算器都行，隨意玩了一下，真的能感受複利效應所帶來的強大威力！</p>
<p>別忘了，不只是金錢，其他方面也同樣適用，像是每一次的思考及行動，雖然看似微不足道，但累積起來，可是會深深影響著我們的未來呢！</p>
<blockquote>
<p>現在請使用同一個複利計算器，推算出你目前的投資軌跡。如果你認為透過目前的投資策略，將來能讓你致富，那麼請將投資成果畫出來看看，其結果有可能會讓你大失所望。</p>
</blockquote>
<p>😮</p>
<p>愛因斯坦曾經說過：「什麼叫瘋子，就是重複做同樣的事情還期待會出現不同的結果。」</p>
<p>沒關係，當發覺到不太滿意時，就做出調整吧！</p>
]]></content>
  </entry>
  <entry>
    <title>【軟實力】64. 站立工作與其他飲食訣竅</title>
    <url>/2023/09/soft-skills-64/</url>
    <content><![CDATA[<p>這個章節引起我共鳴的，反倒不是這個章節的主題，而是作者 approach 事情的方式。</p>
<span id="more"></span>

<p>章節中有這麼一段話：</p>
<blockquote>
<p>身為軟體開發人員，你可能會像我一樣，不管什麼事都喜歡找找看有沒有捷徑或訣竅，有助於更快、更省力達成健身目標。我一直都在找各種方法，試著提升效率，同時又能減少所需投入的心力，讓我事半功倍。</p>
</blockquote>
<p>身為軟體工程師的我，的確，生活當中的很多事情都會想要實驗嘗試一下，看要怎麼做、怎麼調整，才能花最少時間和心力來完成，但同時也能保有一定的品質。或許會這樣是因為思考方式的關係？認為既然同樣是一個 task，很可能會有更好的演算法、用更低的時間和空間複雜度來完成，改善一開始嘗試和摸索時期的「暴力解」，試著從當中找出適合自己的「足夠好」解（最佳解不見得都適合自己），並透過一次次的反思來迭代優化。</p>
<p>當然，我可能描述得過於誇張，在我做事情的時候，不可能每次都還得拿出紙筆分析演算法的時間和空間複雜度，還要想到底該套用哪類型的演算法，才能更有效率地去處理事情。我只是用比較誇張鮮明的敘述，來呈現出有時候做事情的思考方式，雖然沒那麼「一板一眼」，但還是有丁點類似。</p>
<p>寫在這邊的「演算法」看起來可能不太好親近，不過事實上，它只是做事情的步驟、方法和思維模式，給我的感覺有點類似 design “pattern” 或是很生活化的「習慣」，它是一個在未來能提供我們重複調用、配有一些參數來根據不同情節做調整的 function，讓我們不必每次都得用比較 low-level 的方式從頭思考該怎麼做，節省做事情時的時間和心力。</p>
<p>這就是為什麼我們要養成好習慣，以及儘量去摒除壞習慣，因為不論我們「事先自動編寫好的 function」內容是好是壞，我們都會傾向去呼叫它來 save our time and energy，沒辦法，這就是生物運作的其中一項機制，和它頑抗，不如善用它。而編寫和修改的過程會需要時間和毅力，沒那麼輕鬆，但如果儘可能地堅持下去，到後來調整出一版不錯用的 function 以後，是挺值得的！（但別忘了，那個 function 還是會不斷在背景模式進行調適，不要想說好像達到了就開始隨便，可是會故態復萌的哦）</p>
<p>再補充一小點好了，我們不會只有一個 function，而且不同 function 間也是可以交互作用和組裝堆疊的，大概是那種感覺🤔️</p>
<p>回到章節內容，作者舉了一個他自己的例子：</p>
<blockquote>
<p>由於我一直都很忙碌，而且真的不想出去採購食物或煮飯，所以我發現另一個很棒的訣竅就是聘請私廚或利用膳食服務。</p>
<p>選擇這項做法確實不便宜，但對我來說很值得，因為可以節省時間。我在廣告網站 Craigslist 上刊登廣告，聘請了一位私廚幫我準備餐點，精準地符合我對巨量營養素的需求。</p>
</blockquote>
<p>這一點我在之前寫的「<a href="https://kanido386.github.io/2023/07/soft-skills-51/" target="_blank">51. 房地產是最好的投資</a>」這篇文章裡面有提到：</p>
<blockquote>
<p>很多事情其實可以不用自己造輪子，我們可以利用其他套件 or 服務，來滿足自己的需求。</p>
</blockquote>
<p><strong>凡事不用什麼都自己來，所以不用擔心說自己一定要什麼都懂。很多東西不會怎麼辦？沒關係，懂得去 call API，串接各種服務，打造出屬於自己更多樣豐富的人生</strong>，或許才是一個比較理想的方式。</p>
<p>作者的例子，完全體現出這樣的生活哲學呢！</p>
<hr>
<h3 id="來思考一下吧！"><a href="#來思考一下吧！" class="headerlink" title="來思考一下吧！"></a>來思考一下吧！</h3><ol>
<li>請思考本章有沒有訣竅是你可以應用在生活中，幫助你更輕鬆達成健身目標。</li>
<li>檢視一下你自己現在的行程表和健身計畫，確認日常生活中最煩人和最耗時的部分是什麼。有沒有訣竅可以讓事情更簡單呢？</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>【軟實力】62. 啟動跑步計畫</title>
    <url>/2024/09/soft-skills-62/</url>
    <content><![CDATA[<p>（上次撰寫這篇文章的一版已經是去年的 6/20 了，真是懶惰得過分⋯⋯現在還是不怎麼想整理發布之類的，但⋯⋯就來做這件事吧！）</p>
<span id="more"></span>

<p>跑步有許多好處：改善心血管系統、消耗多餘的熱量、促進多巴胺及血清素的分泌讓心情感到愉悅、強化膝蓋和其他關節、提升脊椎和大腿的骨密度、降低罹癌風險、延長壽命。</p>
<p>而且跑步很方便，不管在哪，只要穿上跑鞋就能夠開始。可以到附近的田徑場跑個幾圈（很多人陪著你運動讓你比較有動力😂），也可以到河濱公園一邊欣賞風景一邊慢跑流流汗。跑步，不僅是一項對身心靈都有助益的運動，也能夠很好地融入生活呢！</p>
<p>不瞞你說，前面那些話我也同時在嘗試告訴自己的潛意識：跑步那麼多好處，是不是該來跑個啊😏 也不瞞你說，上次我打前面兩段已經是 17 天前了（時間拉回到現在，當時的 17 天根本只是小 case…），可見我潛意識有多麼不願意去面對「跑步」這件事情，一直不想要繼續寫這篇會帶給我有點矛盾感受的文章… 而且而且，我上次跑步也已經是快一個月前的事情了，還蠻久的了😅（上次去公園田徑場跑步嘛⋯⋯根本已經不可考了XD）</p>
<p>作者說，其實他一開始也很討厭跑步，但不管怎樣，他還是跑了。（有點像我現在的心境，雖然很不想寫，但還是寫了）（左邊是上次寫的，現在這邊是現在寫的，還真不想繼續寫啊XD）</p>
<p>作者每週固定三天會跑步，每次跑三英哩，就這樣持續了五年。而且作者也有提到，他這樣跑了兩年，在某次跑步的時候突然出現了突破點，從平常的跑 3.1 英哩，無意間跑了 7 英哩多，或許這就是持之以恆的回報？</p>
<p>這讓我聯想到馬刺隊休息室裡掛著的一段話：「當一切努力看似無用，我會去看石匠敲打石頭。可能敲了一百下，石頭上連一條裂縫都沒有，但就在第一百零一下，石頭斷裂為兩半。然後我了解到，把石頭劈成兩半的不是最後那一下，而是先前的每一次敲擊。」讓球員們專注於每一天的練習，而不是冠軍獎盃。（順便分享一下剛剛找到那句話的<a href="https://www.businesstoday.com.tw/article/category/80407/post/201912090022/">這篇文章</a>，節錄自《原子習慣》）</p>
<p>所以說，該如何啟動跑步計畫呢？在此列點列出作者的建議：</p>
<blockquote>
<ul>
<li>適合跑步新手的訓練計畫：「<strong>Couch-to-5K</strong>」<ul>
<li>（計畫名稱的意思是從賴在沙發上轉變成能夠跑 5K 嗎😂）</li>
<li>整個訓練計畫要花兩個月的時問完成</li>
<li>每週跑步三次，每次跑二十到三十分鐘</li>
</ul>
</li>
<li>長跑的關鍵是制定跑步計畫，隨著時間逐步增加跑步的距離。<ul>
<li>（嘗試其他方面的事情也可以套用這樣的 mindset）</li>
<li>剛開始練習時，不要太在意進度。</li>
<li>可能剛開始的幾週會邊跑邊走，這也是「Couch-to-5K」計畫所主張的做法。</li>
<li>隨著時間慢慢增加跑步距離，最終到達目標。</li>
<li>你必須堅持下去，而且有耐心。</li>
<li>如果一開始就把訓練弄得很辛苦，很快地你就會沮喪，然後放棄。</li>
<li>（我從平常練習吉他演奏曲深刻感受到作者這些建議的價值啊！）</li>
</ul>
</li>
</ul>
</blockquote>
<p>最後，直接原汁原味分享作者是怎麼愛上跑步的好了，會更具有說服力：</p>
<blockquote>
<p>是什麼改變了我？我是怎麼愛上跑步的？這個嘛，我的發現是，當你跑的距離拉長時，實際上會開始體會到更多心理健康所帶來的效益。你會擁有更多跑步者的喜悅，不斷推進的路程會鼓勵你繼續跑下去。此外，我很享受跑步時間，因為我會邊跑邊聽有聲書，依照我安排的瘋狂跑步計畫，一整年下來，我最後可以聽到 50本左右的有聲書（我是以3倍速聽）。雖然我從沒想過這句話會從我口中說出，但我真的愛上跑步⋯⋯哇。</p>
</blockquote>
<p>Life isn’t about finding yourself. Life is about creating yourself.</p>
<hr>
<h3 id="來思考一下吧！"><a href="#來思考一下吧！" class="headerlink" title="來思考一下吧！"></a>來思考一下吧！</h3><ol>
<li>在「Cool Running」的官方網站上了解「Couch-to-5K」訓練計畫的內容。</li>
<li>如果你想開始跑步，請下載應用程式「Couch-to-5K 」，在你的行事曆上規劃每週有哪幾天要跑步，然後下定決心完成計畫。你可以找個人陪你一起進行訓練計畫，這能讓你更有責任感，也更有樂趣。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>做 Spotify 相關的 side project</title>
    <url>/2022/01/spotify-side-project-plan/</url>
    <content><![CDATA[<p>做個感興趣的 side project 來推自己一把xD</p>
<span id="more"></span>

<hr>
<p>參考學習地圖：<a href="https://training.pada-x.com/career/backend-developer-roadmap.jsp">如何成為後端工程師？</a></p>
<p>參考影片：<a href="https://www.youtube.com/watch?v=Xcet6msf3eE">How To Build A Better Spotify With React</a></p>
<hr>
<h2 id="一、程式語言入門"><a href="#一、程式語言入門" class="headerlink" title="一、程式語言入門"></a>一、程式語言入門</h2><h3 id="規劃"><a href="#規劃" class="headerlink" title="規劃"></a>規劃</h3><p>目前不打算特地學，決定先用「從做中學」的方式來彌補這個部分。</p>
<p>（暫時先把它們當成積木，不去研究構造、組成、原理，而是直接拿來組裝拼湊出我想要的東西）</p>
<h3 id="成果檢核"><a href="#成果檢核" class="headerlink" title="成果檢核"></a><strong>成果檢核</strong></h3><p>✅ 程式測驗基礎題   ⏳ 函式與物件導向   ⏳ 檔案讀取與寫入</p>
<hr>
<h2 id="二、網站伺服器架設"><a href="#二、網站伺服器架設" class="headerlink" title="二、網站伺服器架設"></a>二、網站伺服器架設</h2><h3 id="規劃-1"><a href="#規劃-1" class="headerlink" title="規劃"></a>規劃</h3><p>參考影片用的是 Express，所以就先學習/使用 Express 囉！</p>
<p>主要是專注在實作的部分，若是要的話，可以沒事讀一下 <a href="https://expressjs.com/">Express 的文檔</a>，一方面學習相關知識，一方面習慣一下讀文檔的感覺。</p>
<p>（或許也可以讀 Medium 之類的文章，看看別人是如何敘述知識的，可以學習）</p>
<p>至於 API 文件的部分，完成 API 以後再看看要用什麼來做吧！</p>
<h3 id="成果檢核-1"><a href="#成果檢核-1" class="headerlink" title="成果檢核"></a><strong>成果檢核</strong></h3><p>⏳ 能在本機架設網站   ⏳ 能提供 API 給前端   ⏳ 撰寫適當的 API 文件</p>
<hr>
<h2 id="三、資料庫系統"><a href="#三、資料庫系統" class="headerlink" title="三、資料庫系統"></a>三、資料庫系統</h2><h3 id="規劃-2"><a href="#規劃-2" class="headerlink" title="規劃"></a>規劃</h3><p>參考影片當中是沒有資料庫的部分啦，但或許可以加上一些「需要有資料庫」才能做的功能，像是可以讓使用者自己加上文字說明之類的。</p>
<p>屬於 SQL 的 MySQL 和屬於 NoSQL 的 MongoDB 都加進來看看，當作同時碰兩種不同類型資料庫的練習。</p>
<p>利用零碎時間看 Medium 之類的文章來學習好了，完整時間就直接上網參考資料來實作！</p>
<h3 id="成果檢核-2"><a href="#成果檢核-2" class="headerlink" title="成果檢核"></a><strong>成果檢核</strong></h3><p>⏳ 簡易會員註冊系統   ⏳ 索引、主鍵與外鍵   ⏳ 了解 SQL 和 NoSQL 的差異</p>
<hr>
<h2 id="四、雲端服務架構"><a href="#四、雲端服務架構" class="headerlink" title="四、雲端服務架構"></a>四、雲端服務架構</h2><h3 id="規劃-3"><a href="#規劃-3" class="headerlink" title="規劃"></a>規劃</h3><p>先簡單用 Heroku 來部署好了，心有餘力的話，再來嘗試看看用 AWS、GCP 部署。</p>
<h3 id="成果檢核-3"><a href="#成果檢核-3" class="headerlink" title="成果檢核"></a><strong>成果檢核</strong></h3><p>⏳ 利用 AWS 上線服務   ⏳ 利用 GCP 上線服務   ⏳ 正確說明、畫出系統架構</p>
<hr>
<h2 id="五、實作專案開發"><a href="#五、實作專案開發" class="headerlink" title="五、實作專案開發"></a>五、實作專案開發</h2><h3 id="規劃-4"><a href="#規劃-4" class="headerlink" title="規劃"></a>規劃</h3><p>現在就是在做這件事情了！</p>
<p>想說直接從做中學，或許成效會更好之外，也能好好磨練實際解決問題、容忍挫折(?)的能力。</p>
<h3 id="成果檢核-4"><a href="#成果檢核-4" class="headerlink" title="成果檢核"></a><strong>成果檢核</strong></h3><p>⏳ 上線的專案作品   ⏳ 可供查閱的程式碼</p>
<hr>
<h2 id="六、準備履歷、面試"><a href="#六、準備履歷、面試" class="headerlink" title="六、準備履歷、面試"></a>六、準備履歷、面試</h2><h3 id="規劃-5"><a href="#規劃-5" class="headerlink" title="規劃"></a>規劃</h3><p>履歷持續修改中。</p>
<p>面試對現階段的我而言，感覺是一個需要多關注、多磨練的一環啊！</p>
<h3 id="成果檢核-5"><a href="#成果檢核-5" class="headerlink" title="成果檢核"></a><strong>成果檢核</strong></h3><p>⏳ 面試邀約的次數   ⏳ 成功錄取的次數和品質</p>
<br>
go go!!!]]></content>
      <tags>
        <tag>side project</tag>
      </tags>
  </entry>
  <entry>
    <title>【軟實力】8. 為何需要具備「專業力」？</title>
    <url>/2023/08/soft-skills-8/</url>
    <content><![CDATA[<p>這個章節讀完了以後，讓我最印象深刻的是作者舉的一個關於律師的例子，很好地點出了章節的重點：</p>
<blockquote>
<p>你不會想找專門打離婚官司的律師，代表你去處理稅務、房地產方面的問題，所以「專業力」很重要。</p>
<p>假設你成為一名律師，但沒有專注於特定的專業領域，理論上，每個想找律師的人都會是你的客戶。問題是，很少人願意聘請一位沒有專長的通才律師，多數人寧可聘請具有特定專業的律師。</p>
</blockquote>
<p>如果可以，我們總是會想要找該特定領域最權威的專家來幫我們解決問題，對吧？</p>
<span id="more"></span>

<p>關於這一點，作者也舉了他自己的例子：</p>
<blockquote>
<p>剛踏入職場時，我把自己定位成專精於印表機開發與印表機相關程式語言的軟體開發人員，這確實是相當特定的專業，只有幾家主要的印表機開發商才會雇用我，但你可能不知道，這些印表機製造商其實很難找到這方面的人才。</p>
</blockquote>
<p>以作者自己的例子來看，專業程度越高（專精於印表機相關的開發），機會數量越少（只有幾家主要的印表機開發商才會需要這方面的人才），但獲得機會的可能性越高（因為印表機製造商很難找到這方面的人才）。</p>
<p>我們可能會擔心，專業越稀有，機會越少，怎麼辦？別忘記，我們不可能同時做那麼多份工作，通常只會去其中一間公司上班，我們只需要一份工作就可以了！</p>
<p>此外，我們可能也會擔心，選擇往某個特定領域發展和精進，會被他人定型，以為只有那項專業，而間接失去了許多工作機會，怎麼辦？雖然這是有可能會發生的，但同時，這點也會更吸引那些少數雇主和客戶，就像是本文前面提過的「成為該特定領域最權威的專家」那樣，為我們帶來更多可能難以從其他途徑獲得的「機會」。而且也別忘了，我們是自己人生的主人，如果需要，永遠都能轉換跑道，過去累積的專業能力不會白費，很多不同領域的道理或者說是「模式」可是有很多類似之處的呢！</p>
<p>最後，作者也勉勵我們讀者：</p>
<blockquote>
<p>盡可能學習，盡可能保持彈性，但也要具備專業力才能使你獨特又傑出，如果必須從中擇一，就從專業力開始，再逐漸拓展其他方面的知識。</p>
</blockquote>
<p>具體要怎麼做，跟著自己的感覺走，沒有所謂的標準答案，在茫茫的選擇大海中，intuition is the coast！</p>
<hr>
<h3 id="來思考一下吧！"><a href="#來思考一下吧！" class="headerlink" title="來思考一下吧！"></a>來思考一下吧！</h3><ol>
<li>把所有你能想到的軟體開發專業都列出來，再依照專業力的廣泛與特定程度排列，看看你能找到多具體的專業目標。</li>
<li>你目前的專業是什麼？如果沒有，想想你能發展軟體開發領域裡的哪項專業。</li>
<li>找個熱門的求職網站，根據你的專業搜尋目前就業市場上的職缺有哪些。藉此評估，若進一步提升你的目前專業力，在就業選擇上會更有優勢，還是會過度限制你的選擇機會。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>用 SSL For Free 免費申請 SSL 憑證</title>
    <url>/2022/04/ssl-for-free/</url>
    <content><![CDATA[<p>簡單記錄一下我整個設定的過程！</p>
<span id="more"></span>

<ol>
<li>進到 <a href="https://www.sslforfree.com/">SSL For Free</a> → 點 Create Free SSL Certificate → 註冊 or 登入</li>
<li>點左側 Dashboard → 下面有個 Create SSL Certificate，點右邊的 New Certificate</li>
<li>在 Enter Domains 的地方填你 EC2 的 Elastic IP Address → Next Step</li>
<li>因為是免費方案，Validity 選 90-Day Certificate → Next Step</li>
<li>雖然不知道那是什麼，但感覺開啟 Auto-Generate CSR 即可 → Next Step</li>
<li>此時會看到 Free 被 Selected → Next Step</li>
<li>Verification Method for <code>[Elastic IP Address]</code> 選 HTTP File Upload → 有些步驟要跟著指示做</li>
<li>Download Auth File → 連進你的 EC2 → 在專案 <code>/public</code> 底下建立 <code>/.well-known/pki-validation/</code> 資料夾，指令：<code>cd</code> 到 <code>/public</code> 以後，輸入 <code>mkdir -p .well-known/pki-validation</code></li>
<li><code>cd .well-known/pki-validation/</code> 進到裡面之後，準備把剛剛 Download Auth File 載下來的東西傳到裡面</li>
<li>在本地端開新的終端機介面 → 輸入 <code>scp -i [/path/to/EC2/XXX].pem [剛載下來的].txt ec2-user@[Elastic IP Address]:~</code> 即可將那個檔案傳進 EC2 裡面</li>
<li>回到 EC2，<code>cd ~</code>，用 <code>ls</code> 一看，還真的有欸 → 移動到剛剛新建的資料夾裡面吧<br><code>mv [剛傳進來的].txt Campus-Program01/students/[path/to]/public/.well-known/pki-validation/</code></li>
<li>在 Express 主程式，可能叫做 app.js 的當中記得加上<br><code>app.use(express.static(path.join(__dirname, &#39;public&#39;)));</code>，<br>前面或許還需要 <code>var path = require(&#39;path&#39;);</code>，這樣才能讓對方讀到那個 txt 檔</li>
<li>回到 SSL Certificate 申請頁面，點 Make sure your file is available under the following link 旁邊的連結，新視窗有文字檔裡面的東西代表到目前為止一切順利 → Next Step</li>
<li>Verify Domain → 會顯示 Congratulations, your domains have been verified. This means that our system is issuing your certificate at the moment. This page will refresh automatically every few seconds. → Your certificate has been issued and is ready for installation. To continue, please follow the steps below.</li>
<li>選你的 Server Type，通常不是 Apache 就是 NGINX，我是 NGINX → Download Certificate (.zip) → Next Step</li>
<li>Follow the steps below to install your certificate → 照著指示做吧！接下來我以 NGINX 為例，Apache 的設定或許也是照著指示做就能順利完成</li>
<li>Unzip 剛剛載下來的 zip → 裡面的東西都傳到 EC2<br><code>scp -i [/path/to/EC2/XXX].pem ca_bundle.crt certificate.crt private.key ec2-user@[Elastic IP Address]:~</code></li>
<li>回到 EC2 → 進到你剛剛傳東西進去的目錄底下 → <code>cat certificate.crt ca_bundle.crt &gt;&gt; certificate.crt</code> → 跳出 <code>cat: certificate.crt: input file is output file</code> 不用理它</li>
<li><code>sudo mv certificate.crt private.key /etc/ssl/</code></li>
<li>輸入 <code>history | grep nginx</code> 看你當初是去哪設定 nginx 的，用 vim 打開來編輯吧！（我的是  <code>sudo vim /etc/nginx/nginx.conf</code>）</li>
<li>下面的東西加進去！（加在哪要稍微注意一下，我 port 是 3000 所以 <code>proxy_pass http://localhost:3000;</code>）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    listen               443 ssl http2;</span><br><span class="line">    listen               [::]:443 ssl http2;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    ssl                  on;</span><br><span class="line">    ssl_certificate      /etc/ssl/certificate.crt; </span><br><span class="line">    ssl_certificate_key  /etc/ssl/private.key;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    server_name  _;</span><br><span class="line">    access_log   /var/log/nginx/nginx.vhost.access.log;</span><br><span class="line">    error_log    /var/log/nginx/nginx.vhost.error.log;</span><br><span class="line"></span><br><span class="line">    # Load configuration files for the default server block.</span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:3000;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">        location = /404.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="22">
<li><code>sudo service nginx restart</code> 重啟 web server</li>
<li>回到最一開始 ZeroSSL 頁面 → Check Certificate → 完成！</li>
<li>想再確認是否真的成功？<br><code>http://[Elastic IP Address]/你的路徑</code> 和 <code>https://[Elastic IP Address]/你的路徑</code> 都試試看吧！如果後者有個鎖頭在上面，就代表設定成功了！<br>（如果後者進到的是錯誤頁面，可以看一下 <code>/var/log/nginx/nginx.vhost.error.log</code> 裡面寫什麼，再來一一 debug）</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>停下來思考</title>
    <url>/2021/12/soft-skills/</url>
    <content><![CDATA[<p>生活瑣事一大堆，導致我們常常忽略了人生中更重要、更值得關注的事情！<br>（但我發現，感覺自己很忙，實際上只是心理狀態上的忙、盲、茫⋯⋯）</p>
<p>因此，我趁看 NBA 比賽的空檔，快速瀏覽了《Soft Skills: The software developer’s life manual》這本書，並做了一點筆記。<br>（居然把思考人生這麼重要的事情塞在看比賽的空檔，而非找個完整的專注時間去做，可見真的該好好思考我的人生到底是怎麼一回事了！）</p>
<p>希望透過這一篇文的撰寫，除了能幫助自己釐清人生當中更重要的事情，也能讓讀完這篇文章的你有所收穫！</p>
<span id="more"></span>

<hr>
<p>請容許我廢話一下：</p>
<p>我現在（12/6 19:30 左右）寫這篇文的當下其實還蠻焦慮的欸⋯⋯<br>因為 SA 作業的狀況不太樂觀，然後我又打算現在寫這一篇文，而不是去弄那個作業。<br>（就算那個作業解決了，還有其他也不太容易的作業要著手進行QQ）<br>一方面是那作業我有點處在半放棄的狀態了啦，另一方面，我覺得如果我不先打理好我繁雜的思緒，我實在很難專心去處理其他事情⋯⋯<br>所以就勉為其難地「專注當下」來寫這一篇文囉！</p>
<p>廢話結束。</p>
<hr>
<h1 id="值得省思"><a href="#值得省思" class="headerlink" title="值得省思"></a>值得省思</h1><p>我有把書中對我來說很有感覺的句子寫下來了，在這邊分享給大家～<br>（可能會覺得前後邏輯沒有連貫，因為我只是隨手記錄下來而已😅）</p>
<blockquote>
<p><span style="color:blue;">Fake it till you make it</span></p>
</blockquote>
<p>如果你先入為主地認為你就是怎樣的人或是你根本辦不到，那⋯⋯<br>很可能真的就那樣囉。<br>所以，先騙過自己的潛意識吧！<br>（這跟 self-image 有關，後面會提到）</p>
<blockquote>
<p><span style="color:blue;">Everything is good. Don’t limit your options.</span></p>
</blockquote>
<p>我原本對 NBA 根本完全沒感覺，甚至看到就想轉掉。<br>殊不知，因為一場比賽，我後來成了勇迷xD<br>（沒試過，真的別說它跟你無緣啊！）</p>
<blockquote>
<p><span style="color:blue;">Now put a <strong>schedule</strong> in place to actually get your OOO (like blog) started and create content for it.</span></p>
</blockquote>
<ul>
<li>What if you don’t have time? Make it a priority.</li>
</ul>
<p>想做什麼，就提高它的優先順序，然後安排時間吧！<br>安排好之後，做就對了，就不要想太多。<br>別再說自己沒時間了，一切都是優先順序啊！</p>
<blockquote>
<p><span style="color:blue;">Don’t be afraid to look like an idiot</span></p>
</blockquote>
<ul>
<li>Everything is uncomfortable at first</li>
<li>It’s okay to look like an idiot</li>
<li>Take small steps (or dive right in)</li>
</ul>
<p>這真的很重要⋯⋯<br>我們往往會因為怕自己出糗，而不敢踏處那第一步。<br>試著採取對自己而言可行的小行動，跨出那一步吧！<br>出糗就出糗，寧可出糗，也不要因為沒嘗試過而後悔一輩子！</p>
<blockquote>
<p><span style="color:blue;">Any action is often better than no action, especially if you have been stuck in an unhappy situation for a long time. If it is a mistake, at least you learn something, in which case it’s no longer a mistake. If you remain stuck, you learn nothing.</span></p>
</blockquote>
<p>心情煩悶或是做事情卡住的時候，真的做點什麼總比什麼都不做困在那漩渦中好多了！<br>選擇困進去只會徒增不必要的情緒，倒不如先暫時抽離，去做點不一樣的，說不定能讓你海闊天空哦～</p>
<blockquote>
<p><span style="color:blue;">Just get it done!</span></p>
</blockquote>
<ul>
<li>It’s great if you can keep yourself motivated, but sometimes you just have to suck it up and stick with the plan, motivated or not. Try to make decisions ahead of time that commit you to a course of action that you want to take.</li>
<li>Utilize principles in place of motivation when your motivation runs out.</li>
</ul>
<p>人總不可能時時刻刻都充滿著動力，總會有不想做任何事情的時候。<br>這時，「事先決定」的重要性就凸顯出來了。<br>人在做選擇的時候其實也是會耗費精力的，如果在「執行 execute」的同時還得去「規劃 plan」，很容易因為「決策疲勞」而影響執行的效率，尤其又是在沒什麼動力的時候！<br>所以說，要避免在自己沒動力的時候什麼都不做的情況發生，最可行的方法就是先決定好你要做的事情！<br>（規劃的時候，記得要保留足夠的緩衝時間和休息時間啊，做到比自己原先規劃的還要多，那感覺不是很棒嗎，而不是把事情塞滿滿，最後沒如願完成，讓自己情緒更下(?)一層樓，不是很虧嗎）</p>
<blockquote>
<p><span style="color:blue;">Time is short, if you want to do something in life, do it now.</span></p>
</blockquote>
<p>這真的是老生常談了，「心動不如馬上行動！，但真的做到的又有多少人呢？<br>照著大家都在走的路走比較安穩？嗯，很可能是這樣沒錯。但這就是你要的人生？</p>
<blockquote>
<p><span style="color:blue;">A consistent process produces success.</span></p>
</blockquote>
<p>不管你現在在哪個方向努力著，堅持下去吧！<br>沒有所謂的「一步登天」這回事，你看很多光鮮亮麗的成功人士 (或許這個詞用得不太精準)，哪個不是靠日日夜夜的堅持和努力才達到那個高度呢？<br>當然沒有說一定要多成功還是怎樣才「可以」，反正就是「要怎麼收穫，先那麼栽。」<br>一分耕耘，一分收穫！</p>
<hr>
<h1 id="人生各個重要面向"><a href="#人生各個重要面向" class="headerlink" title="人生各個重要面向"></a>人生各個重要面向</h1><p>作者分成七大類，我就照著他的分類來逐一分享吧！<br>（不過或許會漏掉一些同等重要的方面，就⋯⋯）</p>
<h2 id="Career"><a href="#Career" class="headerlink" title="Career"></a>Career</h2><blockquote>
<p><span style="color:#009A17;">The biggest mistake that you can make is to believe that you are working for somebody else.</span></p>
</blockquote>
<blockquote>
<p><span style="color:#009A17;">The driving force of a career must come from the individual.</span></p>
</blockquote>
<blockquote>
<p><span style="color:#009A17;">Jobs are owned by the company, you own your career!</span></p>
</blockquote>
<blockquote>
<p><span style="color:#009A17;">Having a business mindset（像是：The service you provide is to create software）</span></p>
</blockquote>
<p>這些想表達的都是跟心態有關！<br>心態上為自己工作，不僅對自己的職涯更有幫助，也才能真正為你正在工作的地方帶來價值！</p>
<blockquote>
<p><span style="color:#009A17;">Being a professional</span></p>
</blockquote>
<ul>
<li>不是做完就好，而是要做好（done &lt; done right）</li>
<li>責任感</li>
<li>有自己的原則，而非被要求做什麼就乖乖做什麼</li>
<li>勇於承認自己的過失及知識上的「不清楚」</li>
<li>給人可靠的感覺</li>
</ul>
<hr>
<h2 id="Marketing-yourself"><a href="#Marketing-yourself" class="headerlink" title="Marketing yourself"></a>Marketing yourself</h2><blockquote>
<p><span style="color:blue;">Marketing is a contest for people’s attention.</span></p>
</blockquote>
<p>現在可是「注意力經濟」時代呢！</p>
<blockquote>
<p><span style="color:blue;">Try not to become a man of success, but rather try to become a man of value.</span></p>
</blockquote>
<p>專注在怎麼成功，不如專注在怎麼為這個世界帶來價值，雖說不是主要目的，但或許也能隨之帶來一點「成功」。<br>這就跟幸福不是靠強求，而是留意周遭、用心感受，道理是很雷同的！</p>
<h3 id="經營部落格"><a href="#經營部落格" class="headerlink" title="經營部落格"></a>經營部落格</h3><ul>
<li><a href="https://kanido386.github.io" target="_blank">卡尼多隨筆</a></li>
<li>Create a list of running blog post topics. Every time you think of a new idea, add it to this list. Then when you need to write a post, you’ll have plenty of ideas handy.</li>
<li>Don’t worry about not being good at writing. It doesn’t matter if you’re good right now. What matters is that you <strong>start</strong> writing and you write <strong>consistently</strong>. Over time your skills will improve.</li>
<li>I <strong>just started</strong> writing every day. I started mostly with blog posts. At first my blog posts were horrible, but eventually I got better. I’m still no Hemmingway, but I can now effectively communicate my thoughts and ideas in the written word—at least most of the time.</li>
</ul>
<p>不僅僅是經營部落格，無論做什麼事情都一樣，「不用很厲害才開始，要先開始才會很厲害」。<br>開始 → 持續進行 → 隨之進步（過程中當然可以視情況調整）</p>
<p>開始吧，加油，你可以的！</p>
<h3 id="經營影音頻道"><a href="#經營影音頻道" class="headerlink" title="經營影音頻道"></a>經營影音頻道</h3><ul>
<li><a href="https://www.youtube.com/channel/UCa73p-0ChCqtxubUc4Lq41A" target="_blank">卡尼多玩聲音</a>（之後或許改成多角化經營）</li>
<li>Create a list of topics you could speak about.（對我自己來說，像是音訊處理專題，可以用來練習口語表達）</li>
</ul>
<p>（這是我個人未來想嘗試看看的一塊🤔）</p>
<hr>
<h2 id="Learning"><a href="#Learning" class="headerlink" title="Learning"></a>Learning</h2><blockquote>
<p><span style="color:#009A17;">Find a gap and then fill it in.</span></p>
</blockquote>
<p>學習，就是聰明地看缺什麼補什麼！</p>
<blockquote>
<p><span style="color:#009A17;">looking for mentors 甚至 being a mentor</span></p>
</blockquote>
<p>教學相長。</p>
<blockquote>
<p><span style="color:#009A17;">自學感興趣的東西</span></p>
</blockquote>
<p>用那股熱忱學習感興趣的東西，同時，也讓自己更擅長「學習」這件事情，進而幫助未來學習其他方面。</p>
<blockquote>
<p><span style="color:#009A17;">多多培養自學能力，企業真的很看重這一點！（要呈現出來，像是 GitHub 之類的展示）</span></p>
</blockquote>
<p>自學能力真的是一項很重要的軟實力啊！<br>畢竟世界瞬息萬變，得靠不斷學習來與時俱進。</p>
<blockquote>
<p><span style="color:#009A17;">找相關社群、meetup</span></p>
</blockquote>
<p>好的環境有助於學習！</p>
<h3 id="十步驟學習法"><a href="#十步驟學習法" class="headerlink" title="十步驟學習法"></a>十步驟學習法</h3><ul>
<li>The steps themselves aren’t important. It’s the concept behind this learning process that really matters. The important thing is to develop a system that you can use to teach yourself—a system that you can consistently apply to get results.</li>
</ul>
<ol>
<li>Get the big picture</li>
<li>Determine scope</li>
<li>Define success</li>
<li>Find resources</li>
<li>Create a learning plan</li>
<li>Filter resources</li>
<li>Learn enough to get started<ul>
<li>Learn the basics quickly and start playing around.（就像是打電動看攻略）</li>
</ul>
</li>
<li>Play around</li>
<li>Learn enough to do something useful</li>
<li>Teach</li>
</ol>
<p>這是作者的學習心法，他也說到這些只是作者自己統整出來的「步驟」，但真正重要的是這些步驟背後的「核心概念」。<br>我們應該做的，並不是照單全收這些步驟，而是統整出適合自己的，然後付諸行動（過程中同樣可以根據情況做調整）</p>
<hr>
<h2 id="Productivity"><a href="#Productivity" class="headerlink" title="Productivity"></a>Productivity</h2><blockquote>
<p><span style="color:blue;">Amateurs sit and wait for inspiration, the rest of us just get up and go to work.</span></p>
</blockquote>
<ul>
<li>It all starts with focus</li>
</ul>
<p>動力 → 行動？何不先採取行動，逐漸產生做事的感覺，進而有著動力持續下去？<br><strong>（牛頓第一運動定律：「靜者恆靜，動者恆作等速度運動」，需要靠名為「行動」的外力方能改變狀態，就算那個行動再怎麼小也行）</strong></p>
<blockquote>
<p><span style="color:blue;">We are what we repeatedly do. Excellence, then, is not an act, but a habit.</span></p>
</blockquote>
<ul>
<li>Habits consist of three things: a cue, a routine, and a reward.</li>
</ul>
<p>習慣 → 思考模式、行為舉止 → 類似蝴蝶效應進而引發後續的種種</p>
<blockquote>
<p><span style="color:blue;">Batch together any smaller tasks that can be done at one time instead of multiple times throughout the day or week.</span></p>
</blockquote>
<p>像是日常瑣事可以集中在一個時段處理，保留更多完整時間給其他重要事情！</p>
<blockquote>
<p><span style="color:blue;">Pick a large problem you’re facing now and see if you can figure out a good way to decompose it into smaller tasks.</span></p>
</blockquote>
<p>把大任務拆解成小行動，讓它看起來不要那麼令人畏懼之外，也比較容易一一去擊破。</p>
<h3 id="personal-productivity-plan"><a href="#personal-productivity-plan" class="headerlink" title="personal productivity plan"></a>personal productivity plan</h3><ul>
<li>Quarterly planning → Monthly planning → Weekly planning → Daily planning and execution</li>
<li>關於 daily planning：I want to make sure that I know exactly what I’m doing and what criteria I’ll use to determine that a task is done before I start it. Doing this prevents me from procrastinating and wasting time during the day with tasks that aren’t clearly defined.</li>
<li>別忘了 breaks and vacations</li>
</ul>
<h3 id="the-quota-system"><a href="#the-quota-system" class="headerlink" title="the quota system"></a>the quota system</h3><ul>
<li>The quota system also helps you overcome willpower weakness by presetting a course for you to follow, eliminating the need to make decisions.</li>
<li>Eliminate the decision by making it mandatory, in the form of a quota, and you eliminate the willpower drain.</li>
<li>例子<ul>
<li>I will run three times each week.</li>
<li>I will create one blog post each week.</li>
<li>I will write one chapter each day.</li>
<li>I will get 50 pomodori done each week.</li>
</ul>
</li>
</ul>
<p>減少「過多選擇」所帶來的精力消耗。</p>
<hr>
<h2 id="Financial"><a href="#Financial" class="headerlink" title="Financial"></a>Financial</h2><blockquote>
<p><span style="color:#009A17;">Money is only a tool. It will take you wherever you wish, but it will not replace you as the driver.</span></p>
</blockquote>
<p>不是有錢就好，錢只是工具，要如何善用才是重點！</p>
<blockquote>
<p><span style="color:#009A17;">Stop thinking short term</span></p>
</blockquote>
<p>不管在哪方面，試著想長遠一點吧！</p>
<h3 id="retirement-plan"><a href="#retirement-plan" class="headerlink" title="retirement plan"></a>retirement plan</h3><ul>
<li>Retirement is all about working backwards</li>
<li>Once you’ve come up with the monthly figure you need to live on to retire, you can officially “retire” when you reach that monthly income through passive income</li>
<li>You do need to make sure the passive income source will increase with inflation—one of the main reasons why real estate is such a good investment choice.</li>
<li>行動<ul>
<li>Calculate your current monthly expenses. Figure out how much you could reduce those expenses by if you were willing to make some big sacrifices.</li>
<li>Now calculate how much money you’d need to generate each month to retire off of your reduced expenses—make sure you leave a little buffer room.</li>
<li>Figure out how much money you’d need to have at various rates of return, like 2%, 5%, and 10%, to have enough monthly income to retire.</li>
</ul>
</li>
<li><strong>作者怎麼看退休這件事</strong>（這個說得太好了！）<ul>
<li>I define retirement as freedom. To be more specific: financial freedom. The ability to not be forced to spend your time in a way that you don’t choose to spend your time due to financial constraints.</li>
<li>I can also work on the projects that interest me, the ones that I want to work on—and not necessarily because of financial reasons.</li>
</ul>
</li>
</ul>
<hr>
<h2 id="Fitness"><a href="#Fitness" class="headerlink" title="Fitness"></a>Fitness</h2><blockquote>
<p><span style="color:blue;">The human body is the best picture of the human soul.</span></p>
</blockquote>
<p>這跟「習慣 → 思考模式、行為舉止」的道理很像。</p>
<blockquote>
<p><span style="color:blue;">對 confidence、brain power 有益處</span></p>
</blockquote>
<blockquote>
<p><span style="color:blue;">像是：健身、慢跑 (couch to 5k)、healthy diet</span></p>
</blockquote>
<blockquote>
<p><span style="color:blue;">Living a healthy lifestyle</span></p>
</blockquote>
<ul>
<li>After reaching your fitness goal, your battle isn’t over.</li>
</ul>
<p>減肥目標達標就故態復萌？<br>別忘了「習慣 → 思考模式、行為舉止 → 類似蝴蝶效應進而引發後續的種種」<br>所以維持長久的良好習慣才是！</p>
<h3 id="如何行動？"><a href="#如何行動？" class="headerlink" title="如何行動？"></a>如何行動？</h3><ol>
<li>Picking a specific fitness goal</li>
<li>Creating milestones<ul>
<li>Make sure the milestones are achievable.</li>
<li>The momentum of success can help carry you forward and increase your motivation to reach your overall goal.</li>
</ul>
</li>
<li>Measuring your progress<ul>
<li>avoid too many measurements 否則 easily get overwhelmed</li>
</ul>
</li>
</ol>
<hr>
<h2 id="Spirit"><a href="#Spirit" class="headerlink" title="Spirit"></a>Spirit</h2><blockquote>
<p><span style="color:#009A17;">If you do not conquer self, you will be conquered by self.</span></p>
</blockquote>
<blockquote>
<p><span style="color:#009A17;">the mind influences the body</span></p>
</blockquote>
<blockquote>
<p><span style="color:#009A17;">Capture your thoughts. Writing helps you to understand what’s going on in your head and to focus your mind on what you want it to be focused on.</span></p>
</blockquote>
<p>在腦海中混亂，不如把它們寫下來，具體化，會比較容易思考接下來該怎麼採取行動。</p>
<h3 id="Building-a-positive-self-image-Programming-your-brain"><a href="#Building-a-positive-self-image-Programming-your-brain" class="headerlink" title="Building a positive self-image: Programming your brain"></a>Building a positive self-image: Programming your brain</h3><ul>
<li>Your true battle is against mediocrity—and it begins in the brain. What you think about yourself has an amazing power to both limit you and fuel you forward.</li>
<li>This self-image is powerful, because your brain tends to not allow you to do anything that would violate its assessment of self.</li>
<li>If you can accept that you’re able to change some of the core beliefs you hold about yourself, then you’ll be able to alter your self-image to your own liking.</li>
<li>作者經驗分享<ul>
<li>I decided that I’d no longer be shy, so I pretended to not be shy. I forced myself into awkward situations. I constantly reaffirmed and told myself who I now was. I held a mental picture in my head of myself, but in my new form.</li>
<li>And even to this day, I’m refining the picture of the person I want to be and taking control of my self-image to have it work for me instead of against me.</li>
</ul>
</li>
</ul>
<p>你怎麼看待你自己，將會決定你過怎樣的人生！</p>
<h3 id="Reprogramming-your-brain"><a href="#Reprogramming-your-brain" class="headerlink" title="Reprogramming your brain"></a>Reprogramming your brain</h3><ul>
<li>fake it till you make it</li>
<li>The formula is relatively simple. It just takes time and persistence to execute it properly.</li>
</ul>
<ol>
<li>having a clear picture of what you want.<ul>
<li>imagine those goals clearly enough for your brain to be able to guide you down the path you need to go</li>
</ul>
</li>
<li>Act “as if” you were already what you desired to become.<ul>
<li>Don’t pay attention to reality. Don’t pay attention to what people say about your “changes”; instead, pretend like you’re already at your desired goal and that your behavior is a natural extension of this new personality.</li>
<li>Your brain will actually start to believe something if you tell yourself it enough times.</li>
<li>You can change them if you’re persistent and deliver a consistent message.</li>
<li>I’d recommend finding quotes and images that remind you of the new mental state you want to have. Fill your day with positive affirmations that confirm and reinforce your new beliefs. Spend time mentally visualizing yourself as what you want to be.</li>
</ul>
</li>
</ol>
<br>
希望這篇文章能對你有幫助，我們下次見囉😀]]></content>
      <tags>
        <tag>閱讀</tag>
      </tags>
  </entry>
  <entry>
    <title>用一點樂理和音訊處理技術做簡單的音色轉換</title>
    <url>/2020/09/summer-project/</url>
    <content><![CDATA[<p><a href="/2020/09/summer-project"><img src="https://images.unsplash.com/photo-1530623288743-52a89e908add?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2700&q=80" style="width:50vw;" /></a></p>
<!-- <img src="1.jpeg" style="width:50vw;" /> -->

<p>2020 升大三的暑假，和康明軒教授、恩衍、育浚一起做了「音訊處理」的專題。</p>
<span id="more"></span>

<p>（康明軒教授提供數學上的幫助、恩衍做降噪、育浚做其他也很有趣的聲音處理）</p>
<h1 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h1><p>先給大家聽聽看我最後上台發表的成果吧！</p>
<h2 id="分析＆合成音色"><a href="#分析＆合成音色" class="headerlink" title="分析＆合成音色"></a>分析＆合成音色</h2><table>
<thead>
<tr>
<th align="center">樂器</th>
<th align="center">待分析的音檔</th>
<th align="center">合成出來</th>
<th align="center">演奏音階</th>
</tr>
</thead>
<tbody><tr>
<td align="center">小號</td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=1" target="_blank">01</a></td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=4" target="_blank">02</a></td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=7" target="_blank">03</a></td>
</tr>
<tr>
<td align="center">雙簧管</td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=12" target="_blank">04</a></td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=15" target="_blank">05</a></td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=18" target="_blank">06</a></td>
</tr>
<tr>
<td align="center">管風琴</td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=24" target="_blank">07</a></td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=27" target="_blank">08</a></td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=30" target="_blank">09</a></td>
</tr>
</tbody></table>
<h2 id="改變音色"><a href="#改變音色" class="headerlink" title="改變音色"></a>改變音色</h2><table>
<thead>
<tr>
<th align="center">音樂</th>
<th align="center">原音檔</th>
<th align="center">小號</th>
<th align="center">雙簧管</th>
<th align="center">管風琴</th>
</tr>
</thead>
<tbody><tr>
<td align="center">生命之名</td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=36" target="_blank">10</a></td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=46" target="_blank">11</a></td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=54" target="_blank">12</a></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">New Thang</td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=64" target="_blank">13</a></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=75" target="_blank">14</a></td>
</tr>
</tbody></table>
<hr>
<h1 id="預備知識"><a href="#預備知識" class="headerlink" title="預備知識"></a>預備知識</h1><h2 id="音訊預處理"><a href="#音訊預處理" class="headerlink" title="音訊預處理"></a>音訊預處理</h2><h3 id="為何要數位化"><a href="#為何要數位化" class="headerlink" title="為何要數位化"></a>為何要數位化</h3><p><span style="color:blue;">電腦如何將聲音訊號由類比轉成數位呢？</span><br>先講為什麼要轉成數位好了。<br>「電腦處理聲音」這件事情，其實就是在對聲音做運算，<br>和類比也就是連續訊號相比，離散訊號的運算量小多了！<br>所以在電腦處理聲音之前，必須先讓聲音變成離散資料。<br>那該怎麼轉成數位呢？<br>只要讓聲音經過 <span style="color:red;">取樣 (sampling)</span> 以及 <span style="color:red;">量化 (quantization)</span> 的過程就可以囉！</p>
<h3 id="音檔參數"><a href="#音檔參數" class="headerlink" title="音檔參數"></a>音檔參數</h3><p>在介紹取樣、量化之前，先給大家認識一下<span style="color:blue;">聲音檔案的重要參數</span>。</p>
<ul>
<li><strong><span style="color:black;">持續時間 (duration)</span></strong>：音檔總共有多少秒</li>
<li><strong><span style="color:black;">持續時間 (duration)</span></strong>：音檔總共有多少秒</li>
<li><strong><span style="color:black;">取樣頻率 (sampling rate)</span></strong>：一秒鐘要取多少個取樣點（聲音檔案通常會採用 48000 或 44100 赫茲，跟取樣定理有關）</li>
<li><strong><span style="color:black;">位元深度 (bit depth)</span></strong>：一個取樣點要用多少個位元紀錄（位元深度越大的話，會越精準，但相對而言，資料量也就越大！）</li>
<li><strong><span style="color:black;">聲道數 (channel)</span></strong>：其實就是我們常聽到的單聲道、雙聲道等等的<br></li>
</ul>
<h3 id="取樣＆量化"><a href="#取樣＆量化" class="headerlink" title="取樣＆量化"></a><span style="color:blue;">取樣＆量化</span><br></h3><div style="padding:11px;">
  <!-- <img src="https://ftp.bmp.ovh/imgs/2020/09/22d22a83403f9d39.png" style="width:43vw;" />
  <img src="https://ftp.bmp.ovh/imgs/2020/09/2c03857179f3c285.png" style="width:43vw;" />
   -->
  <img src="2.png" style="width:43vw;" />
  <img src="3.png" style="width:43vw;" />
</div>

<ul>
<li><strong><span style="color:black;">取樣 (sampling)</span></strong>：透過<span style="color:red;">取樣頻率</span>，也就是一秒鐘要取多少個取樣點，將<span style="color:red;">時間軸</span>上的資料離散化，得到一串取樣點（如上圖）</li>
<li><strong><span style="color:black;">量化 (quantization)</span></strong>：依照<span style="color:red;">位元深度</span>，也就是一個取樣點要用多少個位元紀錄，分別對每個取樣點做四捨五入，將<span style="color:red;">振幅軸</span>上的資料離散化，最後就會得到一串數列（如下圖）<br></li>
</ul>
<h3 id="聲音訊號如何被處理"><a href="#聲音訊號如何被處理" class="headerlink" title="聲音訊號如何被處理"></a>聲音訊號如何被處理</h3><p>訊號轉成數位了，那<span style="color:blue;">電腦如何處理聲音訊號呢？</span><br>打個比方好了：<br>在開始進行一個大任務之前，我們通常會先拆解成多個小行動，然後再各個擊破！<br>處理聲音也是同樣道理，<br>我們只要把一段音訊切成一個一個小<span style="color:red;">音框</span>，乘上<span style="color:red;">窗函數</span>重疊以後，就可以開始做後續的處理。</p>
<h3 id="切取音框"><a href="#切取音框" class="headerlink" title="切取音框"></a><span style="color:blue;">切取音框</span><br></h3><div style="padding:22px;">
  <!-- <img src="https://ftp.bmp.ovh/imgs/2020/09/f6576ad5edcadf43.png" style="width:43vw;" /> -->
  <img src="4.png" style="width:43vw;" />
</div>

<p>在分析一段音訊的時候，我們通常是以<span style="color:red;">短時距分析</span>為主，<br>因為聲音訊號在短時間之內是<span style="color:red;">相對穩定</span>的！<br>所以我們通常會將音訊切成比較短的單位，稱為<span style="color:red;">音框</span> (frame)。<br>那為了方便使用<span style="color:red;">快速傅立葉轉換</span>，我們通常會取 <span style="color:red;">2 的 n 次方</span>個取樣點當作一個音框。<br>然後要注意，音框不能切太大或太小，這樣才能充分擷取音訊的特徵！<br>那為了避免相鄰兩音框的特徵變化過大，一般會讓音框之間有一段<span style="color:red;">重疊</span>的區域，<br>當然重疊的部分越多，對應的<span style="color:red;">運算量</span>也就越大！</p>
<h3 id="音框參數"><a href="#音框參數" class="headerlink" title="音框參數"></a>音框參數</h3><p>帶大家認識一下<span style="color:blue;">切取音框的重要參數</span>。<br></p>
<div style="padding:23px;">
  <!-- <img src="https://ftp.bmp.ovh/imgs/2020/09/ce76456e87ee97c2.png" style="width:43vw;" /> -->
  <img src="5.png" style="width:43vw;" />
</div>

<ul>
<li><strong><span style="color:black;">音框大小 (frame size)</span></strong>：每一個音框內所含有的取樣點個數</li>
<li><strong><span style="color:black;">音框重疊量 (frame overlap)</span></strong>：兩音框間重疊的取樣點個數</li>
<li><strong><span style="color:black;">音框跳距 (hop size)</span></strong>：兩音框起點距離的取樣點個數，相當於 <span style="color:red;">音框大小 - 音框重疊量</span></li>
<li><strong><span style="color:black;">音框率 (frame rate)</span></strong>：每秒出現的音框數目，相當於 <span style="color:red;">取樣頻率 / 音框跳距</span><br></li>
</ul>
<h3 id="套上窗函數"><a href="#套上窗函數" class="headerlink" title="套上窗函數"></a><span style="color:blue;">套上窗函數</span><br></h3><div style="padding:32px;">
  <!-- <img src="https://ftp.bmp.ovh/imgs/2020/09/625f058dba3db937.png" style="width:52vw;" /> -->
  <img src="6.png" style="width:52vw;" />
</div>

<p>原本完整的聲音波形，<span style="color:red;">被音框硬生生地截斷</span>，頻譜將會產生誤差，該怎麼辦呢？<br>我們只要透過乘上一個<span style="color:red;">中央高、兩側低的窗函數 (window function)</span>，<br>讓音框內兩端的訊號達到 fade-in、fade-out 的效果，就可以增加音框左右兩端的<span style="color:red;">連續性</span>了！</p>
<hr>
<h2 id="音色"><a href="#音色" class="headerlink" title="音色"></a>音色</h2><h3 id="聲音三要素"><a href="#聲音三要素" class="headerlink" title="聲音三要素"></a><span style="color:blue;">聲音三要素</span><br></h3><div style="padding:5px;">
  <!-- <img src="https://ftp.bmp.ovh/imgs/2020/09/ede9088994b2a6b4.png" style="width:52vw;" /> -->
  <img src="7.png" style="width:52vw;" />
</div>
待會只會介紹音色。<br>

<h3 id="什麼是音色"><a href="#什麼是音色" class="headerlink" title="什麼是音色"></a>什麼是<span style="color:blue;">音色</span></h3><p>音色是一個可以讓聆聽者<span style="color:red;">分辨</span>出聲音聽起來不同的聲音特性，<br>藉由音色資訊，我們可以分辨出究竟現在聽到的聲音是人聲還是某種樂器聲，<br>不受音高不同及音量大小的影響！</p>
<h3 id="影響聲音的要素"><a href="#影響聲音的要素" class="headerlink" title="影響聲音的要素"></a>影響聲音的要素</h3><p><span style="color:blue;">哪些要素影響著音色呢？</span><br></p>
<ul>
<li>ADSR Envelope</li>
<li>Tremolo ＆ Vibrato</li>
<li>泛音列</li>
<li>可能還有其他 (?)</li>
</ul>
<h3 id="ADSR-Envelope"><a href="#ADSR-Envelope" class="headerlink" title="ADSR Envelope"></a><span style="color:blue;">ADSR Envelope</span><br></h3><div style="padding:7px;">
  <!-- <img src="https://ftp.bmp.ovh/imgs/2020/09/d19848cbba1eb5ba.png" style="width:50vw;" /> -->
  <img src="8.png" style="width:50vw;" />
</div>

<p>它是什麼呢？<br>它是描述 Attack、Decay、Sustain、Release 四階段的一個包絡！<br>這樣講其實蠻抽象的，<br>可以把它想像成聲音的 schedule，讓聲音的某個<span style="color:red;">參數隨著時間做改變</span>。<br><strong><span style="color:black;">那 Attack、Decay、Sustain、Release 又分別是什麼呢？</span></strong><br>觀察上圖：</p>
<ul>
<li><strong><span style="color:black;">Attack</span></strong>：一個參數從 0 到最大值所需要的<span style="color:red;">時間</span></li>
<li><strong><span style="color:black;">Decay</span></strong>：一個參數從最大值降到 Sustain 所需要的<span style="color:red;">時間</span></li>
<li><strong><span style="color:black;">Sustain</span></strong>：它比較特別，它是一個<span style="color:red;">程度</span>的參數，代表在 Release 之前維持的一個量</li>
<li><strong><span style="color:black;">Release</span></strong>：一個參數從 Sustain 降回 0 所需要的<span style="color:red;">時間</span></li>
</ul>
<p>這樣可能還是很抽象，沒關係，到 Ableton Live 的<a href="https://learningsynths.ableton.com/en/envelopes/change-over-time" target="_blank">合成器教學頁面</a>玩玩吧！<br></p>
<h3 id="Tremolo-＆-Vibrato"><a href="#Tremolo-＆-Vibrato" class="headerlink" title="Tremolo ＆ Vibrato"></a><span style="color:blue;">Tremolo ＆ Vibrato</span><br></h3><ul>
<li><strong><span style="color:black;">Tremolo</span></strong>：讓<span style="color:red;">音量</span>呈現忽大忽小的<span style="color:red;">顫音</span>效果，可以讓長音有起伏變化不再呆板，也可以讓每個音符呈現若隱若現的效果</li>
<li><strong><span style="color:black;">Vibrato</span></strong>：讓<span style="color:red;">音高</span>呈現忽高忽低的<span style="color:red;">顫音</span>效果，比方擦弦樂器可以靠<span style="color:red;">揉弦</span>來達到這種效果</li>
</ul>
<h3 id="泛音列"><a href="#泛音列" class="headerlink" title="泛音列"></a><span style="color:blue;">泛音列</span><br></h3><p>泛音列是一系列頻率為<span style="color:red;">基音頻率 (fundamental frequency)  整數倍</span>的聲音，<br>這些聲音都是純音，可以分別用正弦波來表示。<br>那和音色有什麼關係呢？<br>強烈推薦大家看 <a href="https://www.youtube.com/channel/UCVXstWyJeO6No3jYELxYrjg" target="_blank">NiceChord (好和弦)</a> 的 <a href="https://www.youtube.com/watch?v=0iJmDhNocaQ" target="_blank">一次搞懂「泛音列」！</a><br>看完了一切都豁然開朗了呢 😎</p>
<h3 id="波形"><a href="#波形" class="headerlink" title="波形"></a>波形</h3><p><span style="color:blue;">波形何以如此多元？</span><br></p>
<div style="padding:6px;">
  <!-- <img src="https://ftp.bmp.ovh/imgs/2020/09/f615f911b624c2a1.png" style="width:39vw;" /> -->
  <img src="9.png" style="width:39vw;" />
</div>

<p>不同樂器，組成「一個音」的泛音列佔比都不太一樣。<br>那剛剛提過，泛音列上的每個音都是純音，可以分別用正弦波來表示，<br>然後再根據波的疊加原理，依照泛音列佔比，疊加出新的波形，<br>疊加後的波形就是我們最後觀察到的波形！<br>如上圖。</p>
<h3 id="感受聲音"><a href="#感受聲音" class="headerlink" title="感受聲音"></a>感受聲音</h3><p><span style="color:blue;">再用聽的和看的來感受一次吧！</span><br></p>
<div style="padding:3px;">
  <!-- <img src="https://ftp.bmp.ovh/imgs/2020/09/19b7c6548bc8fcfd.png" style="width:55vw;" /> -->
  <img src="10.png" style="width:55vw;" />
</div>

<p>以基頻為 220 赫茲的音來說明好了：<br>先給大家聽 <a href="https://youtu.be/VWO0FyNmOBw?t=87" target="_blank">220 赫茲的純音</a>。<br>接著是 <a href="https://youtu.be/VWO0FyNmOBw?t=90" target="_blank">440 赫茲的純音</a>。<br>然後我們再用一比一的比例，來調配出<a href="https://youtu.be/VWO0FyNmOBw?t=93" target="_blank">新的音色</a>。<br>新音色聽起來就像是「一個音」，但實際上卻是由兩個純音組合而成的！</p>
<h3 id="泛音列＆音色"><a href="#泛音列＆音色" class="headerlink" title="泛音列＆音色"></a>泛音列＆音色</h3><p><span style="color:blue;">泛音列與音色之間的關係</span>：</p>
<ul>
<li>基本頻率決定了一個音的音高</li>
<li>其他泛音與基頻的音量佔比決定了一個音的音色</li>
</ul>
<hr>
<h1 id="所以，我是怎麼做出來的呀？"><a href="#所以，我是怎麼做出來的呀？" class="headerlink" title="所以，我是怎麼做出來的呀？"></a>所以，我是怎麼做出來的呀？</h1><h2 id="分析＆合成音色-1"><a href="#分析＆合成音色-1" class="headerlink" title="分析＆合成音色"></a>分析＆合成音色</h2><div style="padding:30px;">
  <!-- <img src="https://ftp.bmp.ovh/imgs/2020/09/ce7ecf082f96bce6.png" style="width:30vw;" /> -->
  <img src="11.png" style="width:30vw;" />
</div>

<ol>
<li>用 <code>scipy.io.wavfile.read</code> ，將待分析的音檔讀進來</li>
<li>用 <code>scipy.fftpack.fft</code> ，將原本 time domain 的 data 轉換到 frequency domain 上</li>
<li>透過 <code>matplotlib.pyplot.plot</code> ，把圖給畫出來（如上圖，頻率取 0~1000）</li>
<li>由圖可以觀察到基頻大概是 100 赫茲左右，也可以觀察到其泛音列的數值大小</li>
<li>利用 <code>max</code> ，一個一個找出每個小區間內的最大值為何，即為圖中的明顯高起處</li>
<li>由求出來的所有值，可以推算出基頻及其所有泛音列的數值大小佔比</li>
<li>透過自己寫的 <a href="https://github.com/kanido386/playground/blob/master/2020-summer-project/timbre%20synthesizer/synthesizer.py" target="_blank">synthesizer</a>，依照上步驟的佔比，即可合成出該音色的聲音</li>
</ol>
<h2 id="改變音色-1"><a href="#改變音色-1" class="headerlink" title="改變音色"></a>改變音色</h2><p>以一個音框來說明，單音音樂效果較佳！</p>
<ol>
<li>用 <code>scipy.fftpack.fft</code> ，將該音框內的 data 轉換到 frequency domain 上</li>
<li>透過自己獨創但效果很陽春 (?) 的方法運算以後，可以粗略找到基頻</li>
<li>該<span style="color:red;">基頻及其整數倍的泛音</span>，透過剛剛分析出來的<span style="color:red;">佔比</span>來改變數值大小，即可轉換為新音色的音樂</li>
</ol>
<h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>除了學到一些音訊處理的技巧以外，最大的收穫是，「態度」才是最重要的關鍵啊！<br>目前在其他很多方面還是不夠及格，期望帶著這次的寶貴經驗，讓自己漸入佳境。</p>
<h1 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h1><p>再次感謝康明軒教授、恩衍、育浚，沒有你們，就沒有這一切！<br>另外，也非常感謝柏毅給予我簡報上的指點，讓我學到一些很重要也很實用的簡報技巧！<br><br><br>希望讀完這篇文章的您能夠有所收穫，我們下篇文見啦 😃</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>交大</tag>
        <tag>音訊處理</tag>
        <tag>專題</tag>
        <tag>樂理</tag>
        <tag>音色</tag>
      </tags>
  </entry>
  <entry>
    <title>免費 iOS 合成器 App《Synth One》也能搭配 Logic Pro 玩音樂？</title>
    <url>/2021/12/synth-one-with-logic-pro/</url>
    <content><![CDATA[<p>以 iPad 為例，用條列步驟的方式簡單分享給大家～</p>
<span id="more"></span>

<h3 id="兩者連起來！"><a href="#兩者連起來！" class="headerlink" title="兩者連起來！"></a>兩者連起來！</h3><ol>
<li>在 iPad 上下載《AudioKit Synth One Synthesizer》</li>
<li>用 USB 線，將 iPad 連接到 MacBook</li>
<li>打開 MacBook 的「音訊 MIDI 設定」，左側會看到自己的 iPad，點按「啟用」 <img src="1.png" alt="1.png"></li>
<li>打開 Synth One，然後先放著</li>
<li>打開 Logic Pro，開啟新專案時，新增一個「External MIDI」track<ul>
<li>「Use External Instrument plug-in」記得勾起來</li>
<li>MIDI Destination 選 iPad</li>
</ul>
 <img src="2.png" alt="2.png"></li>
<li>這時，彈奏 Synth One 上的 keyboard 就能在 Logic Pro 上聽到聲音了呢！</li>
</ol>
<h3 id="怎麼錄起來？"><a href="#怎麼錄起來？" class="headerlink" title="怎麼錄起來？"></a>怎麼錄起來？</h3><ol>
<li>在 Logic Pro 上新增一個 Audio Track（也可以直接 option+command+A 來新增） <img src="3.png" alt="3.png"></li>
<li>滑鼠游標點按 Inst 1 那一軌，點按後會呈現如圖的偏白灰底，「R」也會跟著紅起來。<br>但 Audio 1 那一軌的「R」不會，我們需要手動點按它來開啟它，待會會需要！ <img src="4.png" alt="4.png"></li>
<li>（非必要）如果有 MIDI 鍵盤可以接起來，等等可以用它來彈奏</li>
<li>按 Record，此時可以開始你的彈奏了。 <img src="5.png" alt="5.png"> 在彈奏的過程中，你會發現不只是 MIDI，連 audio 也同時被錄進去啦！ <img src="6.png" alt="6.png"></li>
<li>停止 Record 後，就會這樣： <img src="7.png" alt="7.png"></li>
<li>既然都有 audio 了，為何還需要 MIDI 啊？因為這樣才可以修改呀！<br> （對你想要修改的那一軌按 command+4 可以打開如圖的 Piano Roll） <img src="8.png" alt="8.png"></li>
<li>除了邊彈奏邊錄 audio 之外，也可以用「播放現有 MIDI 軌」的方式來錄呢！<br> 怎麼做？滑鼠游標換成點按 Audio 1 那一軌，讓它呈現如圖的偏白灰底，然後再開始 Record，神奇的事就會發生囉～ <img src="9.png" alt="9.png"></li>
</ol>
<br>
這樣就大功告成啦😎]]></content>
      <tags>
        <tag>Logic Pro</tag>
      </tags>
  </entry>
  <entry>
    <title>Don&#39;t wait for a perfect plan or resources, take action now!</title>
    <url>/2023/10/take-action-now/</url>
    <content><![CDATA[<p>今から：</p>
<pre><code>       Focus on the present and the progress, not what it looks like.
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>VS Code 開太多視窗覺得亂？這一招可以解決！</title>
    <url>/2025/04/vscode-native-tabs/</url>
    <content><![CDATA[<p>這個方法目前只適用於 macOS Sierra（10.12）及之後的版本。</p>
<span id="more"></span>

<p>有時候沒去整理，一不小心，就開了很多視窗，下面的截圖只是示意一下，實際上可能開更多，讓自己覺得心煩意亂⋯⋯</p>
<p><img src="1.png"></p>
<p>打開 VS Code 的設定，用 <code>native</code> 搜尋一下，可以找到 <code>Native Tabs</code>，把它勾起來以後，會要求你重開 VS Code 以套用新設定。</p>
<p><img src="2.png"></p>
<p>重新打開，會發現長得有點不一樣了：最上面長了一個新的 Tab(?)、左上方紅橘綠的點出現在新的 Tab 上。</p>
<p><img src="3.png"></p>
<p>接著，點選 Windows → Merge All Windows 之後呢⋯⋯</p>
<p><img src="4.png"></p>
<p>原本的多個視窗，合併成一個啦！</p>
<p><img src="5.png"></p>
<p>想快速切換到不同的 workspace？除了直接用滑鼠點來切換，也可以透過快捷鍵 <code>control + W</code> 來叫出截圖中 <code>Select a window to switch to</code> 的橫幅(?)，接著直接搜，然後按 enter 就可以囉～</p>
<p><img src="6.png"></p>
<p>這樣一來啊，畫面就簡潔多了呢！</p>
<p><img src="7.png"></p>
]]></content>
  </entry>
  <entry>
    <title>有時候也是挺需要「浪費時間」的</title>
    <url>/2023/05/waste-time-not-waste/</url>
    <content><![CDATA[<p><a href="/2023/05/waste-time-not-waste"><img src="https://i.imgur.com/VWga3Wd.jpg" style="width:50vw;" /></a></p>
<p>一段生活中的小故事，讓我體會到「浪費時間」不全然是完全沒價值的。</p>
<span id="more"></span>

<p>因為我書桌的電腦椅已經用很久，不知道是不是之前地板有些微高低差的關係，椅子坐起來感覺有點歪，左邊稍低、右邊稍高，因此決定買個新的，不然感覺再坐下去，身體會跟著變歪。</p>
<p>某天下午，我們全家在買空氣清淨機前，先騎去一間傢俱店看電腦椅，聽了店員介紹和試坐了一番，是打算入手一張 2200 的椅子，但可能因為在那段時間裡不斷在做選擇，腦袋實在有夠累，想說先讓自己緩緩，不要衝動行事，我們先去全國電子買空氣清淨機好了。</p>
<p>如果當時沒有那股莫名其妙的疲憊感，我可能真的就買下去了吧⋯⋯</p>
<p>在騎去全國電子的途中，剛好經過一間我媽還蠻常去的菜市場，那間菜市場離我們要去的那家全國電子其實很近，走路可能只需要一兩分鐘吧？媽要我們等她「一下」，她想去看一下花椰菜。果不其然，相信媽只會逛「一下」可真不是個明智之舉，一下起碼就要半小時⋯⋯</p>
<p>我們在那邊等了好一段時間，甚至開始抱怨：早知道我們就先去全國電子，媽再自己去那邊逛。然而，現在回想起來覺得很妙的是，就是因為有這段看似「浪費時間」的空檔，我才「打發時間」地拿起手機隨意再查查電腦椅相關的東西。嘗試用剛剛在那間傢俱店聽到的關鍵字「網布」去 google，沒想到讓我找到了很類似家裡我在坐的那款，而且才 1260！所以也就因為這樣，打消了回去那間傢俱店買椅子的念頭 (sorry bro)。</p>
<p>回來以後，拿家裡椅子的照片和我查到的資訊去問了另一間傢俱店（是幾年前買電腦椅的那間，但原本想說因為有認識但很久沒聯絡的，就不太想去現場挑新椅子），結論是，買得到我現在在坐的這款，畢竟已經坐習慣了，當然會想要繼續坐同款式的，而且只要 1200！哇嗚，酷～</p>
<p>現在回想起來，真的幸好有那段「看似浪費時間的無用(?)時間」，才讓我得以緩下來去 approach「買椅子」這件事情。所以說，<ins><strong>真的有「浪費時間」這回事嗎？很多時候，如果沒有那些「浪費時間」，結局就不一定能往比較好的方向發展呢！</strong></ins></p>
<p>反思了一下，對於「浪費時間」這件事，或許可以試著 reframe 一下：嘗試從「waste time」轉換成是在「invest time」，像這次的經驗，不就是一個挺賺的 investment 嗎？</p>
]]></content>
  </entry>
  <entry>
    <title>猶豫不決？先行動再說！</title>
    <url>/2022/12/why-not-just-start/</url>
    <content><![CDATA[<p>有時候能挖掘到寶藏，會感謝願意動身的自己😂</p>
<span id="more"></span>

<p>大概快半年前做的 side project「<a href="https://github.com/kanido386/guess-songs-king">猜歌我最強</a>」，開始工作以來一直希望能找出時間對它進行優化，原因很簡單，我希望能養成下班後繼續接觸技術相關東西的習慣，畢竟軟體工程師這個行業，如果不與時俱進，感覺很容易會被淘汰。</p>
<p>然而，我一直沒展開行動，可能因為下班回到家以後身心俱疲，想要做點什麼都很困難了，更何況是更具挑戰性的「做 side project」？</p>
<p>但不管怎樣，昨天我終於開始行動了！開始先試著讓那個 project 能夠在公司筆電上面 run 起來，而且是能夠註冊、建立歌曲集、製作不同效果的音檔、能夠開始遊戲跟玩家互動。</p>
<p>其實昨天在決定優化「猜歌我最強」之前，也是猶豫了一段時間，在想：到底該讀最近剛買的書「怡辰老師的高效時間管理課」呢？還是該為了自己在公司定的「2022Q4 OKR」而弄點 side project 的東西呢？沒錯，為了督促自己養成持續精進技術的習慣，我 11 月底在定 OKR 的時候，特別加上了這方面的 goal，希望能藉此多推進一點，讓自己不會因為完全沒壓力而放著不管。</p>
<p>猶豫了一段時間，擔心會不會又步入上禮拜日的後塵(?)。那一天，早上看 NBA，心想，看完比賽還有好多時間呢，真好，所以整個人就很放鬆，因為「體感」今天還有很多時間可以「做很多事情」。吃了午餐到了下午，突然有點覺得今天好像只剩一半了，怎麼都沒做什麼事情，於是乎，責備自己的小聲音開始在腦海裡干擾著我，有點寸步難行因為有雜音。這個時候，其實我還是沒做什麼事哦，但慶幸的是，至少有刷牙洗臉啦😂 印象中到了差不多三四五點，認真覺得不行了，再這樣下去，今天不就廢了一天？不找點事情做，真的無法接受啊！然而，困難的來了：現在的我，到底該彈吉他（但每次彈都那幾首）、玩 Logic Pro（幾個禮拜前有玩過，很享受沒錯，但感覺對自己來說又不太能像精進開發技術一樣，為職涯帶來太大的幫助）、去健身房運動（但上班以後根本沒去過）、學技術（每次只累積一點真的有幫助嗎）、做 side project（感覺很花時間，這樣難得假日的時間不就都被吃掉了嗎）、出去外面逛逛體驗點什麼（但外面又濕又冷實在很不適合）、看書（那不是睡前拿來催眠用的嗎）、打籃球（想跟朋友打但天氣母湯）、……。</p>
<p>就是這樣，禮拜日因為心底的各種猶豫不決和各種看似合理但都是藉口的藉口，讓我那一天完全不知道自己在做什麼，白白浪費掉了。</p>
<p>有點扯遠了😅</p>
<p>所以昨天後來，我也沒想那麼多，直接選擇優化 side project。那個時候差不多快十點半吧？想說，可能弄到十一點初，然後切換看書催眠一下就準備上床睡覺。令我感到驚訝和驚喜的地方是，我以為會很痛苦，畢竟它不像看球賽、看電影那樣坐著享受就可以了，它是要去花心思動身去做的！沒想到過程當中我十分享受，甚至忘記時間，持續弄到了十二點多！昨天說過了嘛，我喜歡創造的感覺，如果能因此帶來價值，那我會更有成就感。順利在公司筆電上面跑起來的片刻，真的很感動，雖然這件事情回想起來難度其實並不高，但看著自己願意嘗試擺脫懶散怠惰的束縛去行動，我就心滿意足了！</p>
<p>有了行動，有了推進，才有機會成長進步啊！</p>
<p>這篇文章的重點在於，有時候真的不要想那麼多，想說做了這個就不能做那個（機會成本）的話該怎麼辦，但其實享受當下正在做的事情才是真的。想太多，對我自己來說，很多時候的結局就會像上禮拜日一樣廢廢不知道自己在哪在做何事。有了行動，即使後來發現好像沒那麼喜歡或是感覺不太對，那就再調整即可，我們是自己的主人，又不像國高中，限制一堆。</p>
<p>所以說，跟隨著自己的 flow，follow your heart，去探索更多有趣的可能性，並享受於其中吧！</p>
<p>好了，差不多要到站了，下次見啦😃</p>
]]></content>
  </entry>
  <entry>
    <title>用 Docker 和 Kubernetes 部署一個使用到 RabbitMQ 及 MongoDB 的 Express App</title>
    <url>/2022/06/youbike-helper/</url>
    <content><![CDATA[<p>這個 Project 主要是用來熟悉 RabbitMQ、MongoDB、Docker 及 Kubernetes。<br>接下來我會用筆記的方式分享整個過程的點點滴滴（和一些我踩過的坑 😅）</p>
<span id="more"></span>

<h1 id="綜觀全貌"><a href="#綜觀全貌" class="headerlink" title="綜觀全貌"></a>綜觀全貌</h1><p><img src="1.png"></p>
<p>Crawler 每分鐘固定抓 YouBike 的資料，切分成一個一個站點資訊以後，丟進 message queue (RabbitMQ) 裡。</p>
<p>Worker 得知 queue 裡有新東西時，就將它們拿出來一一處理，並存進一個 NoSQL database (MongoDB) 裡。</p>
<p>Client 端能透過呼叫 Express Server 的 API，抓取「離使用者最近的三個站點還剩下多少台 YouBike」的資訊。</p>
<p>整個流程在本地端測試完以後，先練習用 Docker 去建置整個環境。</p>
<p>OK 以後，再練習用 Kubernetes，或者更精確來說是 k3s + k3d，來建整個環境。</p>
<h1 id="功能實作"><a href="#功能實作" class="headerlink" title="功能實作"></a>功能實作</h1><p>此 Project 需要用到的資料集：YouBike臺北市公共自行車即時資訊<br><a href="https://tcgbusfs.blob.core.windows.net/blobyoubike/YouBikeTP.json">JSON</a>、<a href="https://data.gov.tw/dataset/128706">主要欄位說明</a>（要點開 <code>資料資源下載網址</code> → <code>檢視資料</code> 才看得到）</p>
<h2 id="建-Project"><a href="#建-Project" class="headerlink" title="建 Project"></a>建 Project</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir youbike-helper</span><br><span class="line"><span class="built_in">cd</span> youbike-helper</span><br><span class="line">npm init                <span class="comment"># 我把 entry point 改成 app.js</span></span><br><span class="line">git init</span><br><span class="line">npm install express</span><br><span class="line">touch .gitignore        <span class="comment"># 加上 node_modules/</span></span><br><span class="line">touch app.js</span><br><span class="line"><span class="comment"># 貼 https://expressjs.com/en/starter/hello-world.html 範例 code</span></span><br><span class="line">nodemon app.js</span><br></pre></td></tr></table></figure>

<h2 id="定期做事情"><a href="#定期做事情" class="headerlink" title="定期做事情"></a>定期做事情</h2><blockquote>
<p><a href="https://github.com/kanido386/youbike-helper/commit/b0c6ed6126618ef59e4798807cb6941c01ee7aea">can print message every minute with node-cron</a></p>
</blockquote>
<ul>
<li>我是參考「<a href="https://www.mickpatterson.com.au/blog/how-to-setup-scheduled-functions-with-nodejs-express-and-node-cron/">How to Setup Scheduled Functions with NodeJs, Express and Node-Cron | Mick Patterson</a>」做這個部分的。</li>
<li><code>npm install --save node-cron</code></li>
<li>cron schedule expression 可參考「<a href="https://crontab.guru/">crontab guru</a>」</li>
</ul>
<h2 id="撈資料"><a href="#撈資料" class="headerlink" title="撈資料"></a>撈資料</h2><blockquote>
<p><a href="https://github.com/kanido386/youbike-helper/commit/b421a5fee9f4bbf9089e379622b954c0d8754d1f">can fetch online api json data with node-fetch</a></p>
</blockquote>
<ul>
<li><code>npm install node-fetch@2</code>（選用 v2 的<a href="https://stackoverflow.com/a/69904225">原因</a>）</li>
<li>使用方法可見 <a href="https://www.npmjs.com/package/node-fetch">node-fetch</a> 的 Common Usage → JSON</li>
</ul>
<h2 id="Message-Queue"><a href="#Message-Queue" class="headerlink" title="Message Queue"></a>Message Queue</h2><blockquote>
<p><a href="https://github.com/kanido386/youbike-helper/commit/e7b835cb737c1547bcafd781d1708432d224297e">can publish &amp; consume object with amqplib</a></p>
</blockquote>
<ul>
<li>安裝 RabbitMQ：<code>brew install rabbitmq</code></li>
<li>啟動：<code>rabbitmq-server</code></li>
<li><code>npm install amqplib</code></li>
</ul>
<h2 id="整合-MongoDB"><a href="#整合-MongoDB" class="headerlink" title="整合 MongoDB"></a>整合 MongoDB</h2><blockquote>
<p><a href="https://github.com/kanido386/youbike-helper/commit/80bfb3e54d20f4591a4c628be695ec7cb5bf0764">can insert data we want into MongoDB with mongoose</a></p>
</blockquote>
<ul>
<li>參考自我之前寫的「<a href="https://kanido386.github.io/2022/05/nosql-introduction/#Demo" target="_blank">【技術筆記】NoSQL、Data Replica、Sharding</a>」</li>
<li><code>npm install mongoose</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/mongos/db7</span><br><span class="line">mongod --port 2777 --dbpath ~/mongos/db7</span><br><span class="line"><span class="comment"># mongodb://localhost:2777</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>npm install dotenv --save</code> → <code>require(&#39;dotenv&#39;).config()</code></li>
<li>type 為 Date 的部分參考自<a href="https://www.mongodb.com/docs/manual/reference/method/Date/">這個</a></li>
</ul>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><ul>
<li><code>model.js</code>：用來定 schema</li>
<li>修改 <code>worker.js</code> 讓它能新增 document</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Info &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./model&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newInfo = &#123;</span><br><span class="line">  <span class="attr">station</span>: info[<span class="string">&#x27;sna&#x27;</span>],</span><br><span class="line">  <span class="attr">version</span>: <span class="string">&#x27;v1&#x27;</span>,</span><br><span class="line">  <span class="attr">available</span>: info[<span class="string">&#x27;sbi&#x27;</span>],</span><br><span class="line">  <span class="attr">location</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;Point&#x27;</span>,</span><br><span class="line">    <span class="attr">coordinates</span>: [ <span class="built_in">Number</span>(info[<span class="string">&#x27;lat&#x27;</span>]).toFixed(<span class="number">4</span>), <span class="built_in">Number</span>(info[<span class="string">&#x27;lng&#x27;</span>]).toFixed(<span class="number">4</span>) ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Transform &#x27;20220523235035&#x27; to &#x27;2022-05-23T23:50:35&#x27;</span></span><br><span class="line">  <span class="attr">datatime</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">`<span class="subst">$&#123;info[<span class="string">&#x27;mday&#x27;</span>].slice(<span class="number">0</span>,<span class="number">4</span>)&#125;</span>-<span class="subst">$&#123;info[<span class="string">&#x27;mday&#x27;</span>].slice(<span class="number">4</span>,<span class="number">6</span>)&#125;</span>-<span class="subst">$&#123;info[<span class="string">&#x27;mday&#x27;</span>].slice(<span class="number">6</span>,<span class="number">8</span>)&#125;</span>T<span class="subst">$&#123;info[<span class="string">&#x27;mday&#x27;</span>].slice(<span class="number">8</span>,<span class="number">10</span>)&#125;</span>:<span class="subst">$&#123;info[<span class="string">&#x27;mday&#x27;</span>].slice(<span class="number">10</span>,<span class="number">12</span>)&#125;</span>:<span class="subst">$&#123;info[<span class="string">&#x27;mday&#x27;</span>].slice(<span class="number">12</span>,<span class="number">14</span>)&#125;</span>`</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> theInfo = <span class="keyword">await</span> Info.create(newInfo);</span><br><span class="line"><span class="built_in">console</span>.log(theInfo);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;==============================&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="秀出最接近的幾個站點"><a href="#秀出最接近的幾個站點" class="headerlink" title="秀出最接近的幾個站點"></a>秀出最接近的幾個站點</h2><blockquote>
<p><a href="https://github.com/kanido386/youbike-helper/commit/d472b9457f047a5995435d100e90d5d6c6640b00">can print nearest stations regarding a point with aggregate and $geoNear</a></p>
</blockquote>
<ul>
<li>🎉 主要是參考<a href="https://stackoverflow.com/questions/24297556/mongoose-aggregation-with-geonear">這篇</a>「Or using aggregate instead」做到的 🎉</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">Info.aggregate(</span><br><span class="line">  [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&#x27;$geoNear&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;near&#x27;</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;Point&#x27;</span>,</span><br><span class="line">          <span class="comment">// <span class="doctag">TODO:</span> change to the data that users gave us</span></span><br><span class="line">          <span class="string">&#x27;coordinates&#x27;</span>: [ <span class="number">121.5312</span>, <span class="number">25.0299</span> ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;spherical&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;distanceField&#x27;</span>: <span class="string">&#x27;distance&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="string">&#x27;$skip&#x27;</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&#x27;$limit&#x27;</span>: <span class="number">3</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="function">(<span class="params">err, nearestInfos</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="comment">// console.log(nearestInfos);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> info <span class="keyword">of</span> nearestInfos) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(info[<span class="string">&#x27;station&#x27;</span>]);</span><br><span class="line">      <span class="built_in">console</span>.log(info[<span class="string">&#x27;available&#x27;</span>]);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;==============================&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>新版 <code>model.js</code>，為了能做 <code>$geoNear</code>（參考<a href="https://stackoverflow.com/questions/16388836/does-applying-a-2dsphere-index-on-a-mongoose-schema-force-the-location-field-to">這篇</a>修改的）</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; Schema &#125; = mongoose;</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;dotenv&#x27;</span>).config();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> URI = process.env.MONGODB_URI;</span><br><span class="line">mongoose.connect(<span class="string">`<span class="subst">$&#123;URI&#125;</span>/demo`</span>);</span><br><span class="line"><span class="keyword">const</span> db = mongoose.connection;</span><br><span class="line">db.on(<span class="string">&#x27;error&#x27;</span>, <span class="built_in">console</span>.error.bind(<span class="built_in">console</span>, <span class="string">&#x27;MongoDB connection error:&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> infoSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  <span class="attr">station</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">version</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">available</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 這邊這邊這邊這邊這邊</span></span><br><span class="line">  <span class="attr">location</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">      <span class="attr">enum</span>: [<span class="string">&#x27;Point&#x27;</span>],</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&#x27;Point&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">coordinates</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: [<span class="built_in">Number</span>],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 這邊這邊這邊這邊這邊</span></span><br><span class="line">  <span class="attr">datatime</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">Date</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">strict</span>: <span class="string">&#x27;throw&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 這邊這邊這邊這邊這邊</span></span><br><span class="line">infoSchema.index(&#123; <span class="attr">location</span>: <span class="string">&#x27;2dsphere&#x27;</span> &#125;);</span><br><span class="line"><span class="comment">// 這邊這邊這邊這邊這邊</span></span><br><span class="line"><span class="keyword">const</span> Info = mongoose.model(<span class="string">&#x27;Info&#x27;</span>, infoSchema);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  Info</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>worker.js</code> 經緯度次序也要對調，不然會噴錯！（<a href="https://stackoverflow.com/questions/25150590/mongoerror-cant-extract-geo-keys-from-object-with-type-point">這篇</a>有提到）</li>
</ul>
<p><img src="2.png"></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">coordinates: [</span><br><span class="line">  <span class="built_in">Number</span>(<span class="built_in">Number</span>(info[<span class="string">&#x27;lng&#x27;</span>]).toFixed(<span class="number">4</span>)),</span><br><span class="line">  <span class="built_in">Number</span>(<span class="built_in">Number</span>(info[<span class="string">&#x27;lat&#x27;</span>]).toFixed(<span class="number">4</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="實際秀出來給使用者看"><a href="#實際秀出來給使用者看" class="headerlink" title="實際秀出來給使用者看"></a>實際秀出來給使用者看</h2><blockquote>
<p><a href="https://github.com/kanido386/youbike-helper/commit/842287d910a923ec336f35de5ea8eaddaf1937ce">can show to users with ejs and geolocation</a></p>
</blockquote>
<ul>
<li><code>npm install ejs</code></li>
<li>定位使用者：<a href="https://www.w3schools.com/html/html5_geolocation.asp">Locate the User’s Position</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-use-ejs-to-template-your-node-application">How To Use EJS to Template Your Node Application</a></li>
</ul>
<h2 id="改成-upsert-而不是一直-insert"><a href="#改成-upsert-而不是一直-insert" class="headerlink" title="改成 upsert 而不是一直 insert"></a>改成 upsert 而不是一直 insert</h2><blockquote>
<p><a href="https://github.com/kanido386/youbike-helper/commit/72daa2c1eb585f42bee7c74171219fe8d316a07e">change to upsert to prevent infinite growth</a></p>
</blockquote>
<ul>
<li><a href="https://stackoverflow.com/questions/7267102/how-do-i-update-upsert-a-document-in-mongoose">How do I update/upsert a document in Mongoose?</a></li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// const theInfo = await Info.create(newInfo);</span></span><br><span class="line"><span class="keyword">const</span> theInfo = <span class="keyword">await</span> Info.findOneAndUpdate(&#123;</span><br><span class="line">  <span class="attr">station</span>: info[<span class="string">&#x27;sna&#x27;</span>],</span><br><span class="line">  <span class="attr">version</span>: <span class="string">&#x27;v1&#x27;</span>,</span><br><span class="line">&#125;, newInfo, &#123; <span class="attr">upsert</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="環境變數"><a href="#環境變數" class="headerlink" title="環境變數"></a>環境變數</h2><p>對了，我的 <code>.env</code> 長這樣：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MONGODB_URI=&#x27;mongodb://localhost:2777&#x27;</span><br><span class="line">AMQP_URI=&#x27;amqp://localhost&#x27;</span><br><span class="line">SEARCH_API_URL=&#x27;http://localhost:3000/search&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><p>在本地端測試：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rabbitmq-server                            <span class="comment"># 啟動 RabbitMQ</span></span><br><span class="line">mongod --port 2777 --dbpath ~/mongos/db7   <span class="comment"># 啟動 MongoDB</span></span><br><span class="line">nodemon app.js                             <span class="comment"># 啟動 Express Server</span></span><br></pre></td></tr></table></figure>

<p><img src="3.png"></p>
<p>Nice!</p>
<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="啟動多個-Docker-container"><a href="#啟動多個-Docker-container" class="headerlink" title="啟動多個 Docker container"></a>啟動多個 Docker container</h2><blockquote>
<p><a href="https://github.com/kanido386/youbike-helper/commit/e8aef4409a12c815870fbe95a85e07189ca3bb87">can do the same job on docker containers with docker-compose up</a></p>
</blockquote>
<ul>
<li>參考自「<a href="https://qiita.com/dennistanaka/items/78585b6bda374be98aad">Kubernetes Web App Deployment with k3d</a>」</li>
</ul>
<ol>
<li>先將 docker daemon 跑起來</li>
<li>寫 backend 的 Dockerfile：<code>touch Dockerfile</code></li>
</ol>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:lts-alpine</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /usr/src/app</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /usr/src/app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install -g nodemon</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">&quot;npm&quot;</span>, <span class="string">&quot;start&quot;</span> ]</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>docker-compose.yml</code>：用來組合多個 container 成為一個完整的服務</li>
</ol>
<p>也參考了「<a href="https://x-team.com/blog/set-up-rabbitmq-with-docker-compose/">How to Set Up RabbitMQ With Docker Compose</a>」及「<a href="https://stackoverflow.com/questions/31746182/docker-compose-wait-for-container-x-before-starting-y">Docker Compose wait for container X before starting Y</a>」</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.9&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">rabbitmq:3-management-alpine</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&#x27;rabbitmq&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5672</span><span class="string">:5672</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">15672</span><span class="string">:15672</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> <span class="string">rabbitmq-diagnostics</span> <span class="string">-q</span> <span class="string">ping</span></span><br><span class="line">      <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">5s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">3s</span></span><br><span class="line">  <span class="attr">mongo:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;27017:27017&quot;</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> <span class="string">echo</span> <span class="string">&#x27;db.runCommand(&quot;ping&quot;).ok&#x27;</span> <span class="string">|</span> <span class="string">mongo</span> <span class="string">localhost:27017/test</span> <span class="string">--quiet</span></span><br><span class="line">      <span class="attr">interval:</span> <span class="string">2s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">3s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">3s</span></span><br><span class="line">  <span class="attr">backend:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3000:3000&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MONGODB_URI=mongodb://mongo:27017</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AMQP_URI=amqp://guest:guest@rabbitmq:5672</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mongo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rabbitmq</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="attr">mongo:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">service_healthy</span></span><br><span class="line">      <span class="attr">rabbitmq:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">service_healthy</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>跑起來：<code>docker-compose up</code>（後端有改 code 的話，先 <code>docker-compose down</code> 再 <code>docker-compose up --build</code>，不然 code 不會更新到，這個地方花了我超多時間在 debug 😂）</li>
</ol>
<h1 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h1><blockquote>
<p><a href="https://github.com/kanido386/youbike-helper/commit/30a268fef17ef902c7bdac93ad1de42bfd9ea3c9">deploy to K3s with k3d</a></p>
</blockquote>
<p>幾乎都參考自「<a href="https://qiita.com/dennistanaka/items/78585b6bda374be98aad">Kubernetes Web App Deployment with k3d</a>」，那篇實在是太優質啦！</p>
<h2 id="建立-Cluster"><a href="#建立-Cluster" class="headerlink" title="建立 Cluster"></a>建立 Cluster</h2><ul>
<li>將 <code>/mnt/data</code> 加進 Docker → Preferences… → Resources → File Sharing</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /mnt/data</span><br><span class="line">k3d cluster create youbike-helper --servers 1 --agents 2 --port <span class="string">&quot;30000-30005:30000-30005@server:0&quot;</span> --volume /mnt/data:/mnt/data</span><br><span class="line"></span><br><span class="line">kubectl config get-contexts    <span class="comment"># check the newly created cluster</span></span><br><span class="line">kubectl cluster-info           <span class="comment"># 啟用(?)的樣子</span></span><br></pre></td></tr></table></figure>

<h2 id="建後端的-Docker-Image"><a href="#建後端的-Docker-Image" class="headerlink" title="建後端的 Docker Image"></a>建後端的 Docker Image</h2><ul>
<li><a href="https://qiita.com/dennistanaka/items/78585b6bda374be98aad">參考文</a>：Build the Docker images corresponding to the application components and pushing them to Docker Hub, so they become available to our deployment process.</li>
<li>透過 <code>docker build</code> 指令可依序讀取 Dockerfile 中的指令以自動建立 image。</li>
<li><a href="https://hub.docker.com/">Docker Hub</a> 註冊一下吧～</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t youbike-helper-backend .</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker tag youbike-helper-backend &lt;you_docker_hub_username&gt;/youbike-helper-backend</span></span><br><span class="line">docker tag youbike-helper-backend kanido386/youbike-helper-backend</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker push &lt;your_docker_hub_username&gt;/youbike-helper-backend</span></span><br><span class="line">docker push kanido386/youbike-helper-backend</span><br></pre></td></tr></table></figure>

<h2 id="建置-Database"><a href="#建置-Database" class="headerlink" title="建置 Database"></a>建置 Database</h2><h3 id="Persistent-Volume"><a href="#Persistent-Volume" class="headerlink" title="Persistent Volume"></a>Persistent Volume</h3><ul>
<li><a href="https://qiita.com/dennistanaka/items/78585b6bda374be98aad">參考文</a>：A pod is ephemeral (短暫存在的), so its data is lost if the pod is destroyed. In this example, we are going to use a <strong>persistent volume</strong> (pv) to hold the application data so it persists beyond the lifetime of the pod.</li>
</ul>
<p><code>pv.yaml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">youbike-helper-pv</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">manual</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">5Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">hostPath:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">&quot;/mnt/data&quot;</span></span><br></pre></td></tr></table></figure>

<p>去 command line 跑一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f pv.yaml   <span class="comment"># create</span></span><br><span class="line">kubectl get pv             <span class="comment"># check</span></span><br></pre></td></tr></table></figure>

<h3 id="Persistent-Volume-Claim"><a href="#Persistent-Volume-Claim" class="headerlink" title="Persistent Volume Claim"></a>Persistent Volume Claim</h3><ul>
<li><a href="https://qiita.com/dennistanaka/items/78585b6bda374be98aad">參考文</a>：<strong>persistent volume claim</strong> (pvc) are used by pods to request physical storage.</li>
</ul>
<p><code>db-pv-claim.yaml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">youbike-helper-db-pv-claim</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">manual</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">3Gi</span></span><br></pre></td></tr></table></figure>

<p>去 command line 跑一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f db-pv-claim.yaml   <span class="comment"># create</span></span><br><span class="line">kubectl get pvc</span><br></pre></td></tr></table></figure>

<h3 id="想移除-PV-和-PVC-怎麼辦？"><a href="#想移除-PV-和-PVC-怎麼辦？" class="headerlink" title="想移除 PV 和 PVC 怎麼辦？"></a>想移除 PV 和 PVC 怎麼辦？</h3><ul>
<li><a href="https://stackoverflow.com/questions/55672498/kubernetes-clustsr-stuck-on-removing-pv-pvc">Kubernetes Clustsr stuck on removing PV/PVC</a></li>
</ul>
<h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><ul>
<li><a href="https://qiita.com/dennistanaka/items/78585b6bda374be98aad">參考文</a>：<ul>
<li>A deployment defines the desired state for a component in our application.</li>
<li>In this case, we are declaring the desired state of our database and Kubernetes takes care of sticking to this definition.</li>
</ul>
</li>
</ul>
<p><code>db-deployment.yaml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">youbike-helper-db-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">youbike-helper</span></span><br><span class="line">      <span class="attr">tier:</span> <span class="string">db</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">  <span class="comment"># refers to the pod</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">youbike-helper</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">youbike-helper-db</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">mongo</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">27017</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">				<span class="comment"># 若 mountPath 跟 PersistentVolume 的 path 不一樣</span></span><br><span class="line">				<span class="comment"># pod 會卡在 CrashLoopBackOff 的狀態...</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/mnt/data</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">youbike-helper-db-volume</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">youbike-helper-db-volume</span></span><br><span class="line">        <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">          <span class="attr">claimName:</span> <span class="string">youbike-helper-db-pv-claim</span></span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://qiita.com/dennistanaka/items/78585b6bda374be98aad">參考文</a>：What is a rolling update strategy?<ul>
<li>The rolling update strategy is <strong>a gradual process that allows you to update your Kubernetes system with only a minor effect on performance and no downtime</strong>.</li>
<li>In this strategy, the Deployment selects a Pod with the old programming, deactivates it, and creates an updated Pod to replace it.</li>
</ul>
</li>
</ul>
<p>去 command line 跑一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f db-deployment.yaml</span><br><span class="line">kubectl get deployments</span><br><span class="line">kubectl get pods -o wide   <span class="comment"># check the state of the pod</span></span><br></pre></td></tr></table></figure>

<h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><ul>
<li><a href="https://qiita.com/dennistanaka/items/78585b6bda374be98aad">參考文</a>：<ul>
<li>We need a service to make the database available to the backend.</li>
<li>This makes the database pod accessible only from within the cluster and the connection will target the port 27017 in the pod.</li>
</ul>
</li>
</ul>
<p><code>db-service.yaml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">youbike-helper-db-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">youbike-helper</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">db</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">27017</span></span><br></pre></td></tr></table></figure>

<p>去 command line 跑一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f db-service.yaml</span><br><span class="line">kubectl get services</span><br></pre></td></tr></table></figure>

<h3 id="各種-port-傻傻分不清楚？"><a href="#各種-port-傻傻分不清楚？" class="headerlink" title="各種 port 傻傻分不清楚？"></a>各種 port 傻傻分不清楚？</h3><ul>
<li><a href="https://iter01.com/523068.html">k8s 辨析 port、NodePort、targetPort、containerPort 區別</a></li>
</ul>
<p><img src="4.png"></p>
<p>（截圖自「<a href="https://www.youtube.com/watch?v=T4Z7visMM4E">Kubernetes Services explained | ClusterIP vs NodePort vs LoadBalancer vs Headless Service</a>」）</p>
<h2 id="弄-RabbitMQ"><a href="#弄-RabbitMQ" class="headerlink" title="弄 RabbitMQ"></a>弄 RabbitMQ</h2><h3 id="Deployment-和-Service-可寫在一起"><a href="#Deployment-和-Service-可寫在一起" class="headerlink" title="Deployment 和 Service 可寫在一起"></a>Deployment 和 Service 可寫在一起</h3><p><code>rabbitmq.yaml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-rabbitmq-service</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">rabbitmq</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">rabbitmq</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rabbitmq</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">5672</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30001</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rabbitmq-management</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">15672</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">15672</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30002</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">## Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-rabbitmq-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">rabbitmq</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">rabbitmq</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">rabbitmq</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rabbitmq</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">rabbitmq:3.9.18-management-alpine</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">5672</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">15672</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">            <span class="attr">limits:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">500m</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">512Mi</span></span><br><span class="line">            <span class="attr">requests:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">500m</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">512Mi</span></span><br><span class="line">          <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">30</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">5</span></span><br><span class="line">            <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">tcpSocket:</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">          <span class="attr">readinessProbe:</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">5</span></span><br><span class="line">            <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">tcpSocket:</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">5672</span></span><br></pre></td></tr></table></figure>

<p>去 command line 跑一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f rabbitmq.yaml   <span class="comment"># create</span></span><br><span class="line">kubectl get deployment           <span class="comment"># check deployment</span></span><br><span class="line">kubectl get service              <span class="comment"># check service</span></span><br><span class="line"><span class="comment"># kubectl get &lt;單數複數好像都可以&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="處理-Backend"><a href="#處理-Backend" class="headerlink" title="處理 Backend"></a>處理 Backend</h2><h3 id="環境變數-1"><a href="#環境變數-1" class="headerlink" title="環境變數"></a>環境變數</h3><ul>
<li><a href="https://qiita.com/dennistanaka/items/78585b6bda374be98aad">參考文</a>：3 ways to provide some environment variables when creating the deployment for the backend<ul>
<li>defining a variable value directly in the deployment definition</li>
<li>get a variable’s value from a separate configuration object called <strong>ConfigMap</strong></li>
<li>get a variable’s value from a separate configuration object called <strong>Secret</strong></li>
</ul>
</li>
</ul>
<p><code>backend-config.yaml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">backend-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">MONGODB_URI:</span> <span class="string">youbike-helper-db-service</span></span><br><span class="line">  <span class="attr">AMQP_URI:</span> <span class="string">my-rabbitmq-service</span></span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://qiita.com/dennistanaka/items/78585b6bda374be98aad">參考文</a>：<ul>
<li>Please note, we provide the name of the service created before.</li>
<li>That’s because Kubernetes handles the name resolution so the requests will reach the database pod without problems.</li>
</ul>
</li>
</ul>
<p>去 command line 跑一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f backend-config.yaml</span><br><span class="line">kubectl get configmap</span><br><span class="line">kubectl describe configmap backend-config</span><br></pre></td></tr></table></figure>

<p>（因為 project 不需要，所以就沒設定 secret 了，設定方式詳見參考文「Next, let’s create a Secret.」）</p>
<h3 id="Deployment-1"><a href="#Deployment-1" class="headerlink" title="Deployment"></a>Deployment</h3><p><code>backend-deployment.yaml</code></p>
<ul>
<li>env 部分參考了<a href="https://stackoverflow.com/questions/54350939/kubernetes-config-map-templated-variables">這個</a></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">youbike-helper-backend-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">youbike-helper</span></span><br><span class="line">      <span class="attr">tier:</span> <span class="string">backend</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># refers to the pod</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">youbike-helper</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">backend</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">youbike-helper-backend</span></span><br><span class="line">          <span class="comment"># image: &lt;your_docker_hub_username&gt;/youbike-helper-backend:latest</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">kanido386/youbike-helper-backend:latest</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="comment"># - name: NODE_ENV</span></span><br><span class="line">            <span class="comment">#   value: &quot;production&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MONGODB</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">configMapKeyRef:</span></span><br><span class="line">                  <span class="attr">name:</span> <span class="string">backend-config</span></span><br><span class="line">                  <span class="attr">key:</span> <span class="string">MONGODB_URI</span></span><br><span class="line">            <span class="comment"># 後來才知道要這樣寫，所以變數名稱有點亂</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MONGODB_URI</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">mongodb://$(MONGODB)</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">AMQP</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">configMapKeyRef:</span></span><br><span class="line">                  <span class="attr">name:</span> <span class="string">backend-config</span></span><br><span class="line">                  <span class="attr">key:</span> <span class="string">AMQP_URI</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">AMQP_URI</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">amqp://$(AMQP)</span></span><br><span class="line">            <span class="comment"># - name: SECRET</span></span><br><span class="line">            <span class="comment">#   valueFrom:</span></span><br><span class="line">            <span class="comment">#     secretKeyRef:</span></span><br><span class="line">            <span class="comment">#       name: backend-secrets</span></span><br><span class="line">            <span class="comment">#       key: backend_secret</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">            <span class="attr">requests:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">&quot;500m&quot;</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">&quot;512Mi&quot;</span></span><br><span class="line">            <span class="attr">limits:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">&quot;1000m&quot;</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">&quot;1024Mi&quot;</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure>

<p>去 command line 跑一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f backend-deployment.yaml</span><br><span class="line">kubectl get deployments</span><br><span class="line"><span class="comment"># kubectl get pods 發現 STATUS 為 ImagePullBackOff 不用擔心！</span></span><br><span class="line"><span class="comment"># 過一段時間就會變為 Running（我這邊是這樣）</span></span><br><span class="line"></span><br><span class="line">kubectl <span class="built_in">exec</span> -it [pod] /bin/ash   <span class="comment"># 我沒有打錯，是 ash 沒錯😂</span></span><br></pre></td></tr></table></figure>

<h3 id="Service-1"><a href="#Service-1" class="headerlink" title="Service"></a>Service</h3><ul>
<li><a href="https://qiita.com/dennistanaka/items/78585b6bda374be98aad">參考文</a>：<ul>
<li>If we need to connect to the backend pods directly, how could we find out and keep track of the IP addresses to connect to?</li>
<li>Thanks to this abstraction, we don’t need to worry about any of this.</li>
<li>The service “knows” where to find all the pods that matches its selector and any request that reaches the service will reach one of those pods.</li>
<li>Even if a pod dies or even a node crashes, Kubernetes will make sure to keep the desired number of pods and the service will allow us to reach the required pods.</li>
</ul>
</li>
</ul>
<p><code>backend-service.yaml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">youbike-helper-backend-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">youbike-helper</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">backend</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">youbike-helper-backend</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">3000</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">3000</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30000</span></span><br></pre></td></tr></table></figure>

<p>去 command line 跑一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f backend-service.yaml</span><br><span class="line">kubectl get services</span><br></pre></td></tr></table></figure>

<h2 id="試試-Ingress"><a href="#試試-Ingress" class="headerlink" title="試試 Ingress"></a>試試 Ingress</h2><ul>
<li><a href="https://qiita.com/dennistanaka/items/78585b6bda374be98aad">參考文</a>：We can access the application from outside and make sure the requests will reach the correct destination.</li>
</ul>
<p><code>ingress.yaml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">youbike-helper-ingress</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">ingress.kubernetes.io/ssl-redirect:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">youbike-helper-backend-service</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">3000</span></span><br><span class="line">      <span class="comment"># - path: /</span></span><br><span class="line">      <span class="comment">#   pathType: Prefix</span></span><br><span class="line">      <span class="comment">#   backend:   # 這仍舊要寫 backend</span></span><br><span class="line">      <span class="comment">#     service:</span></span><br><span class="line">      <span class="comment">#       name: youbike-helper-frontend-service</span></span><br><span class="line">      <span class="comment">#       port:</span></span><br><span class="line">      <span class="comment">#         number: 80</span></span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://qiita.com/dennistanaka/items/78585b6bda374be98aad">參考文</a>：The ingress controller will start acting as a HTTP reverse proxy.</li>
</ul>
<p>去 command line 跑一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f ingress.yaml</span><br><span class="line">kubectl get ingress</span><br></pre></td></tr></table></figure>

<p>（但後來我沒靠 Ingress 連，而是靠 NodePort 😂）<br>（我靠 NodePort 連的這個做法其實挺不安全的！）</p>
<h2 id="進行測試"><a href="#進行測試" class="headerlink" title="進行測試"></a>進行測試</h2><ul>
<li><a href="https://qiita.com/dennistanaka/items/78585b6bda374be98aad">參考文</a>：You can play with the application and then check the logs:（也可以用這個 debug！）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get pods</span><br><span class="line"></span><br><span class="line"><span class="comment"># get the name of a pod and:</span></span><br><span class="line">kubectl logs [pod]</span><br></pre></td></tr></table></figure>

<p>用 <code>http://localhost:30000</code> 成功連進頁面 🎉<br>但當我按「查找附近的 YouBike 站點！」居然沒反應⋯⋯<br>啊！原來是我 call 後端 API 的網址忘記改啦⋯⋯<br>（應該要把 <code>http://localhost:3000/search</code> 改成 <code>http://localhost:30000/search</code>，當然或許有更好的改法 🤔）</p>
<h3 id="解掉問題"><a href="#解掉問題" class="headerlink" title="解掉問題"></a>解掉問題</h3><p>要改 code 的話，會有以下程序要做：</p>
<ol>
<li>那部分改為環境變數</li>
</ol>
<p><code>.env</code></p>
<p>for 本地端測試用 (假裝自己沒架 k3d)，得加上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SEARCH_API_URL=&#x27;http://localhost:3000/search&#x27;</span><br></pre></td></tr></table></figure>

<p><code>app.js</code></p>
<p>html 裡面好像不能吃到環境變數，得靠後端傳入</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.render(<span class="string">&#x27;index&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">SEARCH_API_URL</span>: process.env.SEARCH_API_URL</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>index.ejs</code></p>
<p>參考自「<a href="https://stackoverflow.com/a/59136857">Accessing EJS variable in Javascript logic</a>」，在 <code>&lt;script&gt;</code> 裡面加上：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> axios.post(<span class="string">&#x27;&lt;%- SEARCH_API_URL %&gt;&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">longitude</span>: position.coords.longitude,</span><br><span class="line">  <span class="attr">latitude</span>: position.coords.latitude</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>更新 docker image 並 push 上去</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t youbike-helper-backend .</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker tag youbike-helper-backend &lt;you_docker_hub_username&gt;/youbike-helper-backend</span></span><br><span class="line">docker tag youbike-helper-backend kanido386/youbike-helper-backend</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker push &lt;your_docker_hub_username&gt;/youbike-helper-backend</span></span><br><span class="line">docker push kanido386/youbike-helper-backend</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改 <code>backend-config.yaml</code> 及 <code>backend-deployment.yaml</code></li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># backend-config.yaml 加上：</span></span><br><span class="line"><span class="attr">SEARCH_API_URL:</span> <span class="string">&#x27;http://localhost:30000/search&#x27;</span>   <span class="comment"># 總覺得有更好的寫法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># backend-deployment.yaml 加上：</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SEARCH_API_URL</span></span><br><span class="line">  <span class="attr">valueFrom:</span></span><br><span class="line">    <span class="attr">configMapKeyRef:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">backend-config</span></span><br><span class="line">      <span class="attr">key:</span> <span class="string">SEARCH_API_URL</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>重新 apply 上面那兩個</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl delete -f backend-config.yaml &amp;&amp; kubectl apply -f backend-config.yaml</span><br><span class="line">kubectl delete -f backend-deployment.yaml &amp;&amp; kubectl apply -f backend-deployment.yaml</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>再跑跑看 <code>http://localhost:30000/</code> 然後點「查找附近的 YouBike 站點！」，成功啦 😎</li>
</ol>
<h3 id="Kubernetes-Dashboard"><a href="#Kubernetes-Dashboard" class="headerlink" title="Kubernetes Dashboard"></a>Kubernetes Dashboard</h3><p>參考文有放「<strong><strong>Kubernetes Dashboard</strong></strong>」的操作教學，這邊就不贅述了～</p>
<br>
希望讀完這篇文章的您能夠有所收穫，我們下篇文見啦 😃]]></content>
  </entry>
  <entry>
    <title>抓取某網站特定 URL 並做些處理</title>
    <url>/2022/10/wget-and-grep-urls/</url>
    <content><![CDATA[<p>👨‍💻 情境題：</p>
<p>身為一名後端工程師，今天團隊指派給你一個任務 —— 找出團隊網站、部落格、GitHub repo 所有有用到像是 <code>https://my.shorturl.com/3lls9f</code> 這樣的短網址，請你拿到它們分別導向的原網址，並用 <code>3lls9f</code> 當作 id，在團隊跟短網址有關的資料庫 table 當中 insert 新的 record 進去，讓團隊能用另外一種短網址服務來做到一樣的事情 (導向原網址)。</p>
<p>這麼做的原因是，團隊即將 sunset <code>https://my.shorturl.com/</code>，也就是在沒有 insert 新 record 的情況下 <code>https://my.shorturl.com/3lls9f</code> 將會無效，因為另外一種短網址服務它會找不到 <code>3lls9f</code> 這個 id 而發生錯誤！</p>
<p>如果是你，你會怎麼做？簡單分享一下我的作法。</p>
<span id="more"></span>

<h3 id="以團隊部落格的例子來說"><a href="#以團隊部落格的例子來說" class="headerlink" title="以團隊部落格的例子來說"></a>以團隊部落格的例子來說</h3><p><a href="https://stackoverflow.com/questions/28933031/using-wget-to-download-website-ignoring-image-and-videos/28933140#28933140">Stack Overflow 是我們的好朋友</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -r -l 0 -nd -R png,jpg,jpeg,gif,mpg,mkv https://blog.myteam.com/</span><br></pre></td></tr></table></figure>

<ul>
<li>先透過 <code>wget</code> 來抓取所有 <code>https://blog.myteam.com/</code> domain 底下的 html 檔（因為短網址連結會藏在裡面）</li>
<li><code>-r -l 0</code>：使用 recursive retrieving 的方式來抓，因為 <code>https://blog.myteam.com/</code> 底下還會有 <code>https://blog.myteam.com/subpage/</code> 等等 depth 更深的 subpage<ul>
<li>那因為 <code>-r</code> (<code>--recursive</code>) 預設的 depth 為 5，我不確定團隊部落格會不會有超過深度 5 的 subpage，所以我還加上了 <code>-l 0</code> 來做 infinite recursion (這邊的 <code>0</code> 相當於 <code>inf</code>)</li>
<li>詳細可透過 <code>man wget</code> 來查找</li>
</ul>
</li>
<li><code>-nd</code> (<code>--no-directories</code>)：Do not create a hierarchy of directories when retrieving recursively.<ul>
<li>我希望抓下來的檔案能在同一個資料夾層級下，因為我發現不這樣做有些檔案會被忽略掉</li>
<li>像是如果目前已經存在一個叫做 <code>en</code> 的資料夾，要再抓 <code>/en/index.html</code> 的時候，會因為已經有東西叫做 <code>en</code> 而被略過（我那時候是這樣）</li>
</ul>
</li>
<li><code>-R png,jpg,jpeg,gif,mpg,mkv</code>：抓的時候忽略掉 <code>png,jpg,jpeg,gif,mpg,mkv</code> 這些<ul>
<li><code>-R</code> 即為 <code>--reject</code></li>
<li>沒加上這個，我放著等了超過一小時還在跑⋯⋯</li>
<li>原因是因為它不斷在抓跟 WordPress 有關的靜態檔，那些超多的⋯⋯</li>
<li>反正我只需要 html 檔，忽略掉那些根本無關緊要，反而還省了我很多等待時間！</li>
</ul>
</li>
</ul>
<h3 id="那-GitHub-repo-呢？"><a href="#那-GitHub-repo-呢？" class="headerlink" title="那 GitHub repo 呢？"></a>那 GitHub repo 呢？</h3><p>我是直接用 GitHub 左上角 <code>Search or jump to…</code> 來搜，然後看哪些 repo 被搜出來，我再 clone 下來那些 repo。</p>
<h3 id="拿到檔案然後勒？"><a href="#拿到檔案然後勒？" class="headerlink" title="拿到檔案然後勒？"></a>拿到檔案然後勒？</h3><p><a href="https://stackoverflow.com/questions/49313160/removing-duplicates-in-grep-output/49313231#49313231">Stack Overflow 真的是我們的好朋友⋯⋯</a></p>
<p>抓出所有短網址，然後彙整成一份清單：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -ohr <span class="string">&quot;my.shorturl.com/[a-zA-Z0-9._-~]*&quot;</span> * | sort -u &gt; ../output.txt</span><br></pre></td></tr></table></figure>

<ul>
<li><code>grep</code> 是一款抓取特定 pattern 文字的好工具！</li>
<li><code>-o</code>：Prints only the matching part of the lines.<ul>
<li>因為我只需要短網址本身，前後不相關的文字我不需要</li>
</ul>
</li>
<li><code>-h</code>：Never print filename headers (i.e. filenames) with output lines.<ul>
<li>檔名在我這個 case 當中根本不重要，擺著反而會干擾到後面的步驟</li>
</ul>
</li>
<li><code>-r</code>：Recursively search subdirectories listed.<ul>
<li>上例的部落格是不需要，但 GitHub repo 可就有很多 subdirectories，沒加上這個 option 不行！</li>
</ul>
</li>
<li><code>&quot;my.shorturl.com/[a-zA-Z0-9._-~]*&quot;</code> 是那個短網址的 pattern<ul>
<li>沒加上 <code>https://</code> 是因為我發現有幾個是 <code>http://</code></li>
</ul>
</li>
<li>用 <code>*</code> (acts as a wildcard) 代表我想找這個目錄底下的所有東東</li>
<li><code>|</code>：透過這個將 <code>grep</code> 的 standard output stream 導到 <code>sort</code> 為它的 input</li>
<li><code>sort -u</code>：為了拔掉重複的 URL（因為有很多重複的）</li>
<li><code>&gt; ../output.txt</code>：將結果輸出成文字檔（for 下一步）</li>
</ul>
<h3 id="取得原網址"><a href="#取得原網址" class="headerlink" title="取得原網址"></a>取得原網址</h3><p>使用「<a href="https://unshorten.xyz/">unshorten.xyz - unshorten multiple URLs</a>」這款線上工具來做。</p>
<p>很單純地，就是 copy and paste <code>output.txt</code> 的內容到上面，再將 resolve 出來的原網址們 copy and paste 到本地端。</p>
<p>本來是想說要不要用 Python 寫個 script 來做，但居然已經有人做這個服務，就不用再多此一舉了😂</p>
<h3 id="存進資料庫"><a href="#存進資料庫" class="headerlink" title="存進資料庫"></a>存進資料庫</h3><p>找團隊有用到跟短網址 table 寫入有關的 function 的 repo 和相對應的 route，copy and paste 成一個新的 path，<code>npm run dev</code> 跑起來以後，借助 Postman 來 call 那隻 API，原因是短網址和原網址清單的文字檔在本地端，利用這樣的方式，就能透過 <code>fs</code> module 來讀，拿到相對應的短網址和原網址以後，藉此 insert 新 record 進 DB。</p>
<br>
原本以為這個 task 會有大量的「重複性人工操作」，沒想到居然能找到比較優雅的做法，也是挺有意思的～]]></content>
  </entry>
  <entry>
    <title>用 zsh-z 快速切換到曾經造訪過的目錄</title>
    <url>/2022/09/zsh-z/</url>
    <content><![CDATA[<p>簡單 share 給大家這個方便的酷工具～</p>
<span id="more"></span>

<h2 id="為何想推-zsh-z？"><a href="#為何想推-zsh-z？" class="headerlink" title="為何想推 zsh-z？"></a>為何想推 zsh-z？</h2><p>試想個情境：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── A</span><br><span class="line">│   └── 123</span><br><span class="line">│       └── abc</span><br><span class="line">│           └── wow</span><br><span class="line">│               └── wow.txt</span><br><span class="line">└── B</span><br><span class="line">    └── 123</span><br><span class="line">        └── abc</span><br><span class="line">            └── hello</span><br><span class="line">                └── hello.txt</span><br></pre></td></tr></table></figure>

<p>今天你的 working directory 位於 <code>./B/123/abc/hello/</code>，如果想切換目錄到裡面有 <code>wow.txt</code> 的目錄底下，你會怎麼做呢？</p>
<p>可能是 <code>cd ../../../../A/123/abc/wow/</code> ？這樣不是挺麻煩的嗎？</p>
<p>身為一個<del>懶惰</del>不斷尋找優化可能性的軟體工程師，怎能允許自己浪費寶貴的時間在這種事情上呢？</p>
<p>於是乎，在某種因緣際會之下，我認識了「zsh-z」這個酷工具，它可以解決問題！</p>
<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>首先，照著<a href="https://github.com/agkozak/zsh-z">這個</a>裝吧！</p>
<p>以 oh-my-zsh 的使用者為例：</p>
<ol>
<li>打開 terminal，輸入： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/agkozak/zsh-z <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-z</span><br></pre></td></tr></table></figure>
</li>
<li>編輯家目錄底下的 <code>.zshrc</code>：找到 <code>plugins=()</code>，將 <code>zsh-z</code> 加進 <code>()</code> 裡面，像 <code>plugins=( git zsh-z )</code> 這樣</li>
<li>重開新的 terminal，或是 <code>source ~/.zshrc</code> 以後就可以用囉！</li>
</ol>
<h2 id="怎麼用？"><a href="#怎麼用？" class="headerlink" title="怎麼用？"></a>怎麼用？</h2><p>超級方便，你只要輸入 <code>z [一點線索]</code>，就可以跳到你之前造訪過的目錄！</p>
<p>以最一開始的情境為例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── A</span><br><span class="line">│   └── 123</span><br><span class="line">│       └── abc</span><br><span class="line">│           └── wow</span><br><span class="line">│               └── wow.txt</span><br><span class="line">└── B</span><br><span class="line">    └── 123</span><br><span class="line">        └── abc</span><br><span class="line">            └── hello</span><br><span class="line">                └── hello.txt</span><br></pre></td></tr></table></figure>

<p>你今天在 <code>./B/123/abc/hello/</code>，想快速切換到曾經造訪過的 <code>./A/123/abc/wow/</code>，你只要 <code>z wow</code>，神奇的事情就會發生在你眼前 🥳（你真的就會 wow）</p>
<p>啊如果想了解更多使用方式，像是怎麼移除掉之前造訪過目錄的紀錄，避免切換到一些你根本不想去的地方，可以下 <code>z -h</code> 來看它的使用說明～</p>
<br>
是不是真的很方便呢？]]></content>
  </entry>
</search>
