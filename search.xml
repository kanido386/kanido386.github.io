<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>用 Pure Data 打造吉他效果器</title>
    <url>/2021/01/asp-final-project/</url>
    <content><![CDATA[<p><a href="/2021/01/asp-final-project"><img src="https://images.unsplash.com/photo-1560849898-d058f7d93b23?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=2687&q=80" style="width:50vw;" /></a></p>
<!-- <img src="1.jpeg" style="width:50vw;" /> -->

<p>大三上修「互動式音訊處理導論」時所做的期末專題。</p>
<span id="more"></span>

<h2 id="特別感謝"><a href="#特別感謝" class="headerlink" title="特別感謝"></a>特別感謝</h2><p>首先，非常幸運能夠和來自越南的朋友 Son Tran 同一組，沒有他，就不會有這段有趣的旅程！<br>（他自彈自唱真的超好聽的，而且竟然還會做電子音樂！）<br>（在這邊偷偷放他的 YouTube channel: <a href="https://www.youtube.com/channel/UCm6tcNSqAYVqZpA8pm4-T5A" target="_blank">MadSon TR</a> 🎧）</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>強烈建議搭配後面的說明聽會比較知道在做什麼 😏</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/7F14-C7rrmg" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h2 id="課程內容簡介"><a href="#課程內容簡介" class="headerlink" title="課程內容簡介"></a>課程內容簡介</h2><p>這學期修了電機系張文輝教授開的<a href="https://timetable.nctu.edu.tw/?r=main/crsoutline&Acy=109&Sem=1&CrsNo=1078&lang=zh-tw" target="_blank">互動式音訊處理導論</a>，接觸到很多很酷的玩意兒：</p>
<ol>
<li>學一點聲音訊號處理的概念以後，用 MATLAB 做簡單的分析與處理</li>
<li>認識<a href="https://zh.wikipedia.org/wiki/%E5%90%88%E6%88%90%E5%99%A8" target="_blank">合成器</a>的基本運作原理之後，用線上數位音樂工作站 <a href="http://www.audiosauna.com/" target="_blank">AudioSauna</a> 自製音色並用新音色做一首簡單的曲子</li>
<li><strong><span style="color:black;">（本篇主角！）使用視覺化程式語言 <a href="http://puredata.info/" target="_blank">Pure Data</a> 做一些簡單的音訊處理</span></strong></li>
<li>用音訊編輯軟體 Adobe Audition 消除歌曲中的人聲</li>
<li>用助教訓練好的 HMM 模型，做音樂的音值識別、拍號判定、樂譜追蹤，並為一段只有主旋律的譜生成和弦伴奏</li>
<li>用一套叫 HTK 的自由軟體做一個簡單的歌手辨識系統</li>
<li>認識「動態時間伸縮」的原理以後，直接拿助教寫好的 C 程式來做一個簡單的歌曲查詢系統</li>
</ol>
<hr>
<h2 id="動機"><a href="#動機" class="headerlink" title="動機"></a>動機</h2><p>期末的時候必須選個相關主題來發展成一個專題。<br>我們原本打算是要做 source separation，也就是一種能夠把完整樂曲分離出 bass、鋼琴、吉他、鼓等獨立音訊的技術。<br>但後來想說，既然之前實驗課有接觸過 Pure Data，再加上我們都有玩過吉他效果器，所以我們就想結合兩者，並兼合我們的創意，打造屬於我們的吉他效果器！（而且還不用花錢）</p>
<h2 id="實作方法"><a href="#實作方法" class="headerlink" title="實作方法"></a>實作方法</h2><h3 id="找相關資料"><a href="#找相關資料" class="headerlink" title="找相關資料"></a>找相關資料</h3><p><em><span style="color:gray;">（研究別⼈是如何實作吉他效果器的）</span></em><br>我們在查資料的過程中找到了 <a href="https://guitarextended.wordpress.com/audio-effects-for-guitar-with-pure-data/" target="_blank">Audio effects for guitar with Pure Data</a> 這一篇文章，裡頭有很多吉他效果器的實作及實際用吉他去測試效果器的 demo！<br>只能說，網路世界無奇不有，這聽起來偏冷門的東西居然也找得到資源，酷斃了 😎</p>
<h3 id="吸收及內化"><a href="#吸收及內化" class="headerlink" title="吸收及內化"></a>吸收及內化</h3><p><em><span style="color:gray;">（將那些⽅法盡可能內化成我們⾃⼰的能⼒）</span></em><br>像海綿一樣，一直吸收、一直吸收，去讀懂為什麼他要這樣寫而不是那樣寫。<br>如此一來，不僅讓我們更清楚該如何開始，也讓我們更加了解每個效果器的運作原理，一舉兩得！</p>
<h3 id="著手打造"><a href="#著手打造" class="headerlink" title="著手打造"></a>著手打造</h3><p><em><span style="color:gray;">（利⽤我們對於吉他效果器的⾒解，打造屬於我們的吉他效果器）</span></em><br>其實大部分還是參考那篇文章的做法居多xD<br>雖然是這樣，但我們在過程中也更加熟悉了 Pure Data 的操作，若之後想嘗試同樣是視覺化程式語言但較為熱門的 Max/MSP，相信很快就能上手了吧！</p>
<h3 id="嘗試優化"><a href="#嘗試優化" class="headerlink" title="嘗試優化"></a>嘗試優化</h3><p><em><span style="color:gray;">（考慮⽤ Pure Data Externals 的⽅式讓界⾯看起來更加簡潔）</span></em><br>不過後來我們找到了 <a href="http://write.flossmanuals.net/pure-data/subpatches/" target="_blank">Subpatch</a> 的做法，它其實就是 Pure Data 界的 Function，可以自己定義在一個區塊當中你的 input／output 是什麼、要做哪些操作。<br></p>
<p>什麼意思？<br></p>
<p>比方說你現在不得不設計一部機器，需要餵給它的是好幾個單元的上課投影片和好多年份的考古題，你期望從這部機器當中獲得的僅僅是一張寫著好看分數的考卷，但過程中你卻得犧牲人生無數的可能性⋯⋯<br></p>
<p>為了解釋 Function 的概念，扯遠了。<br></p>
<p>拉回來。<br></p>
<p>利用 Subpatch，可以方便我們管理圖形化的程式，除了能讓畫面看起來比較乾淨之外，也可以讓整個程式邏輯以及架構更有條理！</p>
<h3 id="測試成品"><a href="#測試成品" class="headerlink" title="測試成品"></a>測試成品</h3><p><em><span style="color:gray;">（實際拿吉他測試我們的效果器，若有可以再改進的地⽅，就再改進）</span></em><br>星期日 (2021.01.03) 晚上，我們去九舍地下二樓試我們的吉他效果器。<br>提個外話，那邊的裝潢真的超棒的，走的是酒吧風、殘響效果又棒，若有酒保為我們調製上等的雞尾酒那就更完美了！</p>
<p>再拉回來。<br></p>
<p>原本我們是不抱持著什麼期待啦，想說市面上賣的效果器都不便宜，啊我們只不過是用程式語言來模擬出效果器，聲音是能有多好？<br>沒想到！當我們打開「Wha-wha」的效果，Son Tran 刷了第一個和弦以後，我們都被嚇到了！那令人驚豔的聲響效果，真的會讓人誤以為此時此刻、這個地方有什麼專業樂團正在現場演出！</p>
<p>我們從七點半一路弄到差不多快十一點，過程中調整了很多次程式，為的是讓聲音更符合我們的需求以及讓介面看起來比較不會那麼凌亂（雖然介面看起來還是很「科技風」就是了 😂）</p>
<hr>
<h2 id="結果分析"><a href="#結果分析" class="headerlink" title="結果分析"></a>結果分析</h2><p>廢話不多說，直接給大家看我們的程式圖吧！</p>
<h3 id="整體架構"><a href="#整體架構" class="headerlink" title="整體架構"></a>整體架構</h3><figure>
  <!-- <img src="https://i.imgur.com/5GYRnqu.png" style="width:43vw;" /> -->
  <img src="2.png" style="width:43vw;" />
  <figcaption>使用者介面</figcaption>
</figure>

<ul>
<li><code>pd 某某某</code> 的小方塊就是前面所說的 Subpatch，除了 <code>pd file</code> 是用來開啟音檔並加以讀取的功能以外，其他的 <code>pd 某某某</code> 就都是吉他效果器了！</li>
<li>吉他效果器左邊一排的正方形框框是開關（Pure Data 稱它為 Toggle），打開代表說我要讓這個效果器處理我們的聲音，關掉的話就表示我們要讓聲音直接通過，不處理，即 <code>output = input</code></li>
<li><code>adc~</code> (類比轉數位) 是我們的聲音輸入，我們選擇用錄音介面；<code>dac~</code> (數位轉類比) 則是輸出，不管是筆電內建的輸出或者是音箱都行，我們選擇用音箱，這樣聽起來比較震撼 😈</li>
<li><code>adc~</code> 和 <code>dac~</code> 後面的抖抖線意思是，通過這個有抖抖線的 Object 以後，它 output 出來的東西會是可以畫成波形圖的「訊號」，圖中黑線（Pure Data 稱它為 thin cable）代表控制資料的傳輸，藍線（Pure Data 稱它為 thick cable）代表訊號的傳輸</li>
<li>圖中一條一條的 slider 就是用來調整效果器參數的控制器（最下面的 slider 用來調控音量），藉由拉動 slider，就可以聽到聲音有趣的變化！（不然一成不變實在無趣）</li>
<li>後來我們決定把其他效果器的參數 slider 放進效果器 Subpatch 裡面，不然介面看起來會有點亂</li>
<li>中間偏右看起來像是按鈕的東西（Pure Data 稱它為 Bang），其功能是把參數設定到我們預設好的預設值，為的是方便回到預設值（有說跟沒說一樣），按下 Bang 以後，<code>s reset</code> (send) 就會幫我們把 Bang 的訊號傳到 <code>r reset</code> (receive) 的 output 給有數字的 Message，繼而引發更動 slider 的數值，於是乎，效果器的參數就回到預設值啦！</li>
</ul>
<h3 id="Subpatch-小介紹"><a href="#Subpatch-小介紹" class="headerlink" title="Subpatch 小介紹"></a>Subpatch 小介紹</h3><figure>
  <!-- <img src="https://i.imgur.com/rPCYoPY.png" style="width:33vw;" /> -->
  <img src="3.png" style="width:33vw;" />
  <figcaption>用 pd file 來簡單介紹</figcaption>
</figure>

<ul>
<li>剛剛說過，Subpatch 是 Pure Data 界的 Function！</li>
<li><code>inlet</code> 就是 input，<code>outlet</code> 就是 output</li>
<li>紅色圈起來的部分就是在區別究竟 input／output 是控制資料還是訊號</li>
<li>input／output 之間的東西就是一些操作，本例在做打開音檔並讀取的動作</li>
<li>有了 Subpatch 的協助以後，開發的過程就更加愉悅了呢！</li>
</ul>
<h3 id="Distortion-破音效果器"><a href="#Distortion-破音效果器" class="headerlink" title="Distortion 破音效果器"></a>Distortion 破音效果器</h3><p>把訊號的振幅拉大再擷取一小部分，聽起來就會有種失真的破音效果，<a href="https://youtu.be/7F14-C7rrmg?t=77" target="_blank">像這樣</a>。</p>
<figure>
  <!-- <img src="https://i.imgur.com/ziLZyCF.png" style="width:33vw;" /> -->
  <img src="4.png" style="width:33vw;" />
  <figcaption>Distortion 破音效果器</figcaption>
</figure>

<h3 id="Tremolo-顫音效果器"><a href="#Tremolo-顫音效果器" class="headerlink" title="Tremolo 顫音效果器"></a>Tremolo 顫音效果器</h3><p>用一個低頻振盪器 (LFO) 來調變音量，讓音量呈現忽大忽小的效果，<a href="https://youtu.be/7F14-C7rrmg" target="_blank">聽起來像這樣</a>。</p>
<figure>
  <!-- <img src="https://i.imgur.com/esTVil5.png" style="width:33vw;" /> -->
  <img src="5.png" style="width:33vw;" />
  <figcaption>Tremolo 顫音效果器</figcaption>
</figure>

<h3 id="Vibrato-抖音效果器"><a href="#Vibrato-抖音效果器" class="headerlink" title="Vibrato 抖音效果器"></a>Vibrato 抖音效果器</h3><p>用一個低頻振盪器 (LFO) 來調變頻率，讓音高呈現忽高忽低的效果，<a href="https://youtu.be/7F14-C7rrmg?t=30" target="_blank">聽起來像這樣</a>。</p>
<figure>
  <!-- <img src="https://i.imgur.com/O0g8FsR.png" style="width:38vw;" /> -->
  <img src="6.png" style="width:38vw;" />
  <figcaption>Vibrato 抖音效果器</figcaption>
</figure>

<h3 id="Wha-wha-娃娃效果器"><a href="#Wha-wha-娃娃效果器" class="headerlink" title="Wha-wha 娃娃效果器"></a>Wha-wha 娃娃效果器</h3><p>細節頗複雜就不解釋了，其原理跟頻率有關。那為什麼叫娃娃效果器呢？<a href="https://youtu.be/7F14-C7rrmg?t=123" target="_blank">聽聽看就知道了</a>xD</p>
<figure>
  <!-- <img src="https://i.imgur.com/n7iksIE.png" style="width:38vw;" /> -->
  <img src="7.png" style="width:38vw;" />
  <figcaption>Wha-wha 娃娃效果器</figcaption>
</figure>

<h3 id="Delay-延遲效果器"><a href="#Delay-延遲效果器" class="headerlink" title="Delay 延遲效果器"></a>Delay 延遲效果器</h3><p>上面的 slider 控制聲音衰減的快慢（這就是為什麼要乘上一個介於 0 到 1 之間不包含 1 的值），下面的 slider 則是控制多久重複一次（不過每重複一次，聲音會越來越小聲），<a href="https://youtu.be/7F14-C7rrmg?t=169" target="_blank">讓我們來聽聽看它的效果吧</a>！</p>
<figure>
  <!-- <img src="https://i.imgur.com/922G06G.png" style="width:38vw;" /> -->
  <img src="8.png" style="width:38vw;" />
  <figcaption>Delay 延遲效果器</figcaption>
</figure>

<h3 id="Reverb-殘響效果器"><a href="#Reverb-殘響效果器" class="headerlink" title="Reverb 殘響效果器"></a>Reverb 殘響效果器</h3><p>一種營造空間感的效果器。我們直接拿 Pure Data 內建的 <code>freeverb~</code> 來用，<a href="https://youtu.be/7F14-C7rrmg?t=210" target="_blank">聽起來像這樣</a>。</p>
<figure>
  <!-- <img src="https://i.imgur.com/7Sjp3w0.png" style="width:38vw;" /> -->
  <img src="9.png" style="width:38vw;" />
  <figcaption>Reverb 殘響效果器</figcaption>
</figure>

<h3 id="Chorus-合聲效果器"><a href="#Chorus-合聲效果器" class="headerlink" title="Chorus 合聲效果器"></a>Chorus 合聲效果器</h3><p>製造一個和原來聲音有微小時間差和頻率差的聲音，然後再同時放。<br>就像是一群人在合唱的時候，即使是唱同個旋律，也會因為進來的時間點有微小的差異、各自的不同音準，而形成一種亂中有序的感覺。<a href="https://youtu.be/7F14-C7rrmg?t=357" target="_blank">聽聽看吧</a>！</p>
<figure>
  <!-- <img src="https://i.imgur.com/rmj9qr6.png" style="width:38vw;" /> -->
  <img src="10.png" style="width:38vw;" />
  <figcaption>Chorus 合聲效果器</figcaption>
</figure>

<hr>
<h2 id="參考來源"><a href="#參考來源" class="headerlink" title="參考來源"></a>參考來源</h2><p><a href="https://guitarextended.wordpress.com/audio-effects-for-guitar-with-pure-data/" target="_blank">Audio effects for guitar with Pure Data</a></p>
<h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>前面其實已經講得差不多了，就用三個字來描述吧：「真有趣！」<br>能創造出一個可以用五官感受的東西真的超有成就感的，很享受那個過程 🏝</p>
<h2 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h2><p>感謝教授開設這一門很有意思的課，感謝三位助教每堂實驗課的帶領，<br>並再次感謝能與 Son Tran 合作了這整個學期，沒有你們，就沒有這一切！<br><br><br>希望讀完這篇文章的您能夠有所收穫，我們下篇文見啦 😃</p>
]]></content>
      <tags>
        <tag>音訊處理</tag>
        <tag>吉他</tag>
        <tag>效果器</tag>
        <tag>Pure Data</tag>
        <tag>交大</tag>
        <tag>課程</tag>
        <tag>專題</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Algorithmia 部署 ML Models</title>
    <url>/2021/07/algorithmia-ml-models/</url>
    <content><![CDATA[<p><a href="/2021/07/algorithmia-ml-models"><img src="https://images.unsplash.com/photo-1508610023868-3ba76d5122ba?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1338&q=80" style="width:50vw;" /></a></p>
<!-- <img src="0.jpeg" style="width:50vw;" /> -->

<p>這樣就不必在自己的 server 上裝很肥的套件了！只需要 call API 😎</p>
<span id="more"></span>

<p>本篇用簡單的方式來記錄一下好了，這樣之後需要的話，可以快速想起來當初是怎麼用的！</p>
<hr>
<h1 id="碎碎念一下"><a href="#碎碎念一下" class="headerlink" title="碎碎念一下"></a>碎碎念一下</h1><h2 id="我為何研究這個？"><a href="#我為何研究這個？" class="headerlink" title="我為何研究這個？"></a>我為何研究這個？</h2><p>2021 年的 7/1~7/3 參加了一場黑客松，我們這組其中有項 feature 要做：使用者傳皮膚照片給 LINE Bot，我們要把 model 預測出來的結果回傳給使用者。（預測是否僅是黑色素，或是有癌性的症狀）</p>
<p>我們當中的一個組員 Justin 把 model 的部分搞定了，但問題來了，該怎麼把 model 的部分結合進我們的 Flask 後端呢？</p>
<p>原本是想說，就直接在 pipenv 的環境下裝 tensorflow-cpu，但因為我們用來部署後端的 Heroku 免費帳戶有空間限制，這麼做是不可行的，除非花錢升級，但我覺得 CP 值不高⋯⋯</p>
<p>現在回過頭想，真的是非常感謝 Justin 對於這項 feature 的堅持，我們原本想說乾脆這個部分直接用模擬的算了，反正黑客松比較重要的是創新的 idea。倘若我們放棄掉了那項 feature，我看，這篇文應該也不會誕生，我也依然不知道該用什麼其他方法部署 ML models！</p>
<p>所以說，提個外話，人生就是這樣，你不去試，你永遠不會知道⋯⋯（詞窮了，反正你懂我意思xD）</p>
<h2 id="我怎麼找到的？"><a href="#我怎麼找到的？" class="headerlink" title="我怎麼找到的？"></a>我怎麼找到的？</h2><p>我忘記我下什麼關鍵詞了，好像是「deploy ml model free」吧(?)<br>找到了這一篇：<br><a href="https://www.freecodecamp.org/news/deploy-your-machine-learning-models-for-free/">How to Deploy a Machine Learning Model for Free – 7 ML Model Deployment Cloud Platforms</a></p>
<p>第一個就是 <a href="https://algorithmia.com/">Algorithmia</a> 了，也沒想太多，就立馬註冊來試試。</p>
<hr>
<h1 id="Server-端"><a href="#Server-端" class="headerlink" title="Server 端"></a>Server 端</h1><p>我是參考上面提到的那一篇推薦的「<a href="https://www.freecodecamp.org/news/deploy-ml-model-to-production-as-api/">How to Deploy your NLP Model to Production as an API with Algorithmia</a>」，寫得很好，不過我還是簡單記錄一下，讓之後能更快上手：</p>
<h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><h3 id="寫好-model（或-function）"><a href="#寫好-model（或-function）" class="headerlink" title="寫好 model（或 function）"></a>寫好 model（或 function）</h3><p>就是寫好一個 input 餵給它，它能 output 出東西的 model。<br>這個部分，先在自己的環境上完成吧！（或 <a href="https://colab.research.google.com/notebooks/intro.ipynb">Google Colab</a> 之類的雲端環境）</p>
<p>為何我還說「或 function」呢？因為如果拿 <a href="https://algorithmia.com/">Algorithmia</a> 做非 ML 的 API 好像也行，只是就有點殺雞用牛刀的感覺了。</p>
<h3 id="註冊-Algorithmia-帳戶"><a href="#註冊-Algorithmia-帳戶" class="headerlink" title="註冊 Algorithmia 帳戶"></a>註冊 Algorithmia 帳戶</h3><p><a href="https://teams.algorithmia.com/signup">https://teams.algorithmia.com/signup</a></p>
<h3 id="Create-一個新的-Algorithm"><a href="#Create-一個新的-Algorithm" class="headerlink" title="Create 一個新的 Algorithm"></a>Create 一個新的 Algorithm</h3><p>Home → Create New → Algorithm → 填一填 → Create New Algorithm<br>這樣就創建好囉！</p>
<h3 id="上傳靜態檔案"><a href="#上傳靜態檔案" class="headerlink" title="上傳靜態檔案"></a>上傳靜態檔案</h3><p>像是 pre-trained 好的 model 或者是 csv 檔之類的靜態檔案。<br>Data Sources → My Hosted Data → New Collection → 填一填 → Create Collection → 你會的<br>上傳完以後，檔案右側會出現「垂直的三個點點」，點開後有個「Copy Path」，複製起來，待會會需要用到，其格式為：<code>data://:username/:collection/:filename</code></p>
<h2 id="把-code-加進去"><a href="#把-code-加進去" class="headerlink" title="把 code 加進去"></a>把 code 加進去</h2><p>Algorithms → Source Code → 把之前寫好的 code 加進去<br>咦？直接複製貼上就行了嗎？不！有些要點，我把它列下來：</p>
<h3 id="import-套件"><a href="#import-套件" class="headerlink" title="import 套件"></a>import 套件</h3><p>套件直接 import 進來沒問題，要記得在上方的 <code>DEPENDENCIES</code> 加進套件，這樣在 build 的時候，環境就會幫我們裝好那些套件囉！<br>（套件名稱請參考 <a href="https://pypi.org/">PyPI</a>）</p>
<h3 id="存取靜態檔案"><a href="#存取靜態檔案" class="headerlink" title="存取靜態檔案"></a>存取靜態檔案</h3><p>剛上傳的靜態檔案該怎麼加進來呢？這個部分花了我不少時間 debug，後來才發現，必須要用到 Algorithmia 這個套件才能存取！</p>
<p>像我原本以為是這樣寫：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model_file = <span class="string">&#x27;data://:username/:collection/:filename&#x27;</span></span><br><span class="line">model.load_weights(model_file)</span><br></pre></td></tr></table></figure>

<p>後來才知道應該要這樣寫：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">client = Algorithmia.client()</span><br><span class="line">file_path = <span class="string">&#x27;data://:username/:collection/:filename&#x27;</span></span><br><span class="line">model_file = client.file(file_path).getFile().name</span><br><span class="line">model.load_weights(model_file)</span><br></pre></td></tr></table></figure>

<h3 id="function"><a href="#function" class="headerlink" title="function"></a>function</h3><p>function 的部分，也可以直接把它當成一般的 function 來寫，但有一個 function 比較特別，它叫做 <code>apply(input)</code>。</p>
<p>它是什麼？可以把它想成，它就是 C++ 裡面的 main function，而實際上，它就是能讓外部 call 它的 interface！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># API calls will begin at the apply() method, with the request body passed as &#x27;input&#x27;</span></span><br><span class="line"><span class="comment"># For more details, see algorithmia.com/developers/algorithm-development/languages</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply</span>(<span class="params"><span class="built_in">input</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">input</span>)</span><br></pre></td></tr></table></figure>

<p>所以說，其他的 function 都只是輔助，最後要把那些 function 放進 <code>apply(input)</code> 裡面才有作用哦！</p>
<h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><p><code>input</code> 這個 parameter 的格式呢？該怎麼去處理呢？注意哦，<code>apply()</code> 好像只能有一個 parameter，所以如果想傳很多 parameter 給它，可以把 <code>input</code> 當成一個 dictionary 來看：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 外部傳進來的 input 格式</span></span><br><span class="line">&#123; <span class="string">&quot;food&quot;</span>: <span class="string">&quot;草莓果醬&quot;</span>, <span class="string">&quot;option&quot;</span>: <span class="number">2</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 內部處理方式</span></span><br><span class="line">food = <span class="built_in">input</span>[<span class="string">&#x27;food&#x27;</span>]</span><br><span class="line">option = <span class="built_in">input</span>[<span class="string">&#x27;option&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>這是我目前想到最好的解決辦法，或許還有更好的方式處理這部分(?)</p>
<h2 id="發布"><a href="#發布" class="headerlink" title="發布"></a>發布</h2><p>BUILD → 等它處理一段時間 → 可以在下方的 Console 直接輸入 input 測試一下，像是 <code>&#123; &quot;food&quot;: &quot;草莓果醬&quot;, &quot;option&quot;: 2 &#125;</code> → PUBLISH → 後面就照著步驟走</p>
<h1 id="Client-端"><a href="#Client-端" class="headerlink" title="Client 端"></a>Client 端</h1><p>Algorithms → Overview → 往下滑有個 Install and Use → 照著上面做就行囉！<br>大概會長這樣：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Algorithmia</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = &#123;</span><br><span class="line">  <span class="string">&quot;food&quot;</span>: <span class="string">&quot;草莓果醬&quot;</span>,</span><br><span class="line">  <span class="string">&quot;option&quot;</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">client = Algorithmia.client(<span class="string">&#x27;&lt;default-key&gt;&#x27;</span>)</span><br><span class="line">algo = client.algo(<span class="string">&#x27;&lt;username&gt;/&lt;algorithm&gt;/&lt;version&gt;&#x27;</span>)</span><br><span class="line">algo.set_options(timeout=<span class="number">300</span>) <span class="comment"># optional</span></span><br><span class="line"><span class="built_in">print</span>(algo.pipe(<span class="built_in">input</span>).result)</span><br></pre></td></tr></table></figure>

<p>就是這麼簡單 😎</p>
<br>
希望讀完這篇文章的您能夠有所收穫，我們下篇文見啦 😃]]></content>
      <tags>
        <tag>交大</tag>
        <tag>Machine Learning</tag>
        <tag>Deploy</tag>
        <tag>API</tag>
        <tag>Python</tag>
        <tag>黑客松</tag>
      </tags>
  </entry>
  <entry>
    <title>端午節立蛋</title>
    <url>/2021/06/dragon-boat-festival/</url>
    <content><![CDATA[<p><a href="/2021/06/dragon-boat-festival"><img src="https://images.unsplash.com/photo-1586975471851-06fbf8453bda?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1500&q=80" style="width:50vw;" /></a></p>
<!-- <img src="0.jpeg" style="width:50vw;" /> -->

<span id="more"></span>

<h3 id="今年戰績"><a href="#今年戰績" class="headerlink" title="今年戰績"></a>今年戰績</h3><p>11:55～12:45 共 50 分鐘，立了 12 顆蛋。</p>
<h3 id="蛋"><a href="#蛋" class="headerlink" title="蛋"></a>蛋</h3><p><img src="1.jpg"></p>
<h3 id="面對陽光陰影就在背後蛋"><a href="#面對陽光陰影就在背後蛋" class="headerlink" title="面對陽光陰影就在背後蛋"></a>面對陽光陰影就在背後蛋</h3><p><img src="2.jpg"></p>
<h3 id="流星雨蛋"><a href="#流星雨蛋" class="headerlink" title="流星雨蛋"></a>流星雨蛋</h3><p><img src="3.jpg"></p>
<h3 id="即將進洞的高爾夫球蛋"><a href="#即將進洞的高爾夫球蛋" class="headerlink" title="即將進洞的高爾夫球蛋"></a>即將進洞的高爾夫球蛋</h3><p><img src="4.jpg"></p>
<h3 id="翅膀蛋"><a href="#翅膀蛋" class="headerlink" title="翅膀蛋"></a>翅膀蛋</h3><p><img src="5.jpg"></p>
<p><img src="6.gif"></p>
<br>
今天的分享就到這邊，我們下篇文見吧 😃]]></content>
  </entry>
  <entry>
    <title>用 Hexo 及 GitHub Pages 打造部落格</title>
    <url>/2021/06/hexo-github-pages-blog/</url>
    <content><![CDATA[<p><a href="/2021/06/hexo-github-pages-blog"><img src="https://images.unsplash.com/photo-1600585154340-be6161a56a0c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1500&q=80" style="width:50vw;" /></a></p>
<!-- <img src="0.jpeg" style="width:50vw;" /> -->

<p>此篇教學文仿寫自「<a href="https://yogapan.github.io/">小蛇蛇的筆記</a>」的「<a href="https://yogapan.github.io/2017/08/11/%E7%94%A8Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA%E9%83%A8%E8%90%BD%E6%A0%BC/">用Hexo + Github Pages搭建個人部落格</a>」</p>
<p>除了是為了學習怎麼用 Hexo 及 GitHub Pages 打造屬於自己的部落格之外，也希望在過程中看看別人是怎樣寫技術文章的，並從中得到收穫。</p>
<span id="more"></span>

<h2 id="用-npm-安裝-Hexo"><a href="#用-npm-安裝-Hexo" class="headerlink" title="用 npm 安裝 Hexo"></a>用 npm 安裝 Hexo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<h2 id="裝完來測試一下"><a href="#裝完來測試一下" class="headerlink" title="裝完來測試一下"></a>裝完來測試一下</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>居然噴出錯誤 <code>TypeError: line.matchAll is not a function</code></p>
<p>google「<code>上面的錯誤訊息</code> hexo」找到了<a href="https://stackoverflow.com/questions/67516168/i-just-installed-hexo-static-site-generator-on-debian-and-ran-hexo-server-to-see">這篇</a><br>原來是因為 <code>12.0.0</code> 版以後的 Node.js 才有 <code>String.matchAll()</code> 這個 function 啊！<br>那就來更新 Node.js 吧！</p>
<h2 id="更新-Node-js"><a href="#更新-Node-js" class="headerlink" title="更新 Node.js"></a>更新 Node.js</h2><p>google「update nodejs」找到了<a href="https://stackoverflow.com/questions/10075990/upgrading-node-js-to-latest-version">這篇</a>，他是這麼做的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install n -g  <span class="comment"># n: Interactively Manage Your Node.js Versions</span></span><br><span class="line">n stable          <span class="comment"># upgrade Node.js to the latest stable version</span></span><br><span class="line">n latest          <span class="comment"># upgrade Node.js to the latest version</span></span><br></pre></td></tr></table></figure>

<h2 id="更新-Node-js-後再次測試"><a href="#更新-Node-js-後再次測試" class="headerlink" title="更新 Node.js 後再次測試"></a>更新 Node.js 後再次測試</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>出現下面的訊息就代表成功囉！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>

<p>打開瀏覽器，輸入 <code>localhost:4000</code></p>
<p><img src="1.png"></p>
<p>讚啦！我們的部落格誕生啦！</p>
<h2 id="看一下-blog-裡面的目錄結構"><a href="#看一下-blog-裡面的目錄結構" class="headerlink" title="看一下 blog 裡面的目錄結構"></a>看一下 blog 裡面的目錄結構</h2><p>用 <code>tree -C -I node_modules</code> 這個指令印一下它的結構：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.landscape.yml</span><br><span class="line">├── _config.yml</span><br><span class="line">├── db.json</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">│   ├── draft.md</span><br><span class="line">│   ├── page.md</span><br><span class="line">│   └── post.md</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">│   └── _posts</span><br><span class="line">│       └── hello-world.md</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<p>不懂欸怎麼辦？不用怕！<a href="https://hexo.io/docs/setup">官方文檔</a>寫得超清楚，設定的時候有不懂的地方再去查就行囉！</p>
<p>補充說明：</p>
<ul>
<li><code>-C</code> 是為了讓印出來的內容有顏色做區別，看起來更清楚明瞭</li>
<li><code>-I &lt;pattern&gt;</code> 則是為了排除不想要印出來的部分</li>
<li>tree 還有很多種 options 可以設定，詳細可以用 <code>man tree</code> 這個指令去了解</li>
</ul>
<h2 id="更換主題"><a href="#更換主題" class="headerlink" title="更換主題"></a>更換主題</h2><p>到<a href="https://hexo.io/themes/">這裡</a>挑選喜歡的主題吧！</p>
<p><img src="2.png"></p>
<p>右上方有個「Search」欄位，輸入 keyword 以後可以快速找到目標主題哦！<br>如下：</p>
<p><img src="3.png"></p>
<p>接下來就依照選定主題的文檔進行安裝啦！<br>（不見得每個主題都有清楚的安裝教學，可能要自己研究一下）<br>如果跟我一樣是選「<a href="https://theme-next.js.org/docs/getting-started/">NexT</a>」這個主題，可以照下面的步驟安裝～</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>修改一下 <code>_config.yml</code> 這個檔案 Extensions 的部分，把 theme 改成新主題：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<p>再用 <code>hexo server</code> 測試看看。</p>
<p><img src="4.png"></p>
<p>哇嗚～<br>成功了！We did it!</p>
<p>主題更換完畢～</p>
<h2 id="更多關於-NexT-的設定"><a href="#更多關於-NexT-的設定" class="headerlink" title="更多關於 NexT 的設定"></a>更多關於 NexT 的設定</h2><p>到 <code>themes/next/_config.yml</code> 去做設定吧！</p>
<h3 id="更改其他樣式"><a href="#更改其他樣式" class="headerlink" title="更改其他樣式"></a>更改其他樣式</h3><p><a href="https://github.com/theme-next/awesome-next#live-preview">這裡</a>有 live preview 可以參考。<br>喜歡哪一款，去掉那一行的註解就行囉！</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>

<h3 id="code-highlight-樣式"><a href="#code-highlight-樣式" class="headerlink" title="code highlight 樣式"></a>code highlight 樣式</h3><p>為什要有 code highlight？<br>因為有了 code highlight，在文章上面分享 code 就可以被美美地呈現😀<br>我個人是比較喜歡 normal 啦～</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Code Highlight theme</span></span><br><span class="line"><span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line"><span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line"><span class="attr">highlight_theme:</span> <span class="string">normal</span></span><br></pre></td></tr></table></figure>

<h3 id="其他設定"><a href="#其他設定" class="headerlink" title="其他設定"></a>其他設定</h3><p><code>themes/next/_config.yml</code> 裡面其實有蠻多註解可以協助我們做設定。<br>如果再有不清楚的地方，相信丟給 google 大神應該都可以順利解決～</p>
<h2 id="設定作者相關資訊"><a href="#設定作者相關資訊" class="headerlink" title="設定作者相關資訊"></a>設定作者相關資訊</h2><h3 id="設置頭像"><a href="#設置頭像" class="headerlink" title="設置頭像"></a>設置頭像</h3><ol>
<li><code>mkdir source/images</code></li>
<li>頭像照片放進去</li>
<li>到 <code>themes/next/_config.yml</code>（以下稱為 theme 的 config 檔）設定 avatar 的路徑，如下：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.jpg</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>這樣就完成頭像的設置囉！</p>
<h3 id="更改網站資訊"><a href="#更改網站資訊" class="headerlink" title="更改網站資訊"></a>更改網站資訊</h3><p>修改 <code>_config.yml</code>（跟 theme 的 config 是不一樣的檔案哦，以下稱為 site 的 config 檔）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">卡尼多隨筆</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;認識自我 • 感受世界 • 創造價值&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">卡尼多</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-tw</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/Taipei&#x27;</span>   <span class="comment"># 不是 TW 哦！</span></span><br></pre></td></tr></table></figure>

<p>每個 setting 分別代表什麼意思可以參閱 Hexo 的<a href="https://hexo.io/docs/configuration.html">官方文檔</a>。</p>
<h3 id="開啟社群帳號連結"><a href="#開啟社群帳號連結" class="headerlink" title="開啟社群帳號連結"></a>開啟社群帳號連結</h3><p>到 theme 的 config 檔做設定，把想要開啟的連結都去掉註解吧！<br>（或是照著格式自己新增其他連結）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/kanido386</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:kanido386@gmail.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br></pre></td></tr></table></figure>

<h3 id="新增「關於我」的頁面"><a href="#新增「關於我」的頁面" class="headerlink" title="新增「關於我」的頁面"></a>新增「關於我」的頁面</h3><ol>
<li><p><code>hexo new page &quot;about&quot;</code></p>
</li>
<li><p>修改 theme 的 config 檔，去掉 menu 底下 about 那一行的註解：</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br></pre></td></tr></table></figure></li>
<li><p>編輯 <code>source/about/index.md</code></p>
</li>
<li><p>用 <code>hexo server</code> 測試看看</p>
</li>
</ol>
<p>如果噴出 <code>TypeError: Cannot read property &#39;utcOffset&#39; of null</code> 這個錯誤，代表說上面在填時區的時候可能有填錯，像我原本是把時區填成 <code>TW</code> 😂</p>
<h2 id="發表文章"><a href="#發表文章" class="headerlink" title="發表文章"></a>發表文章</h2><h3 id="新增一篇文章"><a href="#新增一篇文章" class="headerlink" title="新增一篇文章"></a>新增一篇文章</h3><ol>
<li><p>先到 site 的 config 檔做個設定：</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p> 如此一來，每當新增一個 post 的時候，Hexo 會自動幫你在 <code>source/_posts/</code> 底下新增一個跟 post 同名的 <a href="https://hexo.io/docs/asset-folders">asset folder</a>！<br> 這樣放圖片之類的靜態檔案會比較方便，看起來也會比較有條理。</p>
</li>
<li><p>輸入 <code>hexo new post &quot;&lt;title&gt;&quot;</code> 並編輯</p>
</li>
<li><p>加圖片進文章裡面</p>
<ol>
<li>先把圖片放進 <code>source/_posts/&lt;title&gt;/</code> 裡</li>
<li>post 裡面加上 <code>&#123;% asset_img (img_name) %&#125;</code> 或是用其他像是 <code>![](img_name)</code> 的方式（<code>img_name</code> 包含副檔名哦）</li>
</ol>
</li>
<li><p>這樣文章裡面就有圖片囉 🎉</p>
</li>
</ol>
<h3 id="替文章加上標籤"><a href="#替文章加上標籤" class="headerlink" title="替文章加上標籤"></a>替文章加上標籤</h3><p>如果之前已經建了 tags 頁面，就直接跳到步驟 4. 吧！</p>
<ol>
<li><p><code>hexo new page &quot;tags&quot;</code></p>
</li>
<li><p>編輯 <code>source/tags/index.md</code>，記得加上 <code>type: &quot;tags&quot;</code>：</p>
 <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 所有標籤</span><br><span class="line">date: 2021-06-04 17:29:23</span><br><span class="line"><span class="section">type: &quot;tags&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改 theme 的 config 檔，去掉 menu 底下 tags 那一行的註解：</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br></pre></td></tr></table></figure></li>
<li><p>替剛剛新增的文章加上標籤</p>
 <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&lt;!-- 只有一個 tag 時 --&gt;</span><br><span class="line">tags: tag</span><br><span class="line"></span><br><span class="line">&lt;!-- 有多個 tag 時 --&gt;</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">  -</span> tag1</span><br><span class="line"><span class="bullet">  -</span> tag2</span><br><span class="line"><span class="bullet">  -</span> tag3</span><br></pre></td></tr></table></figure></li>
<li><p>用 <code>hexo server</code> 測試看看</p>
</li>
</ol>
<h3 id="設定文章網址格式"><a href="#設定文章網址格式" class="headerlink" title="設定文章網址格式"></a>設定文章網址格式</h3><p>修改 site 的 config 檔：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:title/</span></span><br></pre></td></tr></table></figure>

<p>還有很多種設定方式呢！詳見<a href="https://hexo.io/docs/permalinks">官方文檔</a>～</p>
<h2 id="為部落格加上搜尋功能"><a href="#為部落格加上搜尋功能" class="headerlink" title="為部落格加上搜尋功能"></a>為部落格加上搜尋功能</h2><ol>
<li><p>裝 plugin：<code>npm install hexo-generator-searchdb</code></p>
</li>
<li><p>修改 theme 的 config 檔，開啟 local search 的功能：</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>左上方的 menu 就多了個 Search 囉！</p>
</li>
</ol>
<p><img src="5.png"></p>
<p>就是這麼簡單。</p>
<h2 id="部署到-GitHub-Pages"><a href="#部署到-GitHub-Pages" class="headerlink" title="部署到 GitHub Pages"></a>部署到 GitHub Pages</h2><p><code>hexo server</code> 以後，看到部落格美美呈現在瀏覽器上就算完成了嗎？還沒呢！</p>
<p>記得嗎？我們測試時輸入的網址可是 <code>localhost:4000</code>，這代表說只有本機端才能看得到。<br>所以如果想要讓網路上的大家能找到自己美美的部落格，首先必須要把部落格部署在某個地方。<br>其中一種很簡單的方式就是用 GitHub Pages 來部署哦！</p>
<p>＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝</p>
<p>如果之前已經設定過了，就直接跳到步驟 5. 吧！</p>
<ol>
<li><p>還沒有 GitHub 帳戶的話先去註冊一個</p>
</li>
<li><p>創建一個名為 <code>&lt;username&gt;.github.io</code> 的 repository，其中 <code>&lt;username&gt;</code> 就是你 GitHub 帳戶的 username（交叉比對<a href="https://ithelp.ithome.com.tw/articles/10199169">這篇</a>和<a href="https://hexo.io/docs/one-command-deployment#Git">官方文檔</a>，疑似任何 repo name 都行，不過用前面說的 name 就能直接用 <code>&lt;username&gt;.github.io</code> 這個網址進到部落格，比較簡單也比較直覺）</p>
</li>
<li><p>裝 plugin：<code>npm install hexo-deployer-git --save</code></p>
</li>
<li><p>修改 site 的 config 檔，設定網站 URL＆部署資訊：</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://&lt;username&gt;.github.io</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==============================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/&lt;username&gt;/&lt;username&gt;.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p> 詳細的設定可以參閱<a href="https://hexo.io/docs/one-command-deployment">官方文檔</a>，還有其他種部署方式的教學呢！</p>
</li>
<li><p>清空 public 裡面的東西（如果有的話）：<code>hexo clean</code></p>
</li>
<li><p>產生靜態檔案＆部署到 GitHub Pages：<code>hexo generate &amp; hexo deploy</code><br> （注意：第一次使用時，如果原本 <code>&lt;username&gt;.github.io</code>  裡面有東西的話都會被吃掉，就連之前的 commit 也都會不見 😱）</p>
</li>
<li><p>打開瀏覽器，輸入 <code>&lt;username&gt;.github.io</code> 就可以看到自己的部落格囉！</p>
</li>
</ol>
<p><img src="6.png"></p>
<p>酷斃了！</p>
<h2 id="加上「繼續閱讀」"><a href="#加上「繼續閱讀」" class="headerlink" title="加上「繼續閱讀」"></a>加上「繼續閱讀」</h2><p>非常簡單，只要在文章裡面加上 <code>&lt;!-- more --&gt;</code> 就行了！</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">預覽看得到我</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">預覽看不到我</span><br></pre></td></tr></table></figure>

<p>用 <code>hexo server</code> 去查看，沒錯，多了一個「Read more」繼續閱讀的按鈕了 🎉</p>
<p><img src="7.png"></p>
<p>Nice!</p>
<h2 id="顯示文章閱讀次數"><a href="#顯示文章閱讀次數" class="headerlink" title="顯示文章閱讀次數"></a>顯示文章閱讀次數</h2><p>我是參考<a href="https://www.larrynote.com/website-service/15/">這篇文章</a>弄的。<br>（注意：文章標題中不能含有 <code>/</code> 斜槓符號，不然會出問題！）</p>
<h3 id="建立-Firebase-專案"><a href="#建立-Firebase-專案" class="headerlink" title="建立 Firebase 專案"></a>建立 Firebase 專案</h3><ol>
<li><p>想要啟用這個功能，可以使用 Firebase 的 Firestore 服務，因此，先到<a href="https://firebase.google.com/">官網</a>註冊一下 Firebase 吧！</p>
</li>
<li><p>新增專案</p>
<p> <img src="8.png"></p>
</li>
<li><p>照著步驟走，即可建立一個 Firebase 專案！</p>
</li>
</ol>
<h3 id="產生網路-API-金鑰"><a href="#產生網路-API-金鑰" class="headerlink" title="產生網路 API 金鑰"></a>產生網路 API 金鑰</h3><ol>
<li><p>進到專案裡頭，左上方有個「Authentication」，點一下，再點「開始使用」，跑完以後，金鑰就生成囉！</p>
<p> <img src="9.png"></p>
</li>
<li><p>進到「專案設定」的「一般設定」查看一下～</p>
<p> <img src="10.png"></p>
<p> 真的有了欸！</p>
<p> <img src="11.png"></p>
</li>
</ol>
<h3 id="設定-Firestore"><a href="#設定-Firestore" class="headerlink" title="設定 Firestore"></a>設定 Firestore</h3><ol>
<li><p>Firestore Database → 建立資料庫</p>
<p> <img src="12.png"></p>
</li>
<li><p>以測試模式啟動 → 繼續 → Cloud Firestore 位置選比較近的 → 啟用</p>
<p> <img src="13.png"></p>
<p> <img src="14.png"></p>
</li>
<li><p>編輯規則，把原本的規則改成下面的 code → 發布</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">service cloud.firestore &#123;</span><br><span class="line">  match /databases/&#123;database&#125;/documents &#123;</span><br><span class="line">    match /articles/&#123;any&#125; &#123;</span><br><span class="line">      allow read: <span class="keyword">if</span> <span class="literal">true</span>;</span><br><span class="line">      allow write: <span class="keyword">if</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <img src="15.png"></p>
</li>
</ol>
<p>這樣 Firestore 的設定就完成囉！</p>
<h3 id="開啟功能"><a href="#開啟功能" class="headerlink" title="開啟功能"></a>開啟功能</h3><p>到 theme 的 config 檔，修改關於 firestore 的設置。<br>除了 <code>enable</code> 改為 <code>true</code> 之外，<code>apiKey</code> 和 <code>projectId</code> 也要設定哦！<br>值要怎麼設定呢？到上面那一張圖的頁面去找找吧～</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">firestore:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">collection:</span> <span class="string">articles</span> <span class="comment"># Required, a string collection name to access firestore database</span></span><br><span class="line">  <span class="attr">apiKey:</span> <span class="string">&lt;網路</span> <span class="string">API</span> <span class="string">金鑰&gt;</span></span><br><span class="line">  <span class="attr">projectId:</span> <span class="string">&lt;專案</span> <span class="string">ID&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h3><ol>
<li><p>清空 public 裡面的東西（如果有的話）：<code>hexo clean</code></p>
</li>
<li><p>產生靜態檔案＆部署最新版的 code 上去：<code>hexo generate &amp; hexo deploy</code><br> （注意：<code>localhost:4000</code> 不能測試哦！因為我們在 site 的 config 檔裡面，url 設的是 <code>https://&lt;username&gt;.github.io</code>）</p>
</li>
<li><p>打開瀏覽器，輸入 <code>&lt;username&gt;.github.io</code>，神奇的事情發生了！</p>
</li>
</ol>
<p>＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝</p>
<p>（點進去文章前）頁面多了個「Views」</p>
<p><img src="16.png"></p>
<p>（點進去文章後）+1 了!!!</p>
<p><img src="17.png"></p>
<p>到 Firestore Database 去看到底發生了什麼事：</p>
<p><img src="18.png"></p>
<p>哇嗚～酷欸！</p>
<h3 id="NexT-是怎麼實作的呢？"><a href="#NexT-是怎麼實作的呢？" class="headerlink" title="NexT 是怎麼實作的呢？"></a>NexT 是怎麼實作的呢？</h3><p>主要用的技術是 Firestore Database + localStorage。</p>
<p>好想知道實作細節哦！怎麼辦？</p>
<p>從檔案裡面找的話，應該能找到那個部分的 source code。<br>果然被我找到了：<code>/themes/next/layout/_third-party/statistics/firestore.swig</code></p>
<p>聽說原本沒有 Firestore 版的「統計閱讀次數」功能，是後來<a href="https://blog.maple3142.net/2017/11/04/hexo-next-readcount/">有人</a>發 PR 上去的。<br>所以或許我們也可以自己加上想要的功能，然後發 PR，造福自己，也造福大家！</p>
<h2 id="加入-Disqus-留言板"><a href="#加入-Disqus-留言板" class="headerlink" title="加入 Disqus 留言板"></a>加入 Disqus 留言板</h2><h3 id="加入留言板"><a href="#加入留言板" class="headerlink" title="加入留言板"></a>加入留言板</h3><ol>
<li><p>註冊 <a href="https://disqus.com/">Disqus</a> 帳戶</p>
</li>
<li><p>選 <code>I want to install Disqus on my site</code></p>
<p> <img src="19.png"></p>
</li>
<li><p>把該填的填一填，其中圈起來的部分下一步會用到<br> （可以點按 <code>Customize Your URL</code> 來分別設定 <code>Website Name</code> 和 <code>Shortname</code>）</p>
<p> <img src="20.png"></p>
</li>
<li><p>修改 theme 的 config 檔，enable 之後，把 shortname 給加上去：</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Disqus</span></span><br><span class="line"><span class="attr">disqus:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">shortname:</span> <span class="string">&lt;shortname&gt;</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>用 <code>hexo server</code> 去查看，酷， 文章底下有留言板囉！</p>
</li>
</ol>
<p><img src="21.png"></p>
<h3 id="關掉某篇文的留言板"><a href="#關掉某篇文的留言板" class="headerlink" title="關掉某篇文的留言板"></a>關掉某篇文的留言板</h3><p>預設會在所有文章裡面加入留言板。<br>如果某篇文章不想要有留言板的話，在那篇文 <code>&lt;post&gt;.md</code> 的一開始加上：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">comments: false</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<h2 id="SEO（搜尋引擎最佳化）"><a href="#SEO（搜尋引擎最佳化）" class="headerlink" title="SEO（搜尋引擎最佳化）"></a>SEO（搜尋引擎最佳化）</h2><p>讓自己的部落格更容易被找到！</p>
<h3 id="驗證網站"><a href="#驗證網站" class="headerlink" title="驗證網站"></a>驗證網站</h3><ol>
<li><p>進到 <a href="https://search.google.com/search-console/welcome">Google Search Console</a></p>
</li>
<li><p>在右側「網址前置字元」處，輸入網址 <code>https://&lt;username&gt;.github.io</code> 後，按繼續。</p>
<p> <img src="22.png"></p>
</li>
<li><p>點按「HTML 標記」展開資訊卡，再按「複製」</p>
<p> <img src="23.png"></p>
</li>
<li><p>進到 theme 的 config 檔，把剛剛複製起來 content 裡面的東西加進去</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Google Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://www.google.com/webmasters</span></span><br><span class="line"><span class="attr">google_site_verification:</span> <span class="string">&lt;content&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>清空 public 裡面的東西（如果有的話）：<code>hexo clean</code></p>
</li>
<li><p>產生靜態檔案＆部署最新版的 code 上去：<code>hexo generate &amp; hexo deploy</code></p>
</li>
<li><p>部署最新版以後，就能驗證囉！</p>
<p> <img src="24.png"></p>
</li>
</ol>
<p>驗證完畢 🎉</p>
<p><img src="25.png"></p>
<h3 id="提交-Sitemap"><a href="#提交-Sitemap" class="headerlink" title="提交 Sitemap"></a>提交 Sitemap</h3><ol>
<li><p>裝 plugin：<code>npm install hexo-generator-sitemap --save</code></p>
</li>
<li><p>打開 site 的 config 檔，在最後面貼上：</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br></pre></td></tr></table></figure>

<p> （注意縮排，不要附屬在 deploy 底下）</p>
</li>
<li><p>產生 sitemap.xml ＆部署：<code>hexo generate &amp; hexo deploy</code></p>
</li>
<li><p>回到 Google Search Console，點左側的 Sitemap → 填 <code>sitemap.xml</code> → 提交！</p>
<p> <img src="26.png"></p>
</li>
<li><p>居然無法擷取⋯⋯</p>
<p> <img src="27.png"></p>
</li>
</ol>
<p>後來找到<a href="https://kyiplay.com/2020/04/google-search-console-coudnt-fetch-sitemap/">這篇</a>，結論就是：等一周左右！<br>就等吧。</p>
<p>更新：</p>
<p><img src="28.png"></p>
<p>不需要一個禮拜～</p>
<br>
希望讀完這篇文章的您能夠有所收穫，我們下篇文見啦 😃]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub Pages</tag>
        <tag>部落格</tag>
        <tag>教學</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript ES6 Cheatsheet</title>
    <url>/2020/04/javascript-es6-cheatsheet/</url>
    <content><![CDATA[<p><a href="/2020/04/javascript-es6-cheatsheet"><img src="https://images.unsplash.com/photo-1517694712202-14dd9538aa97?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1500&q=80" style="width:50vw;" /></a></p>
<!-- <img src="1.jpeg" style="width:50vw;" /> -->

<p>之前學 ES6 時整理的筆記😀</p>
<span id="more"></span>

<p>參考自：<a href="https://peter-chang.medium.com/es6-10-features-javascript-developer-must-know-98b9782bef44">[ES6] Javascript 開發者必須知道的 10 個新功能</a></p>
<h2 id="Default-Parameters"><a href="#Default-Parameters" class="headerlink" title="Default Parameters"></a>Default Parameters</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters">MDN</a>:<br><strong>Default function parameters</strong> allow named parameters to be initialized with default values if no value or <code>undefined</code> is passed.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="function"><span class="keyword">function</span>(<span class="params">height = <span class="number">173</span>, weight = <span class="number">66</span>, college = <span class="string">&#x27;NCTU&#x27;</span></span>) </span>&#123; ... &#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Template-Literals"><a href="#Template-Literals" class="headerlink" title="Template Literals"></a>Template Literals</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals">MDN</a>:<br>Template literals are string literals allowing embedded expressions. You can use multi-line strings and <a href="https://dmitripavlutin.com/string-interpolation-in-javascript/">string interpolation</a> features with them.</p>
<h3 id="Multi-line-Strings"><a href="#Multi-line-Strings" class="headerlink" title="Multi-line Strings"></a>Multi-line Strings</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">let</span> sentence = <span class="string">&#x27;first line\n&#x27;</span></span><br><span class="line">+ <span class="string">&#x27;second line&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> sentence = <span class="string">`first line</span></span><br><span class="line"><span class="string">second line`</span>;</span><br></pre></td></tr></table></figure>

<h3 id="String-Interpolation"><a href="#String-Interpolation" class="headerlink" title="String Interpolation"></a>String Interpolation</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">let</span> sentence = <span class="string">&#x27;My name is &#x27;</span> + first + <span class="string">&#x27; &#x27;</span> + last + <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> sentence = <span class="string">`My name is <span class="subst">$&#123;first&#125;</span> <span class="subst">$&#123;last&#125;</span>.`</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Destructuring-Assignment"><a href="#Destructuring-Assignment" class="headerlink" title="Destructuring Assignment"></a>Destructuring Assignment</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">MDN</a>:<br>The <strong>destructuring assignment</strong> syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> me = &#123; <span class="attr">name</span>: <span class="string">&#x27;Tim&#x27;</span>, <span class="attr">college</span>: <span class="string">&#x27;NCTU&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> moreAboutMe = &#123; me, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> &#125;;</span><br><span class="line"><span class="comment">// &#123; &#123; name: &#x27;Tim&#x27;, college:&#x27;NCTU&#x27; &#125;, gender: &#x27;male&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> moreAboutMe = &#123; ...me, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> &#125;;</span><br><span class="line"><span class="comment">// &#123; name: &#x27;Tim&#x27;, college:&#x27;NCTU&#x27; , gender: &#x27;male&#x27; &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Array-destructuring"><a href="#Array-destructuring" class="headerlink" title="Array destructuring"></a>Array destructuring</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> [red, yellow, green] = foo;</span><br><span class="line"><span class="built_in">console</span>.log(red); <span class="comment">// one</span></span><br><span class="line"><span class="built_in">console</span>.log(yellow); <span class="comment">// two</span></span><br><span class="line"><span class="built_in">console</span>.log(green); <span class="comment">// three</span></span><br></pre></td></tr></table></figure>

<h3 id="Object-destructuring"><a href="#Object-destructuring" class="headerlink" title="Object destructuring"></a>Object destructuring</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> me = &#123; <span class="attr">name</span>: <span class="string">&#x27;Tim&#x27;</span>, <span class="attr">college</span>: <span class="string">&#x27;NCTU&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; name, college &#125; = me;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// Tim</span></span><br><span class="line"><span class="built_in">console</span>.log(college); <span class="comment">// NCTU</span></span><br></pre></td></tr></table></figure>

<h2 id="Object-Literals"><a href="#Object-Literals" class="headerlink" title="Object Literals"></a>Object Literals</h2><p><a href="https://pjchender.blogspot.com/2017/01/es6-object-literal-extension.html">[筆記] JavaScript ES6 中的物件的擴展（object literal extension）</a></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeMachine</span>(<span class="params">name, year, price</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// name: name,</span></span><br><span class="line">    name,</span><br><span class="line">    year,</span><br><span class="line">    <span class="comment">// 也可以覆蓋掉傳進來的值</span></span><br><span class="line">    <span class="attr">price</span>: <span class="number">810000</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ⽅法 methods 也能放進來</span></span><br><span class="line">    <span class="attr">description</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;year&#125;</span> machine <span class="subst">$&#123;name&#125;</span> is <span class="subst">$&#123;price&#125;</span> dollars`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 簡寫</span></span><br><span class="line">    <span class="function"><span class="title">description</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;year&#125;</span> machine <span class="subst">$&#123;name&#125;</span> is <span class="subst">$&#123;price&#125;</span> dollars`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 允許將表達式 expression 作為屬性名稱，以達到動態賦值的效果（包在[]裡⾯）</span></span><br><span class="line">    [year+<span class="string">&#x27;machine&#x27;</span>]: price,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> machine = makeMachine(<span class="string">&#x27;Switch&#x27;</span>, <span class="number">2020</span>, <span class="number">9780</span>);</span><br><span class="line"></span><br><span class="line">machine.description();</span><br><span class="line"><span class="comment">// 2020 machine Switch is 9780 dollars</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(machine.price);</span><br><span class="line"><span class="comment">// 810000</span></span><br></pre></td></tr></table></figure>

<h2 id="Arrow-Functions"><a href="#Arrow-Functions" class="headerlink" title="Arrow Functions"></a>Arrow Functions</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">MDN</a>:<br>An <strong>arrow function expression</strong> is a compact alternative to a traditional <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function">function expression</a>, but is limited and can’t be used in all situations.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多個參數</span></span><br><span class="line">(param1, param2, ..., paramN) =&gt; &#123; statements &#125;;</span><br><span class="line"><span class="function">(<span class="params">param1, param2, ..., paramN</span>) =&gt;</span> &#123; <span class="keyword">return</span> expression; &#125;;</span><br><span class="line"><span class="function">(<span class="params">param1, param2, ..., paramN</span>) =&gt;</span> expression;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ⼀個參數</span></span><br><span class="line"><span class="function">(<span class="params">singleParam</span>) =&gt;</span> &#123; statements &#125;;</span><br><span class="line"><span class="function"><span class="params">singleParam</span> =&gt;</span> &#123; statements &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 沒有參數</span></span><br><span class="line"><span class="function">() =&gt;</span> &#123; statements &#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h2><p><a href="https://andyyou.github.io/2017/06/27/js-promise/">Promise 學習筆記 | DEVLOG of andyyou</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">MDN</a>:<br>The <strong><code>Promise</code></strong> object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.</p>
<h3 id="建⽴-Promise"><a href="#建⽴-Promise" class="headerlink" title="建⽴ Promise"></a>建⽴ Promise</h3><p>把 <code>Promise</code> 想成是⼀個 object！</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">hasEnoughMoney = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pleaseBuyMeSwitch = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (hasEnoughMoney) &#123;</span><br><span class="line">    <span class="keyword">const</span> gift = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Switch&#x27;</span>,</span><br><span class="line">      <span class="attr">price</span>: <span class="number">9780</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    resolve(gift); <span class="comment">// 回傳 gift 這個物件</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> reason = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;I lost my 20000 dollars at the gym!!!&#x27;</span>);</span><br><span class="line">    reject(reason); <span class="comment">// 回傳 reason 這個 Error 物件</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="使⽤-Promise"><a href="#使⽤-Promise" class="headerlink" title="使⽤ Promise"></a>使⽤ Promise</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> askJoeman = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  pleaseBuyMeSwitch</span><br><span class="line">  .then(<span class="function">(<span class="params">fulfilled</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;I got:&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(fulfilled);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error.message);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">askJoeman();</span><br></pre></td></tr></table></figure>

<h3 id="簡化寫法"><a href="#簡化寫法" class="headerlink" title="簡化寫法"></a>簡化寫法</h3><p>若某個 function 沒呼叫 <code>reject</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> showoff = <span class="function"><span class="keyword">function</span>(<span class="params">something</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> message = <span class="string">`Hahaha! I got a new <span class="subst">$&#123;something&#125;</span>!`</span>;</span><br><span class="line">    resolve(message);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>可簡寫成</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> showoff = <span class="function"><span class="keyword">function</span>(<span class="params">something</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> message = <span class="string">`Hahaha! I got a new <span class="subst">$&#123;something&#125;</span>!`</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(message);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="ES7-async-await-⾮同步寫法"><a href="#ES7-async-await-⾮同步寫法" class="headerlink" title="ES7 async/await ⾮同步寫法"></a>ES7 async/await ⾮同步寫法</h3><p>原本的寫法</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> askJoeman = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  pleaseBuyMeSwitch</span><br><span class="line">  .then(<span class="function">(<span class="params">fulfilled</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;I got:&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(fulfilled);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error.message);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>新寫法</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">askJoeman</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> something = <span class="keyword">await</span> pleaseBuyMeSwitch;</span><br><span class="line">    <span class="keyword">let</span> message = <span class="keyword">await</span> showoff(something.name);</span><br><span class="line">    <span class="built_in">console</span>.log(message);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error.message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// await ⼀定要包在 async function 裡⾯才能⽤</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> askJoeman();</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<p>cleaner and more readable!</p>
<h2 id="Let-amp-Const-Block-Scoped"><a href="#Let-amp-Const-Block-Scoped" class="headerlink" title="Let &amp; Const, Block-Scoped"></a>Let &amp; Const, Block-Scoped</h2><p><code>let</code> 僅在當前的 block 內有效，重複定義時會 throw error。<br><code>const</code> 同樣只在當前的 block 內有效，定義時必須 initialize，且不能更改。</p>
<h2 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes">MDN</a>:<br>Classes are a template for creating objects. They encapsulate data with code to work on that data.</p>
<h3 id="Class-Declaration-類別宣告"><a href="#Class-Declaration-類別宣告" class="headerlink" title="Class Declaration 類別宣告"></a>Class Declaration 類別宣告</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Class-Expression-類別敘述"><a href="#Class-Expression-類別敘述" class="headerlink" title="Class Expression 類別敘述"></a>Class Expression 類別敘述</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// unnamed</span></span><br><span class="line"><span class="keyword">let</span> People = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// named</span></span><br><span class="line"><span class="keyword">let</span> People = <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> PG = <span class="keyword">new</span> People(<span class="string">&#x27;Curry&#x27;</span>, <span class="number">32</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Prototype-Methods-原型⽅法"><a href="#Prototype-Methods-原型⽅法" class="headerlink" title="Prototype Methods 原型⽅法"></a>Prototype Methods 原型⽅法</h3><p>可包 getter、setter、method 等等的進到 class 定義裡⾯，詳⾒ <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#prototype_methods">MDN</a>。</p>
<h3 id="Static-methods-靜態⽅法"><a href="#Static-methods-靜態⽅法" class="headerlink" title="Static methods 靜態⽅法"></a>Static methods 靜態⽅法</h3><p>不需要實體化就可以被呼叫，也無法被已實體化的類別物件呼叫。<br>經常被⽤來建⽴給應⽤程式使⽤的⼯具函數。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">greeting</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;name&#125;</span>. I&#x27;m <span class="subst">$&#123;age&#125;</span> years old now.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> SG = <span class="keyword">new</span> People(<span class="string">&#x27;Thompson&#x27;</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">SG.greeting(<span class="string">&#x27;Thompson&#x27;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="comment">// Thrown:</span></span><br><span class="line"><span class="comment">// TypeError: SG.greeting is not a function</span></span><br><span class="line"></span><br><span class="line">People.greeting(<span class="string">&#x27;Green&#x27;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="comment">// My name is Green. I&#x27;m 30 years old now.</span></span><br></pre></td></tr></table></figure>

<h3 id="⽤-extends-建⽴⼦類別-＆-⽤-super-呼叫⽗類別"><a href="#⽤-extends-建⽴⼦類別-＆-⽤-super-呼叫⽗類別" class="headerlink" title="⽤ extends 建⽴⼦類別 ＆ ⽤ super 呼叫⽗類別"></a>⽤ extends 建⽴⼦類別 ＆ ⽤ super 呼叫⽗類別</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="title">introduce</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(`I&#x27;m $&#123;name&#125;.`); name 前⾯沒加上 this 會報錯</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`I&#x27;m <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Star</span> <span class="keyword">extends</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, number, position</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">    <span class="built_in">this</span>.number = number;</span><br><span class="line">    <span class="built_in">this</span>.position = position;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">introduce</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.introduce();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`I wear number <span class="subst">$&#123;<span class="built_in">this</span>.number&#125;</span>. I play <span class="subst">$&#123;<span class="built_in">this</span>.position&#125;</span>!`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> star = <span class="keyword">new</span> Star(<span class="string">&#x27;Antetokounmpo&#x27;</span>, <span class="number">34</span>, <span class="string">&#x27;PF&#x27;</span>);</span><br><span class="line">star.introduce();</span><br><span class="line"><span class="comment">// I&#x27;m Antetokounmpo.</span></span><br><span class="line"><span class="comment">// I wear number 34. I play PF!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 之前幻想字母哥來勇士xD</span></span><br></pre></td></tr></table></figure>

<h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">MDN</a>:<br>providing mechanisms for splitting JavaScript programs up into separate modules that can be imported when needed.</p>
<h3 id="Export"><a href="#Export" class="headerlink" title="Export"></a>Export</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export">MDN</a>:<br>The <code>export</code> statement is used when creating JavaScript modules to export live bindings to functions, objects, or primitive values from the module so they can be used by other programs with the <code>import</code> statement.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> password = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getStatus</span>(<span class="params">id</span>) </span>&#123; ... &#125;;</span><br></pre></td></tr></table></figure>

<h3 id="Import"><a href="#Import" class="headerlink" title="Import"></a>Import</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">MDN</a>:<br>The <strong>static</strong> <code>import</code> statement is used to import read only live bindings which are exported by another module.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; password, getStatus &#125; <span class="keyword">from</span> <span class="string">&#x27;module-name&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(password); <span class="comment">// hello</span></span><br></pre></td></tr></table></figure>

<h3 id="Export-Default"><a href="#Export-Default" class="headerlink" title="Export Default"></a>Export Default</h3><p>可以讓要使⽤ module 的 client，在不知道 module export 了哪些名稱的情況下，能⾃訂名稱取⽤ module 裡⾯定義的東西。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Tim&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">greeting</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hello!&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ================================================== */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> any-name-you-want-to-take <span class="keyword">from</span> <span class="string">&#x27;module-name&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(any-name-you-want-to-take.name);</span><br><span class="line"><span class="comment">// Tim</span></span><br><span class="line"></span><br><span class="line">any-name-you-want-to-take.greeting();</span><br><span class="line"><span class="comment">// Hello!</span></span><br></pre></td></tr></table></figure>

<br>
希望讀完這篇文章的您能夠有所收穫，我們下篇文見啦 😃]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
        <tag>Cheatsheet</tag>
      </tags>
  </entry>
  <entry>
    <title>用 STM32 開發板做一台類似投籃機的遊戲機台</title>
    <url>/2021/01/microprocessor-project/</url>
    <content><![CDATA[<p><a href="/2021/01/microprocessor-project"><img src="https://images.unsplash.com/photo-1514031231291-fee925070a61?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=1950&q=80" style="width:50vw;" /></a></p>
<!-- <img src="1.jpeg" style="width:50vw;" /> -->

<p>大三上修「微處理機系統實驗」時所做的期末專題。</p>
<span id="more"></span>

<p>這次僅做簡單的紀錄。</p>
<hr>
<h2 id="開發過程寫的文件"><a href="#開發過程寫的文件" class="headerlink" title="開發過程寫的文件"></a>開發過程寫的文件</h2><h3 id="專題提案"><a href="#專題提案" class="headerlink" title="專題提案"></a>專題提案</h3><p>知道到底要做什麼是首要之務。<br><a href="https://github.com/kanido386/playground/blob/master/microprocessor-project/專題提案.pdf" target="_blank">這是專題提案～</a></p>
<h3 id="實作方向"><a href="#實作方向" class="headerlink" title="實作方向"></a>實作方向</h3><p>開始行動前，如果能先有個大概方向，往往更有利於進度的推進。<br>後來我又列出實作細節，非常 detailed 的那種，這不但讓我克服了拖延，也讓我因為能更容易地各個擊破而產生很大的成就感！<br><a href="https://github.com/kanido386/playground/blob/master/microprocessor-project/實作方向.pdf" target="_blank">這是實作方向～</a></p>
<hr>
<h2 id="用影片來記錄"><a href="#用影片來記錄" class="headerlink" title="用影片來記錄"></a>用影片來記錄</h2><h3 id="前一天測試"><a href="#前一天測試" class="headerlink" title="前一天測試"></a>前一天測試</h3><p>終於花非常多時間弄完有的沒的事情以後，來進行個測試。</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/dAJFhHayooc" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h3 id="demo當天再測試"><a href="#demo當天再測試" class="headerlink" title="demo當天再測試"></a>demo當天再測試</h3><p>在教授和助教們來評分以前，趕快再來測試一番，出了什麼差錯就功虧一簣了！</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/M_ND80FLdWY" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h3 id="機台拆解"><a href="#機台拆解" class="headerlink" title="機台拆解"></a>機台拆解</h3><p>期末展結束以後要把所有器材還給助教，不得不拆解這個花我非常多心思的機台 😢<br>剩下的紙箱、杯子留著也不能做什麼，只好回收掉⋯⋯</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/jmL-ML8BDvc" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<hr>
<h2 id="一些照片"><a href="#一些照片" class="headerlink" title="一些照片"></a>一些照片</h2><figure>
  <!-- <img src="https://i.imgur.com/4S5wvKm.jpg" style="width:30vw;" /> -->
  <img src="2.jpg" style="width:30vw;" />
  <figcaption>來玩機台囉！</figcaption>
</figure>
<figure>
  <!-- <img src="https://i.imgur.com/vXYNK6y.jpg" style="width:30vw;" /> -->
  <img src="3.jpg" style="width:30vw;" />
  <figcaption>挖掉杯子底部，讓球通過</figcaption>
</figure>
<figure>
  <!-- <img src="https://i.imgur.com/qbR9bUC.jpg" style="width:30vw;" /> -->
  <img src="4.jpg" style="width:30vw;" />
  <figcaption>機台是放斜的，這樣可以讓球滾下來</figcaption>
</figure>
<figure>
  <!-- <img src="https://i.imgur.com/jPt5Qn1.jpg" style="width:30vw;" /> -->
  <img src="5.jpg" style="width:30vw;" />
  <figcaption>這就是最麻煩無趣的部分：接線（機台裡面超亂）</figcaption>
</figure>

<hr>
<h2 id="至少程式碼不會和我分開"><a href="#至少程式碼不會和我分開" class="headerlink" title="至少程式碼不會和我分開"></a>至少程式碼不會和我分開</h2><p><a href="https://github.com/kanido386/playground/tree/master/microprocessor-project" target="_blank">這是專案資料夾～</a><br>只需要看 <code>/final-project/src/</code> 裡面的 code 就行囉！<br>（邏輯的部分在 <code>main.c</code> 裡面～）</p>
<p>原本我是用一個叫 SystemWorkbench 的 IDE 來開發，但後來發現，其實用 Visual Studio Code 來寫 code 會比較有效率，能不能同時縮排很多行 code 真的差非常多！<br>（GitHub 上面呈現 code 的縮排看起來有點恐怖，就不要計較了啦 😂）<br><br><br>今天的分享就到這邊，我們下篇文見吧 😃</p>
]]></content>
      <tags>
        <tag>交大</tag>
        <tag>課程</tag>
        <tag>專題</tag>
        <tag>微處理機</tag>
        <tag>STM32</tag>
        <tag>開發板</tag>
        <tag>投籃機</tag>
      </tags>
  </entry>
  <entry>
    <title>Moleculer CRUD Guide</title>
    <url>/2020/05/moleculer-crud-guide/</url>
    <content><![CDATA[<p><a href="/2020/05/moleculer-crud-guide"><img src="https://images.unsplash.com/photo-1466278313810-9aca9abea861?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1720&q=80" style="width:50vw;" /></a></p>
<!-- <img src="1.jpeg" style="width:50vw;" /> -->

<p>之前在「梅竹黑客松開發部」時整理的 guide。</p>
<span id="more"></span>

<p>因為把其他部分的 code 也貼上來好像不太好，沒有全部放，所以有些地方可能會不知道在表達什麼。<br>但應該還是能從本文中知悉一點大概念～</p>
<blockquote>
<p>以 Server / Build Informations Related Service 為例</p>
</blockquote>
<h1 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h1><p>在 git 上建立新分支並用程式碼編輯器打開 project</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 為了接下來的操作，先切換路徑到 mc-landing-server 的所在位置</span></span><br><span class="line"><span class="built_in">cd</span> path/to/mc-landing-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 這時你可能會發現目前所在的 branch 是 master 或是上次離開前待的 branch，</span></span><br><span class="line"><span class="comment">#    我們要切回 dev 這個分支</span></span><br><span class="line">git checkout dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 可能有新的 code 被 merged 到 dev，在開始之前，我們得先更新 dev</span></span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 建立並切換到新分支，準備開始這次的任務！</span></span><br><span class="line">git checkout -b feature/build-informations-related-service-1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 如果是用 VSCode 當作程式碼編輯器，下下面的指令就能用 VSCode 打開 project</span></span><br><span class="line">code .</span><br></pre></td></tr></table></figure>

<h1 id="開始寫-model-囉"><a href="#開始寫-model-囉" class="headerlink" title="開始寫 model 囉"></a>開始寫 model 囉</h1><ol>
<li><p>先打開 mc-landing API server spec 這個頁面，我們以這個頁面的 schema 定義來寫我們的 model</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">informations: &#123;</span><br><span class="line">  <span class="attr">_id</span>: &lt;ObjectId&gt;,</span><br><span class="line">  user_id: &lt;ObjectId&gt;,</span><br><span class="line">  tag_id: &lt;ObjectId&gt;,</span><br><span class="line">  title: &lt;<span class="built_in">String</span>&gt;,</span><br><span class="line">  content: &lt;<span class="built_in">String</span>&gt;,</span><br><span class="line">  created_at: &lt;<span class="built_in">Number</span>&gt;,</span><br><span class="line">  updated_at: &lt;<span class="built_in">Number</span>&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">Index</span>:</span><br><span class="line">&#123; <span class="attr">title</span>: <span class="string">&#x27;text&#x27;</span> &#125;</span><br><span class="line">&#123; <span class="attr">created_at</span>: -<span class="number">1</span> &#125;</span><br><span class="line">&#123; <span class="attr">updated_at</span>: -<span class="number">1</span> &#125;</span><br><span class="line">&#123; <span class="attr">tag_id</span>: <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">tags</span>: &#123;</span><br><span class="line">  <span class="attr">_id</span>: &lt;ObjectId&gt;,</span><br><span class="line">  name: &lt;<span class="built_in">String</span>&gt;,</span><br><span class="line">  color: &lt;<span class="built_in">Number</span>&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>開好之前定的 schema 以後，我們就準備依樣畫葫蘆囉～ （這就是為什麼我們要分兩階段進行：第一個階段在我們還不需要實際打 code 的時候，專心一意地去想我們的 schema 要怎麼規劃才能符合需求，然後把它寫下來；第二個階段就直接照第一階段寫的，實際去寫成 code。就好像蓋房子的時候：畫藍圖 → 開始動工！）</p>
</li>
<li><p>回到 VSCode，在 models 資料夾底下建一個 informations.js （如果是做 Server / Build Posts Related Service 就建 posts.js，以此類推）</p>
</li>
<li><p><del>複製 users.js 裡面的 code 到 informations.js 裡面，然後開始改</del></p>
</li>
</ol>
<h2 id="正式開始寫-model-的-code"><a href="#正式開始寫-model-的-code" class="headerlink" title="正式開始寫 model 的 code"></a>正式開始寫 model 的 code</h2><ul>
<li>從 mongoose 裡面取用 Schema，準備用 Schema 自定義我們的 schema！</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; Schema &#125; = Mongoose;</span><br></pre></td></tr></table></figure>

<ul>
<li>把我們定義的 schema 命名為 informationsSchema（或 postsSchema）</li>
<li>最下面的 <code>strict: &#39;throw&#39;</code> 是一種 optional 的設定，意思是： 若 insert 一個不符合我們 schema 的新 <a href="https://docs.mongodb.com/manual/core/document/">document</a> 時，會直接 drop 掉也會報出錯誤</li>
<li>灰色被 comment 掉的部分是我們要改的部分！</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> informationsSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  <span class="comment">// username: &#123;</span></span><br><span class="line">  <span class="comment">//   type: String,</span></span><br><span class="line">  <span class="comment">//   required: true</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="comment">// password: &#123;</span></span><br><span class="line">  <span class="comment">//   type: String,</span></span><br><span class="line">  <span class="comment">//   required: true</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">strict</span>: <span class="string">&#x27;throw&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>_id</code> 不用寫上去，mongoose 會幫我們建好～</li>
<li><code>user_id</code>、<code>tag_id</code> 是指外部 schema (users、tags) 的 _id，所以用 <code>Mongoose.Types.ObjectId</code> 當作 type，這就是資料庫裡面常聽到的 relation， 有看過「<a href="https://www.mongodb.com/blog/post/6-rules-of-thumb-for-mongodb-schema-design-part-1">6 Rules of Thumb for MongoDB Schema Design</a>」這篇文章大概就會懂</li>
<li><code>required: true</code> 意思是：insert 新 document 時必須有這個欄位 （像 tag 可以之後再加上去，所以就不用 required 了）</li>
<li>至於有什麼 type 呢？參考 <a href="https://mongoosejs.com/docs/schematypes.html">Mongoose</a> 吧！（我們是用 Mongoose 來建 model）</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> informationsSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  <span class="attr">user_id</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: Mongoose.Types.ObjectId,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">tag_id</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: Mongoose.Types.ObjectId</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">title</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">content</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">created_at</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">updated_at</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">strict</span>: <span class="string">&#x27;throw&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>進行 index 吧！index 是為了方便之後搜尋排序等等的操作。</li>
<li><code>&#39;text&#39;</code> <a href="https://docs.mongodb.com/manual/core/index-text/">Text indexes</a>? To support text search queries on string content.</li>
<li><code>1</code>：由小排到大  <code>-1</code>：由大排到小</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">informationsSchema.index(&#123; <span class="attr">title</span>: <span class="string">&#x27;text&#x27;</span> &#125;);</span><br><span class="line">informationsSchema.index(&#123; <span class="attr">created_at</span>: -<span class="number">1</span> &#125;);</span><br><span class="line">informationsSchema.index(&#123; <span class="attr">updated_at</span>: -<span class="number">1</span> &#125;);</span><br><span class="line">informationsSchema.index(&#123; <span class="attr">tag_id</span>: <span class="number">1</span> &#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>以 informations 這個 name 把我們定義好的 informationsSchema export 出去</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = Mongoose.model(<span class="string">&#x27;informations&#x27;</span>, informationsSchema);</span><br></pre></td></tr></table></figure>

<h1 id="為待會-service-的參數驗證做準備"><a href="#為待會-service-的參數驗證做準備" class="headerlink" title="為待會 service 的參數驗證做準備"></a>為待會 service 的參數驗證做準備</h1><ol>
<li>打開 libs/validates.js</li>
<li>在 users service related 下面，加入新的參數驗證，一樣參考 <a href="https://www.notion.so/mc-landing-API-server-spec-344a5417ba5b40c09a633f1754215931">mc-landing API server spec</a> <br>（type 有哪些？參考 <a href="https://github.com/icebob/fastest-validator">fastest-validator</a>，因為 Moleculer 的參數驗證 based on it）<br>（為什麼不用加入 <code>_id</code>、<code>user_id</code>、<code>tag_id</code> 呢？因為第八行已經寫好 _id 類的了xD）</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// users service related</span></span><br><span class="line"><span class="attr">users</span>: &#123;</span><br><span class="line">  <span class="attr">username</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">password</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">    <span class="attr">min</span>: <span class="number">6</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// informations service related</span></span><br><span class="line"><span class="attr">informations</span>: &#123;</span><br><span class="line">  <span class="attr">title</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">content</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">created_at</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;number&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">updated_at</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;number&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h1 id="重頭戲：API-本體（service）"><a href="#重頭戲：API-本體（service）" class="headerlink" title="重頭戲：API 本體（service）"></a>重頭戲：API 本體（service）</h1><ol>
<li>在 services 資料夾底下新增 informations.service.js（posts.service.js）</li>
<li>直接複製貼上 users.service.js 的 code 吧！（實在不少行xD 當然自己打過印象會更深刻）</li>
<li>來改 code 吧！<br>（細節上次開會的時候講過了，如果忘記的話，可以上網查或是直接來問我們～）</li>
</ol>
<ul>
<li>第 4 行改 model 的名字（左右都要改哦～）</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> InformationsModel = <span class="built_in">require</span>(<span class="string">&#x27;../models/informations&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>第 9 行改 name</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">name: <span class="string">&#x27;informations&#x27;</span>,</span><br></pre></td></tr></table></figure>

<ul>
<li>第 21 行改 model name</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">model: InformationsModel,</span><br></pre></td></tr></table></figure>

<h2 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h2><h3 id="addInformation"><a href="#addInformation" class="headerlink" title="addInformation"></a>addInformation</h3><ul>
<li>從 addUser 改的，以下以此類推</li>
<li>params 裡面的東西就是 schema 的那些</li>
<li>為什麼沒 created_at、updated_at？它們由系統生成！</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">addInformation: &#123;</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">user_id</span>: &#123;</span><br><span class="line">      ...ValidateType._id</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">tag_id</span>: &#123;</span><br><span class="line">      ...ValidateType._id</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">      ...ValidateType.informations.title</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">content</span>: &#123;</span><br><span class="line">      ...ValidateType.informations.content</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">handler</span>(<span class="params">ctx</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.create(ctx.params);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="getInformation"><a href="#getInformation" class="headerlink" title="getInformation"></a>getInformation</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">getInformation: &#123;</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">_id</span>: &#123;</span><br><span class="line">      ...ValidateType._id</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">handler</span>(<span class="params">ctx</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; _id &#125; = ctx.params;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.findOne(&#123; _id &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="getInformations"><a href="#getInformations" class="headerlink" title="getInformations"></a>getInformations</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">getInformations: &#123;</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">filter</span>: &#123;</span><br><span class="line">      ...ValidateType.filter</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">limit</span>: &#123;</span><br><span class="line">      ...ValidateType.limit</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">skip</span>: &#123;</span><br><span class="line">      ...ValidateType.skip</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">sort</span>: &#123;</span><br><span class="line">      ...ValidateType.sort</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">handler</span>(<span class="params">ctx</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.findAll(ctx.params);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="modifyInformation"><a href="#modifyInformation" class="headerlink" title="modifyInformation"></a>modifyInformation</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">modifyInformation: &#123;</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">_id</span>: &#123;</span><br><span class="line">      ...ValidateType._id</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">tag_id</span>: &#123;</span><br><span class="line">      ...ValidateType._id</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">      ...ValidateType.informations.title</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">content</span>: &#123;</span><br><span class="line">      ...ValidateType.informations.content</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">user_id</span>: &#123; <span class="attr">type</span>: <span class="string">&#x27;forbidden&#x27;</span> &#125;, <span class="comment">// 創立者不會變</span></span><br><span class="line">    <span class="attr">created_at</span>: &#123; <span class="attr">type</span>: <span class="string">&#x27;forbidden&#x27;</span> &#125;, <span class="comment">// 創立時間不會變</span></span><br><span class="line">    <span class="attr">updated_at</span>: &#123; <span class="attr">type</span>: <span class="string">&#x27;forbidden&#x27;</span> &#125; <span class="comment">// 由系統生成</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">handler</span>(<span class="params">ctx</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.updateOne(ctx.params);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="removeInformation"><a href="#removeInformation" class="headerlink" title="removeInformation"></a>removeInformation</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">removeInformation: &#123;</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">_id</span>: &#123;</span><br><span class="line">      ...ValidateType._id</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">handler</span>(<span class="params">ctx</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; _id &#125; = ctx.params;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.deleteOne(&#123; _id &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h2><h3 id="create"><a href="#create" class="headerlink" title="create"></a>create</h3><ul>
<li>中間那一塊就是所謂的「系統生成」啦～</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">create</span>(<span class="params">params</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; adapter, logger &#125; = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; model &#125; = adapter;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> timestamp = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="comment">/* eslint-disable no-param-reassign */</span></span><br><span class="line">  params.created_at = timestamp;</span><br><span class="line">  params.updated_at = timestamp;</span><br><span class="line">  <span class="comment">/* eslint-enable no-param-reassign */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> model.create(params); <span class="comment">// Return Promise</span></span><br><span class="line">    logger.info(<span class="string">&#x27;Create information successfully&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    logger.error(error);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ErrorRes(<span class="number">1000</span>, <span class="string">&#x27;Failed to create information to database&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="findOne"><a href="#findOne" class="headerlink" title="findOne"></a>findOne</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">findOne</span>(<span class="params">filter</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; adapter, logger &#125; = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; model &#125; = adapter;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> model.findOne(filter).lean();</span><br><span class="line">    logger.info(<span class="string">&#x27;Find information successfully&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    logger.error(error);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ErrorRes(<span class="number">1001</span>, <span class="string">&#x27;Failed to find information in database&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="findAll"><a href="#findAll" class="headerlink" title="findAll"></a>findAll</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">findAll</span>(<span class="params">params</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; filter, limit, skip, sort &#125; = params;</span><br><span class="line">  <span class="keyword">const</span> &#123; adapter, logger &#125; = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; model &#125; = adapter;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> total = <span class="keyword">await</span> model.countDocuments(filter).lean();</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> model.find(filter, <span class="literal">null</span>, &#123; limit, skip, sort &#125;).lean();</span><br><span class="line">    logger.info(<span class="string">&#x27;Find informations successfully&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123; total, data &#125;;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    logger.error(error);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ErrorRes(<span class="number">1001</span>, <span class="string">&#x27;Failed to find informations in database&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="updateOne"><a href="#updateOne" class="headerlink" title="updateOne"></a>updateOne</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">updateOne</span>(<span class="params">params</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; adapter, logger &#125; = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; model &#125; = adapter;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; _id &#125; = params;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> timestamp = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="comment">/* eslint-disable no-param-reassign */</span></span><br><span class="line">  params.updated_at = timestamp;</span><br><span class="line">  <span class="comment">/* eslint-enable no-param-reassign */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> model.updateOne(&#123; _id &#125;, params).lean();</span><br><span class="line">    logger.info(<span class="string">&#x27;Update information successfully&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> result.n &gt; <span class="number">0</span> ? &#123; <span class="attr">success</span>: <span class="literal">true</span> &#125; : &#123;&#125;;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    logger.error(error);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ErrorRes(<span class="number">1002</span>, <span class="string">&#x27;Failed to update information to database&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="deleteOne"><a href="#deleteOne" class="headerlink" title="deleteOne"></a>deleteOne</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">deleteOne</span>(<span class="params">filter</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; adapter, logger &#125; = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; model &#125; = adapter;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> model.deleteOne(filter).lean();</span><br><span class="line">    logger.info(<span class="string">&#x27;Delete information successfully&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> result.n &gt; <span class="number">0</span> ? &#123; <span class="attr">success</span>: <span class="literal">true</span> &#125; : &#123;&#125;;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    logger.error(error);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ErrorRes(<span class="number">1003</span>, <span class="string">&#x27;Failed to remove information to database&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="把-API-加進-api-service-js"><a href="#把-API-加進-api-service-js" class="headerlink" title="把 API 加進 api.service.js"></a>把 API 加進 api.service.js</h1><ul>
<li>直接看第 99 行 ～ 第 125 行那邊</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// No authentication, authorization needed</span></span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/api&#x27;</span>,</span><br><span class="line">  <span class="attr">aliases</span>: &#123;</span><br><span class="line">    <span class="comment">// users</span></span><br><span class="line">    <span class="string">&#x27;POST /users/addUser&#x27;</span>: <span class="string">&#x27;v1.users.addUser&#x27;</span>,</span><br><span class="line">    <span class="comment">// informations</span></span><br><span class="line">    <span class="string">&#x27;POST /informations/getInformation&#x27;</span>: <span class="string">&#x27;v1.informations.getInformation&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST /informations/getInformations&#x27;</span>: <span class="string">&#x27;v1.informations.getInformations&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mappingPolicy</span>: <span class="string">&#x27;restrict&#x27;</span>,</span><br><span class="line">  <span class="attr">bodyParsers</span>: &#123;</span><br><span class="line">    <span class="attr">json</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> Authentication, Authorization</span></span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/admin&#x27;</span>,</span><br><span class="line">  <span class="attr">aliases</span>: &#123;</span><br><span class="line">    <span class="comment">// users</span></span><br><span class="line">    <span class="string">&#x27;POST /users/getUser&#x27;</span>: <span class="string">&#x27;v1.users.getUser&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST /users/getUsers&#x27;</span>: <span class="string">&#x27;v1.users.getUsers&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST /users/modifyUser&#x27;</span>: <span class="string">&#x27;v1.users.modifyUser&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST /users/removeUser&#x27;</span>: <span class="string">&#x27;v1.users.removeUser&#x27;</span>,</span><br><span class="line">    <span class="comment">// informations</span></span><br><span class="line">    <span class="string">&#x27;POST /informations/addInformation&#x27;</span>: <span class="string">&#x27;v1.informations.addInformation&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST /informations/getInformation&#x27;</span>: <span class="string">&#x27;v1.informations.getInformation&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST /informations/getInformations&#x27;</span>: <span class="string">&#x27;v1.informations.getInformations&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST /informations/modifyInformation&#x27;</span>: <span class="string">&#x27;v1.informations.modifyInformation&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST /informations/removeInformation&#x27;</span>: <span class="string">&#x27;v1.informations.removeInformation&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mappingPolicy</span>: <span class="string">&#x27;restrict&#x27;</span>,</span><br><span class="line">  <span class="attr">bodyParsers</span>: &#123;</span><br><span class="line">    <span class="attr">json</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如此一來， <code>npm run dev</code> 後就能夠使用 API 了！</p>
<blockquote>
<p>用 Postman 測試的時候，tags_id 隨便給一個值就好（只要是 string 都行）</p>
</blockquote>
<h1 id="一些-Q＆A"><a href="#一些-Q＆A" class="headerlink" title="一些 Q＆A"></a>一些 Q＆A</h1><h2 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h2><p><strong>Ｑ：關於 services/student.service.js 裡⾯第 16 ⾏的 adapter 是什麼東西？我 google 不太到我想要的資訊。</strong></p>
<p>我先 google「adapter 中⽂」，得到了「適配器」這個答案，那因為我不知道「適配器」到底是什麼東西，所有我就改⽤「圖⽚」來搜尋，（欣賞 adapter），欣賞了好幾張以後我猜測它應該就是類似「轉接頭」的東西吧？</p>
<p>「轉接頭」跟「開發」到底有什麼關係啊？我⼼中萌⽣了這個疑問。</p>
<p>後來我再回去看 students.service.js，裡⾯第 19 ⾏有個叫「MongooseAdapter」的 keyword，想說這詞結合了我們開發⽤的「mongoose」⼜有個「adapter」，也許 google 它會有我們想得到的資訊吧？</p>
<p>搜尋「MongooseAdapter」得到了很雜的資訊，改搜尋「database adapter」，上⾯的⽂字敘述看了還是沒很清楚，就⼜改⽤「圖⽚」，找到了這張：</p>
<p><img src="2.png"></p>
<p>再結合剛剛猜測的「轉接頭」，我就認為說「adapter」就是⼀個讓使⽤者更好操作 DB 的「轉接頭」，我們只要專注在別⼈幫我們包好、⽐較好寫、不必擔⼼語⾔障礙的「這⼀端」就好，「另外⼀端」就讓 adapter 去跟 DB 做交涉。</p>
<h2 id="JavaScript-解構"><a href="#JavaScript-解構" class="headerlink" title="JavaScript 解構"></a>JavaScript 解構</h2><p><strong>Ｑ：還有想簡單問⼀下 StudentModel 裡⾯的 param 為什麼 ValidateTypes 前⾯要加「…」？ （services/students.service.js 的 addStudent 的 params)</strong></p>
<p>那個是 JS 的「解構」語法。</p>
<p>我下的關鍵字是「js …」，google 會推薦我搜尋「js …args」，於是我找到了「<a href="https://stackoverflow.com/questions/42184674/what-is-the-meaning-of-args-three-dots-in-a-function-definition">What is the meaning of “…args” (three dots) in a function definition?</a>」，⼜間接找到了「Spread syntax」，看⼀看裡⾯的範例就⼤概知道那是⽤來做什麼的了。</p>
<p>舉個例⼦，有個 object 定義為 <code>me = &#123; name: &#39;Tim&#39;, college: &#39;NCTU&#39; &#125;</code></p>
<p>當我要定義另外⼀個 object 但沒加上 <code>...</code> 時：</p>
<p><code>moreAboutMe = &#123; me, gender: &#39;male&#39; &#125;</code> 它會是 <code>&#123; &#123; name: &#39;Tim&#39;, college: &#39;NCTU&#39; &#125;, gender: &#39;male&#39; &#125;</code></p>
<p>另外⼀種也就是有加上 <code>...</code> 的版本：</p>
<p><code>moreAboutMe = &#123; ...me, gender: &#39;male&#39; &#125;</code> 它就會是 <code>&#123; name: &#39;Tim&#39;, college: &#39;NCTU&#39;, gender: &#39;male&#39; &#125;</code></p>
<p>從上⾯的例⼦可以看出它發揮「解構」的功⽤了！</p>
<h2 id="Validator"><a href="#Validator" class="headerlink" title="Validator"></a>Validator</h2><p><strong>Ｑ：validator 那邊，你給的⽂檔只有 validateBeforeSave 跟 validateSync ⽽已，沒有看到類似validator 的寫法。可以說是在哪⼀段有嗎？我是有看到 mongoDB 有 validate 這個 commend 跟這個有關係嗎？</strong></p>
<p>後來我在左側欄位「Guides」底下有個叫「Validation」的那邊有看到〜 <a href="https://mongoosejs.com/docs/validation.html#custom-validators">Custom Validators</a></p>
<h2 id="type-forbidden"><a href="#type-forbidden" class="headerlink" title="type forbidden"></a>type forbidden</h2><p><strong>Ｑ：然後最後⾯有⼀個 key 是⽤來寄推薦信的驗證碼的，這裡 type <code>forbidden</code> 這個是你訂的嗎？ 因為我去 mongoDB 查沒有這個 type，這個意思是說使⽤者不能輸⼊的意思嗎？所以打這樣電腦會⾃動⽣ key？</strong></p>
<p>可能是為了防⽌ client 在 addStudent 的時候也⾃⼰指定了 key 的值，所以⽤「forbidden」把它擋下來。</p>
<p>我猜 key 可能是讓 account service 來⽣成，因為那邊有個「TODO{ create password to accounts service」</p>
<p>等等……好像真的找不到 forbidden 的 type 誒XD</p>
<h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><p><strong>Ｑ：第 38 ⾏的 handler 是哪裡的？ mongoDB mongoose？ 不太理解 handler 的意思🤔🤔</strong></p>
<p>我覺得它的作⽤應該就像 eggjs「controller 調⽤ service」那樣，所以應該是屬於「Moleculer」的，也許可以把「handler」想成像是 addStudent 的 function 本體，上⾯的 params 就僅僅是定義參數的規則。</p>
<br>
今天的分享就到這邊，我們下篇文見吧 😃]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>Moleculer</tag>
        <tag>CRUD</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 操作 Android 手機</title>
    <url>/2021/07/python-android-phone/</url>
    <content><![CDATA[<p><a href="/2021/07/python-android-phone"><img src="https://images.unsplash.com/photo-1607252650355-f7fd0460ccdb?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1500&q=80" style="width:50vw;" /></a></p>
<!-- <img src="0.jpeg" style="width:50vw;" /> -->

<p>玩遊戲有些時候，常常需要一直點、一直點、一直點，實在有夠浪費時間⋯⋯</p>
<span id="more"></span>

<p>像我玩 NBA LIVE 的時候，每次拍賣過期的物品都要一個一個去關閉，而且每個點完還需要再等大概 3 秒才能再點下一個！</p>
<p>試算一下，如圖，我還有 96 個還沒關閉，一個以 3 秒來計算，96 * 3 = 288 秒，我得花快 5 分鐘才能全部點完，而且是要一直手點哦！</p>
<p><img src="1.png"></p>
<p>幸好，無意間在網路上找到了「<a href="https://itnext.io/how-you-can-control-your-android-device-with-python-45c3ab15e260">How you can Control your Android Device with Python</a>」這篇文，解救了我的時間，也讓我大開眼界～</p>
<hr>
<h2 id="裝-adb"><a href="#裝-adb" class="headerlink" title="裝 adb"></a>裝 adb</h2><h3 id="adb-是什麼呢？"><a href="#adb-是什麼呢？" class="headerlink" title="adb 是什麼呢？"></a>adb 是什麼呢？</h3><p><a href="https://developer.android.com/studio/command-line/adb">官方文檔</a>上是這樣寫的：<br>Android Debug Bridge (adb) is a versatile command-line tool that lets you communicate with a device.</p>
<h3 id="用-Homebrew-裝"><a href="#用-Homebrew-裝" class="headerlink" title="用 Homebrew 裝"></a>用 Homebrew 裝</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install android-platform-tools</span><br></pre></td></tr></table></figure>

<p>當你在終端機輸入 <code>adb</code> 有秀出東西就代表裝成功了！<br>（其他安裝方式可以參考<a href="https://stackoverflow.com/questions/17901692/set-up-adb-on-mac-os-x">這一篇</a>）</p>
<hr>
<h2 id="裝-pure-python-adb"><a href="#裝-pure-python-adb" class="headerlink" title="裝 pure-python-adb"></a>裝 pure-python-adb</h2><h3 id="它是什麼？"><a href="#它是什麼？" class="headerlink" title="它是什麼？"></a>它是什麼？</h3><p>可以把它想成，這個套件可以讓我們透過 Python，用更簡單地方式來和 adb 做溝通。<br>也就是能用更高階的 interface，去操作底層的東西。</p>
<h3 id="用-pip-裝"><a href="#用-pip-裝" class="headerlink" title="用 pip 裝"></a>用 pip 裝</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pure-python-adb</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="手機端的設置"><a href="#手機端的設置" class="headerlink" title="手機端的設置"></a>手機端的設置</h2><h3 id="啟用開發人員選項"><a href="#啟用開發人員選項" class="headerlink" title="啟用開發人員選項"></a>啟用開發人員選項</h3><p>以我的 HTC U11 plus 為例：<br>設定 → 系統 → 關於手機 → 軟體資訊 → 更多 → <strong>連續點 7 下「版本號碼」</strong></p>
<h3 id="允許連接-USB-時進入偵錯模式"><a href="#允許連接-USB-時進入偵錯模式" class="headerlink" title="允許連接 USB 時進入偵錯模式"></a>允許連接 USB 時進入偵錯模式</h3><p>設定 → 系統 → 開發人員選項 → 開啟「USB 偵錯」</p>
<hr>
<h2 id="手機連電腦"><a href="#手機連電腦" class="headerlink" title="手機連電腦"></a>手機連電腦</h2><p>手機用 USB 接上電腦後，就可以來試驗囉！</p>
<h3 id="啟動-adb-server"><a href="#啟動-adb-server" class="headerlink" title="啟動 adb server"></a>啟動 adb server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb start-server</span><br></pre></td></tr></table></figure>

<p>此時，手機畫面上會出現「允許 USB 偵錯嗎？」，按確定就行了。</p>
<hr>
<h2 id="寫-code-解決問題"><a href="#寫-code-解決問題" class="headerlink" title="寫 code 解決問題"></a>寫 code 解決問題</h2><h3 id="找出螢幕某一點的位置"><a href="#找出螢幕某一點的位置" class="headerlink" title="找出螢幕某一點的位置"></a>找出螢幕某一點的位置</h3><p>如果想用 pure-python-adb 點螢幕，就必須要給它座標。<br>該怎麼找呢？設定 → 系統 → 開發人員選項 → 打開「輸入」底下的「指標位置」<br>如此一來，點螢幕的時候，螢幕最上面就看得到座標了！</p>
<h3 id="寫程式"><a href="#寫程式" class="headerlink" title="寫程式"></a>寫程式</h3><p>啟發我靈感的<a href="https://itnext.io/how-you-can-control-your-android-device-with-python-45c3ab15e260">這篇文</a>有解釋程式碼的部分，這邊就不重複了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ppadb.client <span class="keyword">import</span> Client <span class="keyword">as</span> AdbClient</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span>():</span></span><br><span class="line"></span><br><span class="line">  client = AdbClient(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">5037</span>)</span><br><span class="line"></span><br><span class="line">  devices = client.devices()</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(devices) == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;No devices&#x27;</span>)</span><br><span class="line">    quit()</span><br><span class="line"></span><br><span class="line">  device = devices[<span class="number">0</span>]</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&#x27;Connected to <span class="subst">&#123;device&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> device, client</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">  device, client = connect()</span><br><span class="line"></span><br><span class="line">  close_button = <span class="string">&#x27;2120 325&#x27;</span>   <span class="comment"># x y 這邊填上按鈕的指標位置</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    device.shell(<span class="string">f&#x27;input tap <span class="subst">&#123;close_button&#125;</span>&#x27;</span>)   <span class="comment"># 點按指定的位置</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>跑程式以後，手機就照著指令動作了！（畫面最上面就是顯示指標位置的 bar）</p>
<p><img src="2.gif"></p>
<p>酷斃了 😎</p>
<h3 id="用完把-adb-server-給關掉"><a href="#用完把-adb-server-給關掉" class="headerlink" title="用完把 adb server 給關掉"></a>用完把 adb server 給關掉</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb kill-server</span><br></pre></td></tr></table></figure>

<h3 id="其他相關工具"><a href="#其他相關工具" class="headerlink" title="其他相關工具"></a>其他相關工具</h3><p><a href="https://github.com/Genymobile/scrcpy">scrcpy</a></p>
<br>
今天的分享就到這邊，我們下篇文見吧 😃]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Android</tag>
        <tag>小工具</tag>
      </tags>
  </entry>
  <entry>
    <title>當 Python 遇上了 LINE Blockchain</title>
    <url>/2021/07/python-line-blockchain/</url>
    <content><![CDATA[<p><a href="/2021/07/python-line-blockchain"><img src="https://images.unsplash.com/photo-1561451213-d5c9f0951fdf?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2689&q=80" style="width:50vw;" /></a></p>
<!-- <img src="0.jpeg" style="width:50vw;" /> -->

<p>可能是因為比較新的關係，在網路上頗難找到用 Python 弄 LINE Blockchain 的教學文。<br>本篇主要會以筆記的方式，簡單帶大家看要怎麼使用。</p>
<span id="more"></span>

<p>這篇的誕生，一樣也是因為升大四暑假的那一場線上黑客松。<br>（黑客松真的是個不錯的活動呢，累歸累，但學到了不少東西）</p>
<h1 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h1><h2 id="啟用服務"><a href="#啟用服務" class="headerlink" title="啟用服務"></a>啟用服務</h2><p>還沒啟用 LINE Blockchain 前，創 channel 的時候 Blockchain Service 的地方會暗掉不讓你按。</p>
<p><img src="1.png"></p>
<p>到 LINE Blockchain Developers 的 <a href="https://blockchain.line.biz/#/pricing">Pricing</a> 頁面選一個方案開始吧！</p>
<p><img src="2.png"></p>
<p>光是用商用帳號不夠哦，還得連動我們自己的 LINE 帳號。</p>
<p><img src="3.png"></p>
<p>連動完就 OK 了嗎？還沒哦！我們還要申請一個 Cashew Partner 帳戶才行，就 Apply 吧！</p>
<p><img src="4.png"></p>
<p>不是按完 Apply 就能啟用，還得再等他們 reviewing。<br>這個申請是需要時間等待的，我等了快五小時半！</p>
<p><img src="5.png"></p>
<p>申請通過以後，創建 channel 時就能選 Blockchain Service 囉！</p>
<h2 id="LINE-Blockchain"><a href="#LINE-Blockchain" class="headerlink" title="LINE Blockchain"></a>LINE Blockchain</h2><p>YouTube 頻道 <a href="https://www.youtube.com/channel/UCuzvuO3E9XIoreE9u7B1ETw">LINE Developers</a> 有個教學影片 <a href="https://youtu.be/tx1Q6GbIpwM?t=367">An Introduction to LINE Blockchain Platform</a> 介紹得很好，它有 step-by-step 的操作步驟！<br>如果不是要用 JavaScript，影片差不多看到 12:37 就行了。</p>
<p>那如果你想學怎麼用 JavaScript 弄 LINE Blockchain，或許可以參考影片裡面的 repo <a href="https://github.com/behumble/line-blockchain-coffee">line-blockchain-coffee</a>。</p>
<p>又或者你想更有系統地學習 LINE Blockchain？<a href="https://docs-blockchain.line.biz/service-tutorial/?id=tutorial-map">官方教學文檔</a>是個不錯的地方！（只不過它是用 curl）</p>
<h1 id="Python-code"><a href="#Python-code" class="headerlink" title="Python code"></a>Python code</h1><h2 id="Generating-signature"><a href="#Generating-signature" class="headerlink" title="Generating signature"></a>Generating signature</h2><p>因為 call LINE Blockchain 的 API 需要 signature，所以先來寫(抄) signature 的部分吧！<br><a href="https://docs-blockchain.line.biz/api-guide/Generating-Signature?id=python-sample">官方文檔</a>上有範例 code，我想，我們就直接拿來用吧！</p>
<h3 id="request-flattener-py"><a href="#request-flattener-py" class="headerlink" title="request_flattener.py"></a><code>request_flattener.py</code></h3><p>這是 Signature Generator 會需要用到的 utility。</p>
<p>我沒有特別去研究它每一行 code 分別代表什麼意思，想說這對黑客松來說根本不重要，重要的是能知道怎麼用，然後拿來開發出我們需要的 feature。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestBodyFlattener</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__flatten_key_value</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isinstance</span>(value, <span class="built_in">str</span>)):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;key&#125;</span>=<span class="subst">&#123;value&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isinstance</span>(value, <span class="built_in">list</span>)):</span><br><span class="line">            l_key_value = &#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> index, ele <span class="keyword">in</span> <span class="built_in">enumerate</span>(value):</span><br><span class="line">                <span class="keyword">for</span> lkey <span class="keyword">in</span> <span class="built_in">list</span>(ele.keys() | l_key_value.keys()):</span><br><span class="line">                    <span class="keyword">if</span> lkey <span class="keyword">in</span> ele.keys():</span><br><span class="line">                        lvalue = ele[lkey]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        lvalue = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (lkey <span class="keyword">in</span> l_key_value.keys()):</span><br><span class="line">                        l_key_value[lkey] = <span class="string">f&quot;<span class="subst">&#123;l_key_value[lkey]&#125;</span>,<span class="subst">&#123;lvalue&#125;</span>&quot;</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        l_key_value[lkey] = <span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;,&#x27;</span> * index&#125;</span><span class="subst">&#123;lvalue&#125;</span>&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&amp;&quot;</span>.join(<span class="string">&quot;%s=%s&quot;</span> % (<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>.<span class="subst">&#123;lkey&#125;</span>&quot;</span>, lvalue) <span class="keyword">for</span> (lkey, lvalue) <span class="keyword">in</span> <span class="built_in">sorted</span>(l_key_value.items()))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flatten</span>(<span class="params">self, body: <span class="built_in">dict</span> = &#123;&#125;</span>):</span></span><br><span class="line">        sorted_body = <span class="built_in">sorted</span>(body.items())</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&amp;&quot;</span>.join(self.__flatten_key_value(key, value) <span class="keyword">for</span> (key, value) <span class="keyword">in</span> sorted_body)</span><br></pre></td></tr></table></figure>

<h3 id="signature-generator-py"><a href="#signature-generator-py" class="headerlink" title="signature_generator.py"></a><code>signature_generator.py</code></h3><p>這邊跟官方文檔上有些地方不一樣，像是第 18 行，我改了 generate 的參數順序。</p>
<p>這麼做是因為，它 API reference 那邊 get_signature 的順序跟它在 Generating signature 定義的不一樣，想說未來可能會大量複製貼上它 API 的範例 code，為了未來使用上的方便，乾脆一開始定義的時候照 API reference 的順序不就好了？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> .request_flattener <span class="keyword">import</span> RequestBodyFlattener</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SignatureGenerator</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__createSignTarget</span>(<span class="params">self, method, path, timestamp, nonce, parameters: <span class="built_in">dict</span> = &#123;&#125;</span>):</span></span><br><span class="line">        signTarget = <span class="string">f&#x27;<span class="subst">&#123;nonce&#125;</span><span class="subst">&#123;<span class="built_in">str</span>(timestamp)&#125;</span><span class="subst">&#123;method&#125;</span><span class="subst">&#123;path&#125;</span>&#x27;</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">len</span>(parameters) &gt; <span class="number">0</span>):</span><br><span class="line">            signTarget = signTarget + <span class="string">&quot;?&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> signTarget</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate</span>(<span class="params">self, method: <span class="built_in">str</span>, path: <span class="built_in">str</span>, nonce: <span class="built_in">str</span>, timestamp: <span class="built_in">int</span>, service_api_secret: <span class="built_in">str</span>, query_params: <span class="built_in">dict</span> = &#123;&#125;, body: <span class="built_in">dict</span> = &#123;&#125;</span>):</span></span><br><span class="line">        body_flattener = RequestBodyFlattener()</span><br><span class="line">        all_parameters = &#123;&#125;</span><br><span class="line">        all_parameters.update(query_params)</span><br><span class="line">        all_parameters.update(body)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.__logger.debug(&quot;query_params: &quot; + str(query_params))</span></span><br><span class="line"></span><br><span class="line">        signTarget = self.__createSignTarget(method.upper(), path, timestamp, nonce, all_parameters)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>(query_params) &gt; <span class="number">0</span>):</span><br><span class="line">            signTarget += <span class="string">&#x27;&amp;&#x27;</span>.join(<span class="string">&#x27;%s=%s&#x27;</span> % (key, value) <span class="keyword">for</span> (key, value) <span class="keyword">in</span> query_params.items())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>(body) &gt; <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">len</span>(query_params) &gt; <span class="number">0</span>):</span><br><span class="line">                signTarget += <span class="string">&quot;&amp;&quot;</span> + body_flattener.flatten(body)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                signTarget += body_flattener.flatten(body)</span><br><span class="line"></span><br><span class="line">        raw_hmac = hmac.new(<span class="built_in">bytes</span>(service_api_secret, <span class="string">&#x27;utf-8&#x27;</span>), <span class="built_in">bytes</span>(signTarget, <span class="string">&#x27;utf-8&#x27;</span>), hashlib.sha512)</span><br><span class="line">        result = base64.b64encode(raw_hmac.digest()).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<h2 id="包成自己-project-需要的-function"><a href="#包成自己-project-需要的-function" class="headerlink" title="包成自己 project 需要的 function"></a>包成自己 project 需要的 function</h2><p>以下面兩個為例：</p>
<ul>
<li><a href="https://docs-blockchain.line.biz/api-guide/category-users?id=v1-users-userid-get">Users → Retrieve → Retrieve user information</a></li>
<li><a href="https://docs-blockchain.line.biz/api-guide/category-users?id=v1-users-userid-service-tokens-contractid-transfer-post">Users → Transfer → Transfer a delegated service token (user wallet)</a></li>
</ul>
<p>Details 的地方展開以後，往下滑就能找到 Python 的範例 code！<br>不誇張，直接複製貼上然後再修改，最後在我的 project 上長這樣：</p>
<p><code>users.py</code></p>
<h3 id="底層"><a href="#底層" class="headerlink" title="底層"></a>底層</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># ./utils 是我放 signature_generator.py 的地方</span></span><br><span class="line"><span class="keyword">from</span> .utils.signature_generator <span class="keyword">import</span> SignatureGenerator</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要先實體化才能用（這部分或許有更好的寫法）</span></span><br><span class="line">signatureGenerator = SignatureGenerator()</span><br><span class="line">get_signature = signatureGenerator.generate</span><br></pre></td></tr></table></figure>

<h3 id="Retrieve-user-information"><a href="#Retrieve-user-information" class="headerlink" title="Retrieve user information"></a>Retrieve user information</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用 class 包，這樣在取用的時候會更有條理（待會就知道為什麼了）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">retrieve</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># # Retrieve user information</span></span><br><span class="line">    <span class="comment"># Retrieve the information of the given user.</span></span><br><span class="line">    <span class="comment"># https://docs-blockchain.line.biz/api-guide/category-users?id=v1-users-userid-get</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wallet_address</span>(<span class="params">user_id</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 下面 3 行都是環境變數</span></span><br><span class="line">        server_url = os.environ[<span class="string">&#x27;SERVER_URL&#x27;</span>]</span><br><span class="line">        service_api_key = os.environ[<span class="string">&#x27;SERVICE_API_KEY&#x27;</span>]</span><br><span class="line">        service_api_secret = os.environ[<span class="string">&#x27;SERVICE_API_SECRET&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        nonce = <span class="string">&#x27;&#x27;</span>.join(random.choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>))</span><br><span class="line">        timestamp = <span class="built_in">int</span>(<span class="built_in">round</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line">        path = <span class="string">f&#x27;/v1/users/<span class="subst">&#123;user_id&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&#x27;service-api-key&#x27;</span>: service_api_key,</span><br><span class="line">            <span class="string">&#x27;nonce&#x27;</span>: nonce,</span><br><span class="line">            <span class="string">&#x27;timestamp&#x27;</span>: <span class="built_in">str</span>(timestamp)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        signature = get_signature(<span class="string">&#x27;GET&#x27;</span>, path, nonce, timestamp, service_api_secret)</span><br><span class="line">        headers[<span class="string">&#x27;signature&#x27;</span>] = signature</span><br><span class="line"></span><br><span class="line">        res = requests.get(server_url + path, headers=headers)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 這自己改的，因為我的 project 只需要 wallet address</span></span><br><span class="line">        wallet_address = res.json()[<span class="string">&#x27;responseData&#x27;</span>][<span class="string">&#x27;walletAddress&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wallet_address</span><br></pre></td></tr></table></figure>

<h3 id="Transfer-a-delegated-service-token"><a href="#Transfer-a-delegated-service-token" class="headerlink" title="Transfer a delegated service token"></a>Transfer a delegated service token</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用 class 包，這樣在取用的時候會更有條理（待會就知道為什麼了）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">transfer</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># # Transfer a delegated service token (user wallet)</span></span><br><span class="line">    <span class="comment"># Request to transfer the delegated service token in the given user wallet to another wallet.</span></span><br><span class="line">    <span class="comment"># https://docs-blockchain.line.biz/api-guide/category-users?id=v1-users-userid-service-tokens-contractid-transfer-post</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">service_token</span>(<span class="params">user_id, amount</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 下面 6 行都是環境變數</span></span><br><span class="line">        server_url = os.environ[<span class="string">&#x27;SERVER_URL&#x27;</span>]</span><br><span class="line">        service_api_key = os.environ[<span class="string">&#x27;SERVICE_API_KEY&#x27;</span>]</span><br><span class="line">        service_api_secret = os.environ[<span class="string">&#x27;SERVICE_API_SECRET&#x27;</span>]</span><br><span class="line">        contract_id = os.environ[<span class="string">&#x27;LBP_CONTRACT_ID_LBCC&#x27;</span>]</span><br><span class="line">        owner_address = os.environ[<span class="string">&#x27;LBP_OWNER_WALLET_ADDRESS&#x27;</span>]</span><br><span class="line">        owner_secret = os.environ[<span class="string">&#x27;LBP_OWNER_WALLET_SECRET&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        nonce = <span class="string">&#x27;&#x27;</span>.join(random.choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>))</span><br><span class="line">        timestamp = <span class="built_in">int</span>(<span class="built_in">round</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line">        path = <span class="string">f&#x27;/v1/users/<span class="subst">&#123;user_id&#125;</span>/service-tokens/<span class="subst">&#123;contract_id&#125;</span>/transfer&#x27;</span></span><br><span class="line"></span><br><span class="line">        request_body = &#123;</span><br><span class="line">            <span class="string">&#x27;ownerAddress&#x27;</span>: <span class="string">f&#x27;<span class="subst">&#123;owner_address&#125;</span>&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;ownerSecret&#x27;</span>: <span class="string">f&#x27;<span class="subst">&#123;owner_secret&#125;</span>&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;amount&#x27;</span>: <span class="string">f&#x27;<span class="subst">&#123;amount * <span class="number">1000000</span>&#125;</span>&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&#x27;service-api-key&#x27;</span>: service_api_key,</span><br><span class="line">            <span class="string">&#x27;nonce&#x27;</span>: nonce,</span><br><span class="line">            <span class="string">&#x27;timestamp&#x27;</span>: <span class="built_in">str</span>(timestamp),</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        signature = get_signature(<span class="string">&#x27;POST&#x27;</span>, path, nonce, timestamp, service_api_secret, body=request_body)</span><br><span class="line">        headers[<span class="string">&#x27;signature&#x27;</span>] = signature</span><br><span class="line"></span><br><span class="line">        res = requests.post(server_url + path, headers=headers, json=request_body)</span><br><span class="line">        <span class="keyword">return</span> res.json()</span><br></pre></td></tr></table></figure>

<p>你會發現，很多範例 code 寫死的部分，我都用 <a href="https://docs.python.org/3/tutorial/inputoutput.html#formatted-string-literals">f-strings</a> 代替，原因你應該知道xD</p>
<h2 id="使用那些-function"><a href="#使用那些-function" class="headerlink" title="使用那些 function"></a>使用那些 function</h2><p>先給大家看我 project 跟 blockchain 有關的目錄結構：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src</span><br><span class="line">├── fsm.py</span><br><span class="line">└── service</span><br><span class="line">    └── blockchain</span><br><span class="line">        ├── service_tokens.py</span><br><span class="line">        ├── users.py</span><br><span class="line">        └── utils</span><br><span class="line">            ├── request_flattener.py</span><br><span class="line">            └── signature_generator.py</span><br></pre></td></tr></table></figure>

<p>下面是 <code>fsm.py</code> 的某個部份：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> service.blockchain <span class="keyword">import</span> users, service_tokens</span><br><span class="line"></span><br><span class="line">user_id = <span class="string">&#x27;this_is_user_id&#x27;</span></span><br><span class="line">amount = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">users.transfer.service_token(user_id, amount)</span><br><span class="line">user_wallet_address = users.retrieve.wallet_address(user_id)</span><br><span class="line">service_tokens.mint(user_wallet_address, amount)   <span class="comment"># 這部分的 code 我沒 share</span></span><br></pre></td></tr></table></figure>

<p>知道為什麼我要包成 class 了吧？這樣就能夠照文檔編排的邏輯 call function！</p>
<br>
希望讀完這篇文章的您能夠有所收穫，我們下篇文見啦 😃]]></content>
      <tags>
        <tag>交大</tag>
        <tag>Python</tag>
        <tag>黑客松</tag>
        <tag>LINE</tag>
        <tag>Blockchain</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 將 PDF 文檔轉成 PNG 圖檔</title>
    <url>/2021/06/python-pdf-to-png/</url>
    <content><![CDATA[<p><a href="/2021/06/python-pdf-to-png"><img src="https://images.unsplash.com/photo-1551029506-0807df4e2031?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2691&q=80" style="width:50vw;" /></a></p>
<!-- <img src="0.jpeg" style="width:50vw;" /> -->

<p>想把 PDF 轉成圖檔，卻又擔心交給線上工具處理會不會有什麼安全上的疑慮？交給 Python 吧！</p>
<span id="more"></span>

<p>本篇大量包含解決問題的思考過程，想省略，裝完套件以後就直接跳到最後面吧！</p>
<h3 id="上網找解決辦法"><a href="#上網找解決辦法" class="headerlink" title="上網找解決辦法"></a>上網找解決辦法</h3><p>試著 google「pdf to png python」，找到了 <a href="https://pypi.org/project/pdf2image/">pdf2image</a>。</p>
<blockquote>
<p>A python (3.6+) module that wraps pdftoppm and pdftocairo to convert PDF to a PIL Image object</p>
</blockquote>
<p>看起來，這就是我們要的！</p>
<h3 id="安裝相關套件"><a href="#安裝相關套件" class="headerlink" title="安裝相關套件"></a>安裝相關套件</h3><p>本教學以 Mac 為例，其他作業系統的安裝方式請參見 <a href="https://pypi.org/project/pdf2image/">PyPI 上面的說明</a>。</p>
<p>因為 pdf2image 是基於 Poppler 開發出來的，所以在安裝 pdf2image 前，先來裝 Poppler 吧！</p>
<ol>
<li>打開 Terminal 或 iTerm 之類的終端機</li>
<li>輸入 <code>brew</code> 看有沒有裝 Homebrew，如果還沒裝就上網找資料裝一裝吧！<br>不過 <a href="http://macappstore.org/poppler/">Poppler 的安裝頁面</a>有提供我們裝 Homebrew 的指令，就看要不要直接用，或是另找其他安裝方式也行。</li>
<li>用 Homebrew 裝 Poppler：在終端機上輸入 <code>brew install poppler</code> 就行囉！<br>（如果出現 <code>Updating Homebrew...</code> 可以用 <code>Ctrl+C</code> 跳過更新的程序，不然可能會卡很久）</li>
<li>用 pip 裝 pdf2image：<code>pip install pdf2image</code></li>
</ol>
<p>這樣相關套件就裝完囉，準備來使用吧！</p>
<h3 id="簡單玩一下套件"><a href="#簡單玩一下套件" class="headerlink" title="簡單玩一下套件"></a>簡單玩一下套件</h3><p>畢竟之前沒弄過，不確定這符不符合我們的需求。<br>所以在嘗試解決問題之前，先小玩一下～<br><a href="https://pypi.org/project/pdf2image/">pdf2image 頁面</a>有程式碼，就照上面的 code 試試：</p>
<ol>
<li><p>import pdf2image 相關套件</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pdf2image <span class="keyword">import</span> convert_from_path, convert_from_bytes</span><br><span class="line"><span class="keyword">from</span> pdf2image.exceptions <span class="keyword">import</span> (</span><br><span class="line">    PDFInfoNotInstalledError,</span><br><span class="line">    PDFPageCountError,</span><br><span class="line">    PDFSyntaxError</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li><p>第一段程式碼看起來比較簡單，就試那個吧：（檔案的 path 記得要改，可以用相對路徑）</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">images = convert_from_path(<span class="string">&#x27;/home/belval/example.pdf&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p><code>images</code> 不知道該怎麼用，就 print 出來看一下囉，<code>print(images)</code>，輸出了這些：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&lt;PIL.PpmImagePlugin.PpmImageFile image mode=RGB size=1654x2339 at 0x115B32D90&gt;,</span><br><span class="line"> &lt;PIL.PpmImagePlugin.PpmImageFile image mode=RGB size=1654x2339 at 0x115B99B50&gt;,</span><br><span class="line"> &lt;PIL.PpmImagePlugin.PpmImageFile image mode=RGB size=1654x2339 at 0x115B99B90&gt;,</span><br><span class="line"> &lt;PIL.PpmImagePlugin.PpmImageFile image mode=RGB size=1654x2339 at 0x115BA2BD0&gt;,</span><br><span class="line"> &lt;PIL.PpmImagePlugin.PpmImageFile image mode=RGB size=1654x2339 at 0x115BA2FD0&gt;]</span><br></pre></td></tr></table></figure>

<p> （list 裡面 PIL 的個數取決於 PDF 檔的頁數）</p>
</li>
<li><p>PIL 是什麼東西啊？應該跟 image 有關吧？於是我 google「PIL Image」，找到了<a href="https://ithelp.ithome.com.tw/articles/10226578">這篇</a>。<br>看那篇文裡面的 code 有 <code>from PIL import Image</code>，該不會又要裝套件了吧⋯⋯<br>不管，先試著直接 import PIL，發現可以欸，代表說本機端已經有 PIL 套件了！<br><a href="https://github.com/Belval/pdf2image/blob/master/.travis.yml">後來發現</a>，原來在裝 pdf2image 時，它就幫我們裝好了 pillow (PIL)。</p>
</li>
<li><p>有點不務正業，來照<a href="https://ithelp.ithome.com.tw/articles/10226578">剛剛那篇文</a>試試 PIL 吧，說不定能有什麼新發現。</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&quot;test.jpeg&quot;</span>)</span><br><span class="line">im.save(<span class="string">&quot;test.png&quot;</span>,<span class="string">&quot;png&quot;</span>)</span><br></pre></td></tr></table></figure>

<p> 還真的生成「test.png」了呢！那 <code>im</code> 又是什麼呢？好奇 print 一下，輸出了這個：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=1500x1000 at 0x10D9FAE50&gt;</span><br></pre></td></tr></table></figure>

<p> 咦？這跟剛剛 <code>images</code> print 出來的東西很像欸，該不會⋯⋯</p>
</li>
<li><p>柳暗花明又一村：（承接剛剛的 <code>images</code>）</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i, image <span class="keyword">in</span> <span class="built_in">enumerate</span>(images):</span><br><span class="line">  image.save(<span class="string">f&#x27;<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>.png&#x27;</span>, <span class="string">&#x27;png&#x27;</span>)   <span class="comment"># 如果想從 1 開始數的話</span></span><br></pre></td></tr></table></figure>

<p> 還真的可以欸😂</p>
</li>
</ol>
<h3 id="用套件解決問題"><a href="#用套件解決問題" class="headerlink" title="用套件解決問題"></a>用套件解決問題</h3><p>過程中有不懂或忘記的就 google 吧：</p>
<ul>
<li>忘記怎麼判斷字串中有無某 substring → google「python test substring」→ 找到「<a href="https://www.afternerd.com/blog/python-string-contains/">Check if a String Contains Another String</a>」</li>
<li>忘記怎麼用 Python 創建資料夾 → google「python os mkdir」→ 找到「<a href="https://www.runoob.com/python/os-mkdir.html">Python os.mkdir()</a>」</li>
</ul>
<p>最後生出來的 code：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pdf2image <span class="keyword">import</span> convert_from_path, convert_from_bytes</span><br><span class="line"><span class="keyword">from</span> pdf2image.exceptions <span class="keyword">import</span> (</span><br><span class="line">    PDFInfoNotInstalledError,</span><br><span class="line">    PDFPageCountError,</span><br><span class="line">    PDFSyntaxError</span><br><span class="line">)</span><br><span class="line"><span class="comment"># from PIL import image                         # 後來發現不需要 import 這個</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> os.listdir(<span class="string">&quot;.&quot;</span>):                    <span class="comment"># 取得當前目錄下的所有檔名</span></span><br><span class="line">  <span class="keyword">if</span> <span class="string">&#x27;.pdf&#x27;</span> <span class="keyword">in</span> name:                            <span class="comment"># 只對 PDF 做處理</span></span><br><span class="line">    the_dir = <span class="string">f&#x27;<span class="subst">&#123;name[:-<span class="number">4</span>]&#125;</span>&#x27;</span>                    <span class="comment"># 用 PDF 的檔名當作新資料夾的名稱</span></span><br><span class="line">    os.mkdir(the_dir)                           <span class="comment"># 新建該檔名的資料夾</span></span><br><span class="line">    images = convert_from_path(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>&#x27;</span>)       <span class="comment"># 將 PDF 轉成多個 PIL 相關物件</span></span><br><span class="line">    <span class="keyword">for</span> i, image <span class="keyword">in</span> <span class="built_in">enumerate</span>(images):          <span class="comment"># 針對每個物件去做處理</span></span><br><span class="line">      image.save(<span class="string">f&#x27;<span class="subst">&#123;the_dir&#125;</span>/<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>.png&#x27;</span>, <span class="string">&#x27;png&#x27;</span>) <span class="comment"># 在新資料夾底下存成 PNG 檔</span></span><br></pre></td></tr></table></figure>

<p>如此一來，就不必丟到網路上給別人處理了呢！</p>
<br>
今天的分享就到這邊，我們下篇文見吧 😃]]></content>
      <tags>
        <tag>Python</tag>
        <tag>小工具</tag>
      </tags>
  </entry>
  <entry>
    <title>用一點樂理和音訊處理技術做簡單的音色轉換</title>
    <url>/2020/09/summer-project/</url>
    <content><![CDATA[<p><a href="/2020/09/summer-project"><img src="https://images.unsplash.com/photo-1530623288743-52a89e908add?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2700&q=80" style="width:50vw;" /></a></p>
<!-- <img src="1.jpeg" style="width:50vw;" /> -->

<p>2020 升大三的暑假，和康明軒教授、恩衍、育浚一起做了「音訊處理」的專題。</p>
<span id="more"></span>

<p>（康明軒教授提供數學上的幫助、恩衍做降噪、育浚做其他也很有趣的聲音處理）</p>
<h1 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h1><p>先給大家聽聽看我最後上台發表的成果吧！</p>
<h2 id="分析＆合成音色"><a href="#分析＆合成音色" class="headerlink" title="分析＆合成音色"></a>分析＆合成音色</h2><table>
<thead>
<tr>
<th align="center">樂器</th>
<th align="center">待分析的音檔</th>
<th align="center">合成出來</th>
<th align="center">演奏音階</th>
</tr>
</thead>
<tbody><tr>
<td align="center">小號</td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=1" target="_blank">01</a></td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=4" target="_blank">02</a></td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=7" target="_blank">03</a></td>
</tr>
<tr>
<td align="center">雙簧管</td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=12" target="_blank">04</a></td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=15" target="_blank">05</a></td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=18" target="_blank">06</a></td>
</tr>
<tr>
<td align="center">管風琴</td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=24" target="_blank">07</a></td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=27" target="_blank">08</a></td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=30" target="_blank">09</a></td>
</tr>
</tbody></table>
<h2 id="改變音色"><a href="#改變音色" class="headerlink" title="改變音色"></a>改變音色</h2><table>
<thead>
<tr>
<th align="center">音樂</th>
<th align="center">原音檔</th>
<th align="center">小號</th>
<th align="center">雙簧管</th>
<th align="center">管風琴</th>
</tr>
</thead>
<tbody><tr>
<td align="center">生命之名</td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=36" target="_blank">10</a></td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=46" target="_blank">11</a></td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=54" target="_blank">12</a></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">New Thang</td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=64" target="_blank">13</a></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"><a href="https://youtu.be/VWO0FyNmOBw?t=75" target="_blank">14</a></td>
</tr>
</tbody></table>
<hr>
<h1 id="預備知識"><a href="#預備知識" class="headerlink" title="預備知識"></a>預備知識</h1><h2 id="音訊預處理"><a href="#音訊預處理" class="headerlink" title="音訊預處理"></a>音訊預處理</h2><h3 id="為何要數位化"><a href="#為何要數位化" class="headerlink" title="為何要數位化"></a>為何要數位化</h3><p><span style="color:blue;">電腦如何將聲音訊號由類比轉成數位呢？</span><br>先講為什麼要轉成數位好了。<br>「電腦處理聲音」這件事情，其實就是在對聲音做運算，<br>和類比也就是連續訊號相比，離散訊號的運算量小多了！<br>所以在電腦處理聲音之前，必須先讓聲音變成離散資料。<br>那該怎麼轉成數位呢？<br>只要讓聲音經過 <span style="color:red;">取樣 (sampling)</span> 以及 <span style="color:red;">量化 (quantization)</span> 的過程就可以囉！</p>
<h3 id="音檔參數"><a href="#音檔參數" class="headerlink" title="音檔參數"></a>音檔參數</h3><p>在介紹取樣、量化之前，先給大家認識一下<span style="color:blue;">聲音檔案的重要參數</span>。</p>
<ul>
<li><strong><span style="color:black;">持續時間 (duration)</span></strong>：音檔總共有多少秒</li>
<li><strong><span style="color:black;">持續時間 (duration)</span></strong>：音檔總共有多少秒</li>
<li><strong><span style="color:black;">取樣頻率 (sampling rate)</span></strong>：一秒鐘要取多少個取樣點（聲音檔案通常會採用 48000 或 44100 赫茲，跟取樣定理有關）</li>
<li><strong><span style="color:black;">位元深度 (bit depth)</span></strong>：一個取樣點要用多少個位元紀錄（位元深度越大的話，會越精準，但相對而言，資料量也就越大！）</li>
<li><strong><span style="color:black;">聲道數 (channel)</span></strong>：其實就是我們常聽到的單聲道、雙聲道等等的<br></li>
</ul>
<h3 id="取樣＆量化"><a href="#取樣＆量化" class="headerlink" title="取樣＆量化"></a><span style="color:blue;">取樣＆量化</span><br></h3><div style="padding:11px;">
  <!-- <img src="https://ftp.bmp.ovh/imgs/2020/09/22d22a83403f9d39.png" style="width:43vw;" />
  <img src="https://ftp.bmp.ovh/imgs/2020/09/2c03857179f3c285.png" style="width:43vw;" />
   -->
  <img src="2.png" style="width:43vw;" />
  <img src="3.png" style="width:43vw;" />
</div>

<ul>
<li><strong><span style="color:black;">取樣 (sampling)</span></strong>：透過<span style="color:red;">取樣頻率</span>，也就是一秒鐘要取多少個取樣點，將<span style="color:red;">時間軸</span>上的資料離散化，得到一串取樣點（如上圖）</li>
<li><strong><span style="color:black;">量化 (quantization)</span></strong>：依照<span style="color:red;">位元深度</span>，也就是一個取樣點要用多少個位元紀錄，分別對每個取樣點做四捨五入，將<span style="color:red;">振幅軸</span>上的資料離散化，最後就會得到一串數列（如下圖）<br></li>
</ul>
<h3 id="聲音訊號如何被處理"><a href="#聲音訊號如何被處理" class="headerlink" title="聲音訊號如何被處理"></a>聲音訊號如何被處理</h3><p>訊號轉成數位了，那<span style="color:blue;">電腦如何處理聲音訊號呢？</span><br>打個比方好了：<br>在開始進行一個大任務之前，我們通常會先拆解成多個小行動，然後再各個擊破！<br>處理聲音也是同樣道理，<br>我們只要把一段音訊切成一個一個小<span style="color:red;">音框</span>，乘上<span style="color:red;">窗函數</span>重疊以後，就可以開始做後續的處理。</p>
<h3 id="切取音框"><a href="#切取音框" class="headerlink" title="切取音框"></a><span style="color:blue;">切取音框</span><br></h3><div style="padding:22px;">
  <!-- <img src="https://ftp.bmp.ovh/imgs/2020/09/f6576ad5edcadf43.png" style="width:43vw;" /> -->
  <img src="4.png" style="width:43vw;" />
</div>

<p>在分析一段音訊的時候，我們通常是以<span style="color:red;">短時距分析</span>為主，<br>因為聲音訊號在短時間之內是<span style="color:red;">相對穩定</span>的！<br>所以我們通常會將音訊切成比較短的單位，稱為<span style="color:red;">音框</span> (frame)。<br>那為了方便使用<span style="color:red;">快速傅立葉轉換</span>，我們通常會取 <span style="color:red;">2 的 n 次方</span>個取樣點當作一個音框。<br>然後要注意，音框不能切太大或太小，這樣才能充分擷取音訊的特徵！<br>那為了避免相鄰兩音框的特徵變化過大，一般會讓音框之間有一段<span style="color:red;">重疊</span>的區域，<br>當然重疊的部分越多，對應的<span style="color:red;">運算量</span>也就越大！</p>
<h3 id="音框參數"><a href="#音框參數" class="headerlink" title="音框參數"></a>音框參數</h3><p>帶大家認識一下<span style="color:blue;">切取音框的重要參數</span>。<br></p>
<div style="padding:23px;">
  <!-- <img src="https://ftp.bmp.ovh/imgs/2020/09/ce76456e87ee97c2.png" style="width:43vw;" /> -->
  <img src="5.png" style="width:43vw;" />
</div>

<ul>
<li><strong><span style="color:black;">音框大小 (frame size)</span></strong>：每一個音框內所含有的取樣點個數</li>
<li><strong><span style="color:black;">音框重疊量 (frame overlap)</span></strong>：兩音框間重疊的取樣點個數</li>
<li><strong><span style="color:black;">音框跳距 (hop size)</span></strong>：兩音框起點距離的取樣點個數，相當於 <span style="color:red;">音框大小 - 音框重疊量</span></li>
<li><strong><span style="color:black;">音框率 (frame rate)</span></strong>：每秒出現的音框數目，相當於 <span style="color:red;">取樣頻率 / 音框跳距</span><br></li>
</ul>
<h3 id="套上窗函數"><a href="#套上窗函數" class="headerlink" title="套上窗函數"></a><span style="color:blue;">套上窗函數</span><br></h3><div style="padding:32px;">
  <!-- <img src="https://ftp.bmp.ovh/imgs/2020/09/625f058dba3db937.png" style="width:52vw;" /> -->
  <img src="6.png" style="width:52vw;" />
</div>

<p>原本完整的聲音波形，<span style="color:red;">被音框硬生生地截斷</span>，頻譜將會產生誤差，該怎麼辦呢？<br>我們只要透過乘上一個<span style="color:red;">中央高、兩側低的窗函數 (window function)</span>，<br>讓音框內兩端的訊號達到 fade-in、fade-out 的效果，就可以增加音框左右兩端的<span style="color:red;">連續性</span>了！</p>
<hr>
<h2 id="音色"><a href="#音色" class="headerlink" title="音色"></a>音色</h2><h3 id="聲音三要素"><a href="#聲音三要素" class="headerlink" title="聲音三要素"></a><span style="color:blue;">聲音三要素</span><br></h3><div style="padding:5px;">
  <!-- <img src="https://ftp.bmp.ovh/imgs/2020/09/ede9088994b2a6b4.png" style="width:52vw;" /> -->
  <img src="7.png" style="width:52vw;" />
</div>
待會只會介紹音色。<br>

<h3 id="什麼是音色"><a href="#什麼是音色" class="headerlink" title="什麼是音色"></a>什麼是<span style="color:blue;">音色</span></h3><p>音色是一個可以讓聆聽者<span style="color:red;">分辨</span>出聲音聽起來不同的聲音特性，<br>藉由音色資訊，我們可以分辨出究竟現在聽到的聲音是人聲還是某種樂器聲，<br>不受音高不同及音量大小的影響！</p>
<h3 id="影響聲音的要素"><a href="#影響聲音的要素" class="headerlink" title="影響聲音的要素"></a>影響聲音的要素</h3><p><span style="color:blue;">哪些要素影響著音色呢？</span><br></p>
<ul>
<li>ADSR Envelope</li>
<li>Tremolo ＆ Vibrato</li>
<li>泛音列</li>
<li>可能還有其他 (?)</li>
</ul>
<h3 id="ADSR-Envelope"><a href="#ADSR-Envelope" class="headerlink" title="ADSR Envelope"></a><span style="color:blue;">ADSR Envelope</span><br></h3><div style="padding:7px;">
  <!-- <img src="https://ftp.bmp.ovh/imgs/2020/09/d19848cbba1eb5ba.png" style="width:50vw;" /> -->
  <img src="8.png" style="width:50vw;" />
</div>

<p>它是什麼呢？<br>它是描述 Attack、Decay、Sustain、Release 四階段的一個包絡！<br>這樣講其實蠻抽象的，<br>可以把它想像成聲音的 schedule，讓聲音的某個<span style="color:red;">參數隨著時間做改變</span>。<br><strong><span style="color:black;">那 Attack、Decay、Sustain、Release 又分別是什麼呢？</span></strong><br>觀察上圖：</p>
<ul>
<li><strong><span style="color:black;">Attack</span></strong>：一個參數從 0 到最大值所需要的<span style="color:red;">時間</span></li>
<li><strong><span style="color:black;">Decay</span></strong>：一個參數從最大值降到 Sustain 所需要的<span style="color:red;">時間</span></li>
<li><strong><span style="color:black;">Sustain</span></strong>：它比較特別，它是一個<span style="color:red;">程度</span>的參數，代表在 Release 之前維持的一個量</li>
<li><strong><span style="color:black;">Release</span></strong>：一個參數從 Sustain 降回 0 所需要的<span style="color:red;">時間</span></li>
</ul>
<p>這樣可能還是很抽象，沒關係，到 Ableton Live 的<a href="https://learningsynths.ableton.com/en/envelopes/change-over-time" target="_blank">合成器教學頁面</a>玩玩吧！<br></p>
<h3 id="Tremolo-＆-Vibrato"><a href="#Tremolo-＆-Vibrato" class="headerlink" title="Tremolo ＆ Vibrato"></a><span style="color:blue;">Tremolo ＆ Vibrato</span><br></h3><ul>
<li><strong><span style="color:black;">Tremolo</span></strong>：讓<span style="color:red;">音量</span>呈現忽大忽小的<span style="color:red;">顫音</span>效果，可以讓長音有起伏變化不再呆板，也可以讓每個音符呈現若隱若現的效果</li>
<li><strong><span style="color:black;">Vibrato</span></strong>：讓<span style="color:red;">音高</span>呈現忽高忽低的<span style="color:red;">顫音</span>效果，比方擦弦樂器可以靠<span style="color:red;">揉弦</span>來達到這種效果</li>
</ul>
<h3 id="泛音列"><a href="#泛音列" class="headerlink" title="泛音列"></a><span style="color:blue;">泛音列</span><br></h3><p>泛音列是一系列頻率為<span style="color:red;">基音頻率 (fundamental frequency)  整數倍</span>的聲音，<br>這些聲音都是純音，可以分別用正弦波來表示。<br>那和音色有什麼關係呢？<br>強烈推薦大家看 <a href="https://www.youtube.com/channel/UCVXstWyJeO6No3jYELxYrjg" target="_blank">NiceChord (好和弦)</a> 的 <a href="https://www.youtube.com/watch?v=0iJmDhNocaQ" target="_blank">一次搞懂「泛音列」！</a><br>看完了一切都豁然開朗了呢 😎</p>
<h3 id="波形"><a href="#波形" class="headerlink" title="波形"></a>波形</h3><p><span style="color:blue;">波形何以如此多元？</span><br></p>
<div style="padding:6px;">
  <!-- <img src="https://ftp.bmp.ovh/imgs/2020/09/f615f911b624c2a1.png" style="width:39vw;" /> -->
  <img src="9.png" style="width:39vw;" />
</div>

<p>不同樂器，組成「一個音」的泛音列佔比都不太一樣。<br>那剛剛提過，泛音列上的每個音都是純音，可以分別用正弦波來表示，<br>然後再根據波的疊加原理，依照泛音列佔比，疊加出新的波形，<br>疊加後的波形就是我們最後觀察到的波形！<br>如上圖。</p>
<h3 id="感受聲音"><a href="#感受聲音" class="headerlink" title="感受聲音"></a>感受聲音</h3><p><span style="color:blue;">再用聽的和看的來感受一次吧！</span><br></p>
<div style="padding:3px;">
  <!-- <img src="https://ftp.bmp.ovh/imgs/2020/09/19b7c6548bc8fcfd.png" style="width:55vw;" /> -->
  <img src="10.png" style="width:55vw;" />
</div>

<p>以基頻為 220 赫茲的音來說明好了：<br>先給大家聽 <a href="https://youtu.be/VWO0FyNmOBw?t=87" target="_blank">220 赫茲的純音</a>。<br>接著是 <a href="https://youtu.be/VWO0FyNmOBw?t=90" target="_blank">440 赫茲的純音</a>。<br>然後我們再用一比一的比例，來調配出<a href="https://youtu.be/VWO0FyNmOBw?t=93" target="_blank">新的音色</a>。<br>新音色聽起來就像是「一個音」，但實際上卻是由兩個純音組合而成的！</p>
<h3 id="泛音列＆音色"><a href="#泛音列＆音色" class="headerlink" title="泛音列＆音色"></a>泛音列＆音色</h3><p><span style="color:blue;">泛音列與音色之間的關係</span>：</p>
<ul>
<li>基本頻率決定了一個音的音高</li>
<li>其他泛音與基頻的音量佔比決定了一個音的音色</li>
</ul>
<hr>
<h1 id="所以，我是怎麼做出來的呀？"><a href="#所以，我是怎麼做出來的呀？" class="headerlink" title="所以，我是怎麼做出來的呀？"></a>所以，我是怎麼做出來的呀？</h1><h2 id="分析＆合成音色-1"><a href="#分析＆合成音色-1" class="headerlink" title="分析＆合成音色"></a>分析＆合成音色</h2><div style="padding:30px;">
  <!-- <img src="https://ftp.bmp.ovh/imgs/2020/09/ce7ecf082f96bce6.png" style="width:30vw;" /> -->
  <img src="11.png" style="width:30vw;" />
</div>

<ol>
<li>用 <code>scipy.io.wavfile.read</code> ，將待分析的音檔讀進來</li>
<li>用 <code>scipy.fftpack.fft</code> ，將原本 time domain 的 data 轉換到 frequency domain 上</li>
<li>透過 <code>matplotlib.pyplot.plot</code> ，把圖給畫出來（如上圖，頻率取 0~1000）</li>
<li>由圖可以觀察到基頻大概是 100 赫茲左右，也可以觀察到其泛音列的數值大小</li>
<li>利用 <code>max</code> ，一個一個找出每個小區間內的最大值為何，即為圖中的明顯高起處</li>
<li>由求出來的所有值，可以推算出基頻及其所有泛音列的數值大小佔比</li>
<li>透過自己寫的 <a href="https://github.com/kanido386/playground/blob/master/2020-summer-project/timbre%20synthesizer/synthesizer.py" target="_blank">synthesizer</a>，依照上步驟的佔比，即可合成出該音色的聲音</li>
</ol>
<h2 id="改變音色-1"><a href="#改變音色-1" class="headerlink" title="改變音色"></a>改變音色</h2><p>以一個音框來說明，單音音樂效果較佳！</p>
<ol>
<li>用 <code>scipy.fftpack.fft</code> ，將該音框內的 data 轉換到 frequency domain 上</li>
<li>透過自己獨創但效果很陽春 (?) 的方法運算以後，可以粗略找到基頻</li>
<li>該<span style="color:red;">基頻及其整數倍的泛音</span>，透過剛剛分析出來的<span style="color:red;">佔比</span>來改變數值大小，即可轉換為新音色的音樂</li>
</ol>
<h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>除了學到一些音訊處理的技巧以外，最大的收穫是，「態度」才是最重要的關鍵啊！<br>目前在其他很多方面還是不夠及格，期望帶著這次的寶貴經驗，讓自己漸入佳境。</p>
<h1 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h1><p>再次感謝康明軒教授、恩衍、育浚，沒有你們，就沒有這一切！<br>另外，也非常感謝柏毅給予我簡報上的指點，讓我學到一些很重要也很實用的簡報技巧！<br><br><br>希望讀完這篇文章的您能夠有所收穫，我們下篇文見啦 😃</p>
]]></content>
      <tags>
        <tag>音訊處理</tag>
        <tag>交大</tag>
        <tag>專題</tag>
        <tag>Python</tag>
        <tag>樂理</tag>
        <tag>音色</tag>
      </tags>
  </entry>
</search>
